// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { GetOrganizationIamPolicyArgs, GetOrganizationIamPolicyResult, GetOrganizationIamPolicyOutputArgs } from "./getOrganizationIamPolicy";
export const getOrganizationIamPolicy: typeof import("./getOrganizationIamPolicy").getOrganizationIamPolicy = null as any;
export const getOrganizationIamPolicyOutput: typeof import("./getOrganizationIamPolicy").getOrganizationIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationIamPolicy","getOrganizationIamPolicyOutput"], () => require("./getOrganizationIamPolicy"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetProjectIamPolicyArgs, GetProjectIamPolicyResult, GetProjectIamPolicyOutputArgs } from "./getProjectIamPolicy";
export const getProjectIamPolicy: typeof import("./getProjectIamPolicy").getProjectIamPolicy = null as any;
export const getProjectIamPolicyOutput: typeof import("./getProjectIamPolicy").getProjectIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getProjectIamPolicy","getProjectIamPolicyOutput"], () => require("./getProjectIamPolicy"));

export { OrganizationIamBindingArgs } from "./organizationIamBinding";
export type OrganizationIamBinding = import("./organizationIamBinding").OrganizationIamBinding;
export const OrganizationIamBinding: typeof import("./organizationIamBinding").OrganizationIamBinding = null as any;
utilities.lazyLoad(exports, ["OrganizationIamBinding"], () => require("./organizationIamBinding"));

export { OrganizationIamMemberArgs } from "./organizationIamMember";
export type OrganizationIamMember = import("./organizationIamMember").OrganizationIamMember;
export const OrganizationIamMember: typeof import("./organizationIamMember").OrganizationIamMember = null as any;
utilities.lazyLoad(exports, ["OrganizationIamMember"], () => require("./organizationIamMember"));

export { OrganizationIamPolicyArgs } from "./organizationIamPolicy";
export type OrganizationIamPolicy = import("./organizationIamPolicy").OrganizationIamPolicy;
export const OrganizationIamPolicy: typeof import("./organizationIamPolicy").OrganizationIamPolicy = null as any;
utilities.lazyLoad(exports, ["OrganizationIamPolicy"], () => require("./organizationIamPolicy"));

export { ProjectArgs } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectIamBindingArgs } from "./projectIamBinding";
export type ProjectIamBinding = import("./projectIamBinding").ProjectIamBinding;
export const ProjectIamBinding: typeof import("./projectIamBinding").ProjectIamBinding = null as any;
utilities.lazyLoad(exports, ["ProjectIamBinding"], () => require("./projectIamBinding"));

export { ProjectIamMemberArgs } from "./projectIamMember";
export type ProjectIamMember = import("./projectIamMember").ProjectIamMember;
export const ProjectIamMember: typeof import("./projectIamMember").ProjectIamMember = null as any;
utilities.lazyLoad(exports, ["ProjectIamMember"], () => require("./projectIamMember"));

export { ProjectIamPolicyArgs } from "./projectIamPolicy";
export type ProjectIamPolicy = import("./projectIamPolicy").ProjectIamPolicy;
export const ProjectIamPolicy: typeof import("./projectIamPolicy").ProjectIamPolicy = null as any;
utilities.lazyLoad(exports, ["ProjectIamPolicy"], () => require("./projectIamPolicy"));


// Export enums:
export * from "../../types/enums/cloudresourcemanager/v1beta1";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "google-native:cloudresourcemanager/v1beta1:OrganizationIamBinding":
                return new OrganizationIamBinding(name, <any>undefined, { urn })
            case "google-native:cloudresourcemanager/v1beta1:OrganizationIamMember":
                return new OrganizationIamMember(name, <any>undefined, { urn })
            case "google-native:cloudresourcemanager/v1beta1:OrganizationIamPolicy":
                return new OrganizationIamPolicy(name, <any>undefined, { urn })
            case "google-native:cloudresourcemanager/v1beta1:Project":
                return new Project(name, <any>undefined, { urn })
            case "google-native:cloudresourcemanager/v1beta1:ProjectIamBinding":
                return new ProjectIamBinding(name, <any>undefined, { urn })
            case "google-native:cloudresourcemanager/v1beta1:ProjectIamMember":
                return new ProjectIamMember(name, <any>undefined, { urn })
            case "google-native:cloudresourcemanager/v1beta1:ProjectIamPolicy":
                return new ProjectIamPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("google-native", "cloudresourcemanager/v1beta1", _module)
