// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { AppArgs } from "./app";
export type App = import("./app").App;
export const App: typeof import("./app").App = null as any;
utilities.lazyLoad(exports, ["App"], () => require("./app"));

export { ApplicationArgs } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { AuthorizedCertificateArgs } from "./authorizedCertificate";
export type AuthorizedCertificate = import("./authorizedCertificate").AuthorizedCertificate;
export const AuthorizedCertificate: typeof import("./authorizedCertificate").AuthorizedCertificate = null as any;
utilities.lazyLoad(exports, ["AuthorizedCertificate"], () => require("./authorizedCertificate"));

export { DomainMappingArgs } from "./domainMapping";
export type DomainMapping = import("./domainMapping").DomainMapping;
export const DomainMapping: typeof import("./domainMapping").DomainMapping = null as any;
utilities.lazyLoad(exports, ["DomainMapping"], () => require("./domainMapping"));

export { GetAppArgs, GetAppResult, GetAppOutputArgs } from "./getApp";
export const getApp: typeof import("./getApp").getApp = null as any;
export const getAppOutput: typeof import("./getApp").getAppOutput = null as any;
utilities.lazyLoad(exports, ["getApp","getAppOutput"], () => require("./getApp"));

export { GetApplicationArgs, GetApplicationResult, GetApplicationOutputArgs } from "./getApplication";
export const getApplication: typeof import("./getApplication").getApplication = null as any;
export const getApplicationOutput: typeof import("./getApplication").getApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getApplication","getApplicationOutput"], () => require("./getApplication"));

export { GetAuthorizedCertificateArgs, GetAuthorizedCertificateResult, GetAuthorizedCertificateOutputArgs } from "./getAuthorizedCertificate";
export const getAuthorizedCertificate: typeof import("./getAuthorizedCertificate").getAuthorizedCertificate = null as any;
export const getAuthorizedCertificateOutput: typeof import("./getAuthorizedCertificate").getAuthorizedCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getAuthorizedCertificate","getAuthorizedCertificateOutput"], () => require("./getAuthorizedCertificate"));

export { GetDomainMappingArgs, GetDomainMappingResult, GetDomainMappingOutputArgs } from "./getDomainMapping";
export const getDomainMapping: typeof import("./getDomainMapping").getDomainMapping = null as any;
export const getDomainMappingOutput: typeof import("./getDomainMapping").getDomainMappingOutput = null as any;
utilities.lazyLoad(exports, ["getDomainMapping","getDomainMappingOutput"], () => require("./getDomainMapping"));

export { GetIngressRuleArgs, GetIngressRuleResult, GetIngressRuleOutputArgs } from "./getIngressRule";
export const getIngressRule: typeof import("./getIngressRule").getIngressRule = null as any;
export const getIngressRuleOutput: typeof import("./getIngressRule").getIngressRuleOutput = null as any;
utilities.lazyLoad(exports, ["getIngressRule","getIngressRuleOutput"], () => require("./getIngressRule"));

export { GetVersionArgs, GetVersionResult, GetVersionOutputArgs } from "./getVersion";
export const getVersion: typeof import("./getVersion").getVersion = null as any;
export const getVersionOutput: typeof import("./getVersion").getVersionOutput = null as any;
utilities.lazyLoad(exports, ["getVersion","getVersionOutput"], () => require("./getVersion"));

export { IngressRuleArgs } from "./ingressRule";
export type IngressRule = import("./ingressRule").IngressRule;
export const IngressRule: typeof import("./ingressRule").IngressRule = null as any;
utilities.lazyLoad(exports, ["IngressRule"], () => require("./ingressRule"));

export { VersionArgs } from "./version";
export type Version = import("./version").Version;
export const Version: typeof import("./version").Version = null as any;
utilities.lazyLoad(exports, ["Version"], () => require("./version"));


// Export enums:
export * from "../../types/enums/appengine/v1";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "google-native:appengine/v1:App":
                return new App(name, <any>undefined, { urn })
            case "google-native:appengine/v1:Application":
                return new Application(name, <any>undefined, { urn })
            case "google-native:appengine/v1:AuthorizedCertificate":
                return new AuthorizedCertificate(name, <any>undefined, { urn })
            case "google-native:appengine/v1:DomainMapping":
                return new DomainMapping(name, <any>undefined, { urn })
            case "google-native:appengine/v1:IngressRule":
                return new IngressRule(name, <any>undefined, { urn })
            case "google-native:appengine/v1:Version":
                return new Version(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("google-native", "appengine/v1", _module)
