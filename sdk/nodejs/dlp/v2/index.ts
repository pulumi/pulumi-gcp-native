// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { DeidentifyTemplateArgs } from "./deidentifyTemplate";
export type DeidentifyTemplate = import("./deidentifyTemplate").DeidentifyTemplate;
export const DeidentifyTemplate: typeof import("./deidentifyTemplate").DeidentifyTemplate = null as any;
utilities.lazyLoad(exports, ["DeidentifyTemplate"], () => require("./deidentifyTemplate"));

export { DiscoveryConfigArgs } from "./discoveryConfig";
export type DiscoveryConfig = import("./discoveryConfig").DiscoveryConfig;
export const DiscoveryConfig: typeof import("./discoveryConfig").DiscoveryConfig = null as any;
utilities.lazyLoad(exports, ["DiscoveryConfig"], () => require("./discoveryConfig"));

export { DlpJobArgs } from "./dlpJob";
export type DlpJob = import("./dlpJob").DlpJob;
export const DlpJob: typeof import("./dlpJob").DlpJob = null as any;
utilities.lazyLoad(exports, ["DlpJob"], () => require("./dlpJob"));

export { GetDeidentifyTemplateArgs, GetDeidentifyTemplateResult, GetDeidentifyTemplateOutputArgs } from "./getDeidentifyTemplate";
export const getDeidentifyTemplate: typeof import("./getDeidentifyTemplate").getDeidentifyTemplate = null as any;
export const getDeidentifyTemplateOutput: typeof import("./getDeidentifyTemplate").getDeidentifyTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getDeidentifyTemplate","getDeidentifyTemplateOutput"], () => require("./getDeidentifyTemplate"));

export { GetDiscoveryConfigArgs, GetDiscoveryConfigResult, GetDiscoveryConfigOutputArgs } from "./getDiscoveryConfig";
export const getDiscoveryConfig: typeof import("./getDiscoveryConfig").getDiscoveryConfig = null as any;
export const getDiscoveryConfigOutput: typeof import("./getDiscoveryConfig").getDiscoveryConfigOutput = null as any;
utilities.lazyLoad(exports, ["getDiscoveryConfig","getDiscoveryConfigOutput"], () => require("./getDiscoveryConfig"));

export { GetDlpJobArgs, GetDlpJobResult, GetDlpJobOutputArgs } from "./getDlpJob";
export const getDlpJob: typeof import("./getDlpJob").getDlpJob = null as any;
export const getDlpJobOutput: typeof import("./getDlpJob").getDlpJobOutput = null as any;
utilities.lazyLoad(exports, ["getDlpJob","getDlpJobOutput"], () => require("./getDlpJob"));

export { GetInspectTemplateArgs, GetInspectTemplateResult, GetInspectTemplateOutputArgs } from "./getInspectTemplate";
export const getInspectTemplate: typeof import("./getInspectTemplate").getInspectTemplate = null as any;
export const getInspectTemplateOutput: typeof import("./getInspectTemplate").getInspectTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getInspectTemplate","getInspectTemplateOutput"], () => require("./getInspectTemplate"));

export { GetJobTriggerArgs, GetJobTriggerResult, GetJobTriggerOutputArgs } from "./getJobTrigger";
export const getJobTrigger: typeof import("./getJobTrigger").getJobTrigger = null as any;
export const getJobTriggerOutput: typeof import("./getJobTrigger").getJobTriggerOutput = null as any;
utilities.lazyLoad(exports, ["getJobTrigger","getJobTriggerOutput"], () => require("./getJobTrigger"));

export { GetOrganizationDiscoveryConfigArgs, GetOrganizationDiscoveryConfigResult, GetOrganizationDiscoveryConfigOutputArgs } from "./getOrganizationDiscoveryConfig";
export const getOrganizationDiscoveryConfig: typeof import("./getOrganizationDiscoveryConfig").getOrganizationDiscoveryConfig = null as any;
export const getOrganizationDiscoveryConfigOutput: typeof import("./getOrganizationDiscoveryConfig").getOrganizationDiscoveryConfigOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationDiscoveryConfig","getOrganizationDiscoveryConfigOutput"], () => require("./getOrganizationDiscoveryConfig"));

export { GetOrganizationInspectTemplateArgs, GetOrganizationInspectTemplateResult, GetOrganizationInspectTemplateOutputArgs } from "./getOrganizationInspectTemplate";
export const getOrganizationInspectTemplate: typeof import("./getOrganizationInspectTemplate").getOrganizationInspectTemplate = null as any;
export const getOrganizationInspectTemplateOutput: typeof import("./getOrganizationInspectTemplate").getOrganizationInspectTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationInspectTemplate","getOrganizationInspectTemplateOutput"], () => require("./getOrganizationInspectTemplate"));

export { GetOrganizationJobTriggerArgs, GetOrganizationJobTriggerResult, GetOrganizationJobTriggerOutputArgs } from "./getOrganizationJobTrigger";
export const getOrganizationJobTrigger: typeof import("./getOrganizationJobTrigger").getOrganizationJobTrigger = null as any;
export const getOrganizationJobTriggerOutput: typeof import("./getOrganizationJobTrigger").getOrganizationJobTriggerOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationJobTrigger","getOrganizationJobTriggerOutput"], () => require("./getOrganizationJobTrigger"));

export { GetOrganizationsDeidentifyTemplateArgs, GetOrganizationsDeidentifyTemplateResult, GetOrganizationsDeidentifyTemplateOutputArgs } from "./getOrganizationsDeidentifyTemplate";
export const getOrganizationsDeidentifyTemplate: typeof import("./getOrganizationsDeidentifyTemplate").getOrganizationsDeidentifyTemplate = null as any;
export const getOrganizationsDeidentifyTemplateOutput: typeof import("./getOrganizationsDeidentifyTemplate").getOrganizationsDeidentifyTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationsDeidentifyTemplate","getOrganizationsDeidentifyTemplateOutput"], () => require("./getOrganizationsDeidentifyTemplate"));

export { GetStoredInfoTypeArgs, GetStoredInfoTypeResult, GetStoredInfoTypeOutputArgs } from "./getStoredInfoType";
export const getStoredInfoType: typeof import("./getStoredInfoType").getStoredInfoType = null as any;
export const getStoredInfoTypeOutput: typeof import("./getStoredInfoType").getStoredInfoTypeOutput = null as any;
utilities.lazyLoad(exports, ["getStoredInfoType","getStoredInfoTypeOutput"], () => require("./getStoredInfoType"));

export { InspectTemplateArgs } from "./inspectTemplate";
export type InspectTemplate = import("./inspectTemplate").InspectTemplate;
export const InspectTemplate: typeof import("./inspectTemplate").InspectTemplate = null as any;
utilities.lazyLoad(exports, ["InspectTemplate"], () => require("./inspectTemplate"));

export { JobTriggerArgs } from "./jobTrigger";
export type JobTrigger = import("./jobTrigger").JobTrigger;
export const JobTrigger: typeof import("./jobTrigger").JobTrigger = null as any;
utilities.lazyLoad(exports, ["JobTrigger"], () => require("./jobTrigger"));

export { OrganizationDiscoveryConfigArgs } from "./organizationDiscoveryConfig";
export type OrganizationDiscoveryConfig = import("./organizationDiscoveryConfig").OrganizationDiscoveryConfig;
export const OrganizationDiscoveryConfig: typeof import("./organizationDiscoveryConfig").OrganizationDiscoveryConfig = null as any;
utilities.lazyLoad(exports, ["OrganizationDiscoveryConfig"], () => require("./organizationDiscoveryConfig"));

export { OrganizationInspectTemplateArgs } from "./organizationInspectTemplate";
export type OrganizationInspectTemplate = import("./organizationInspectTemplate").OrganizationInspectTemplate;
export const OrganizationInspectTemplate: typeof import("./organizationInspectTemplate").OrganizationInspectTemplate = null as any;
utilities.lazyLoad(exports, ["OrganizationInspectTemplate"], () => require("./organizationInspectTemplate"));

export { OrganizationJobTriggerArgs } from "./organizationJobTrigger";
export type OrganizationJobTrigger = import("./organizationJobTrigger").OrganizationJobTrigger;
export const OrganizationJobTrigger: typeof import("./organizationJobTrigger").OrganizationJobTrigger = null as any;
utilities.lazyLoad(exports, ["OrganizationJobTrigger"], () => require("./organizationJobTrigger"));

export { OrganizationsDeidentifyTemplateArgs } from "./organizationsDeidentifyTemplate";
export type OrganizationsDeidentifyTemplate = import("./organizationsDeidentifyTemplate").OrganizationsDeidentifyTemplate;
export const OrganizationsDeidentifyTemplate: typeof import("./organizationsDeidentifyTemplate").OrganizationsDeidentifyTemplate = null as any;
utilities.lazyLoad(exports, ["OrganizationsDeidentifyTemplate"], () => require("./organizationsDeidentifyTemplate"));

export { StoredInfoTypeArgs } from "./storedInfoType";
export type StoredInfoType = import("./storedInfoType").StoredInfoType;
export const StoredInfoType: typeof import("./storedInfoType").StoredInfoType = null as any;
utilities.lazyLoad(exports, ["StoredInfoType"], () => require("./storedInfoType"));


// Export enums:
export * from "../../types/enums/dlp/v2";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "google-native:dlp/v2:DeidentifyTemplate":
                return new DeidentifyTemplate(name, <any>undefined, { urn })
            case "google-native:dlp/v2:DiscoveryConfig":
                return new DiscoveryConfig(name, <any>undefined, { urn })
            case "google-native:dlp/v2:DlpJob":
                return new DlpJob(name, <any>undefined, { urn })
            case "google-native:dlp/v2:InspectTemplate":
                return new InspectTemplate(name, <any>undefined, { urn })
            case "google-native:dlp/v2:JobTrigger":
                return new JobTrigger(name, <any>undefined, { urn })
            case "google-native:dlp/v2:OrganizationDiscoveryConfig":
                return new OrganizationDiscoveryConfig(name, <any>undefined, { urn })
            case "google-native:dlp/v2:OrganizationInspectTemplate":
                return new OrganizationInspectTemplate(name, <any>undefined, { urn })
            case "google-native:dlp/v2:OrganizationJobTrigger":
                return new OrganizationJobTrigger(name, <any>undefined, { urn })
            case "google-native:dlp/v2:OrganizationsDeidentifyTemplate":
                return new OrganizationsDeidentifyTemplate(name, <any>undefined, { urn })
            case "google-native:dlp/v2:StoredInfoType":
                return new StoredInfoType(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("google-native", "dlp/v2", _module)
