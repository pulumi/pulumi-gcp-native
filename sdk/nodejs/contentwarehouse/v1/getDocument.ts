// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets a document. Returns NOT_FOUND if the document does not exist.
 */
export function getDocument(args: GetDocumentArgs, opts?: pulumi.InvokeOptions): Promise<GetDocumentResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:contentwarehouse/v1:getDocument", {
        "documentId": args.documentId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetDocumentArgs {
    documentId: string;
    location: string;
    project?: string;
}

export interface GetDocumentResult {
    /**
     * Document AI format to save the structured content, including OCR.
     */
    readonly cloudAiDocument: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentResponse;
    /**
     * Indicates the category (image, audio, video etc.) of the original content.
     */
    readonly contentCategory: string;
    /**
     * The time when the document is created.
     */
    readonly createTime: string;
    /**
     * The user who creates the document.
     */
    readonly creator: string;
    /**
     * Display name of the document given by the user. This name will be displayed in the UI. Customer can populate this field with the name of the document. This differs from the 'title' field as 'title' is optional and stores the top heading in the document.
     */
    readonly displayName: string;
    /**
     * Uri to display the document, for example, in the UI.
     */
    readonly displayUri: string;
    /**
     * The Document schema name. Format: projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
     */
    readonly documentSchemaName: string;
    /**
     * Raw document content.
     */
    readonly inlineRawDocument: string;
    /**
     * The resource name of the document. Format: projects/{project_number}/locations/{location}/documents/{document_id}. The name is ignored when creating a document.
     */
    readonly name: string;
    /**
     * Other document format, such as PPTX, XLXS
     */
    readonly plainText: string;
    /**
     * List of values that are user supplied metadata.
     */
    readonly properties: outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1PropertyResponse[];
    /**
     * This is used when DocAI was not used to load the document and parsing/ extracting is needed for the inline_raw_document. For example, if inline_raw_document is the byte representation of a PDF file, then this should be set to: RAW_DOCUMENT_FILE_TYPE_PDF.
     */
    readonly rawDocumentFileType: string;
    /**
     * Raw document file in Cloud Storage path.
     */
    readonly rawDocumentPath: string;
    /**
     * The reference ID set by customers. Must be unique per project and location.
     */
    readonly referenceId: string;
    /**
     * If true, text extraction will not be performed.
     */
    readonly textExtractionDisabled: boolean;
    /**
     * If true, text extraction will be performed.
     */
    readonly textExtractionEnabled: boolean;
    /**
     * Title that describes the document. This can be the top heading or text that describes the document.
     */
    readonly title: string;
    /**
     * The time when the document is last updated.
     */
    readonly updateTime: string;
    /**
     * The user who lastly updates the document.
     */
    readonly updater: string;
}
/**
 * Gets a document. Returns NOT_FOUND if the document does not exist.
 */
export function getDocumentOutput(args: GetDocumentOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDocumentResult> {
    return pulumi.output(args).apply((a: any) => getDocument(a, opts))
}

export interface GetDocumentOutputArgs {
    documentId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
