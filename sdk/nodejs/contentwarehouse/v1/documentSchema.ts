// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Creates a document schema.
 */
export class DocumentSchema extends pulumi.CustomResource {
    /**
     * Get an existing DocumentSchema resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DocumentSchema {
        return new DocumentSchema(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:contentwarehouse/v1:DocumentSchema';

    /**
     * Returns true if the given object is an instance of DocumentSchema.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DocumentSchema {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DocumentSchema.__pulumiType;
    }

    /**
     * The time when the document schema is created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Schema description.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Name of the schema given by the user. Must be unique per customer.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Document Type, true refers the document is a folder, otherwise it is a typical document.
     */
    public readonly documentIsFolder!: pulumi.Output<boolean>;
    public readonly location!: pulumi.Output<string>;
    /**
     * The resource name of the document schema. Format: projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}. The name is ignored when creating a document schema.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Document details.
     */
    public readonly propertyDefinitions!: pulumi.Output<outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1PropertyDefinitionResponse[]>;
    /**
     * The time when the document schema is last updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a DocumentSchema resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DocumentSchemaArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["documentIsFolder"] = args ? args.documentIsFolder : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["propertyDefinitions"] = args ? args.propertyDefinitions : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        } else {
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["documentIsFolder"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["propertyDefinitions"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["location", "project"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(DocumentSchema.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a DocumentSchema resource.
 */
export interface DocumentSchemaArgs {
    /**
     * Schema description.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the schema given by the user. Must be unique per customer.
     */
    displayName: pulumi.Input<string>;
    /**
     * Document Type, true refers the document is a folder, otherwise it is a typical document.
     */
    documentIsFolder?: pulumi.Input<boolean>;
    location?: pulumi.Input<string>;
    /**
     * The resource name of the document schema. Format: projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}. The name is ignored when creating a document schema.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Document details.
     */
    propertyDefinitions?: pulumi.Input<pulumi.Input<inputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1PropertyDefinitionArgs>[]>;
}
