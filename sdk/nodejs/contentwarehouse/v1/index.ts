// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { DocumentArgs } from "./document";
export type Document = import("./document").Document;
export const Document: typeof import("./document").Document = null as any;
utilities.lazyLoad(exports, ["Document"], () => require("./document"));

export { DocumentSchemaArgs } from "./documentSchema";
export type DocumentSchema = import("./documentSchema").DocumentSchema;
export const DocumentSchema: typeof import("./documentSchema").DocumentSchema = null as any;
utilities.lazyLoad(exports, ["DocumentSchema"], () => require("./documentSchema"));

export { GetDocumentArgs, GetDocumentResult, GetDocumentOutputArgs } from "./getDocument";
export const getDocument: typeof import("./getDocument").getDocument = null as any;
export const getDocumentOutput: typeof import("./getDocument").getDocumentOutput = null as any;
utilities.lazyLoad(exports, ["getDocument","getDocumentOutput"], () => require("./getDocument"));

export { GetDocumentSchemaArgs, GetDocumentSchemaResult, GetDocumentSchemaOutputArgs } from "./getDocumentSchema";
export const getDocumentSchema: typeof import("./getDocumentSchema").getDocumentSchema = null as any;
export const getDocumentSchemaOutput: typeof import("./getDocumentSchema").getDocumentSchemaOutput = null as any;
utilities.lazyLoad(exports, ["getDocumentSchema","getDocumentSchemaOutput"], () => require("./getDocumentSchema"));

export { GetRuleSetArgs, GetRuleSetResult, GetRuleSetOutputArgs } from "./getRuleSet";
export const getRuleSet: typeof import("./getRuleSet").getRuleSet = null as any;
export const getRuleSetOutput: typeof import("./getRuleSet").getRuleSetOutput = null as any;
utilities.lazyLoad(exports, ["getRuleSet","getRuleSetOutput"], () => require("./getRuleSet"));

export { GetSynonymSetArgs, GetSynonymSetResult, GetSynonymSetOutputArgs } from "./getSynonymSet";
export const getSynonymSet: typeof import("./getSynonymSet").getSynonymSet = null as any;
export const getSynonymSetOutput: typeof import("./getSynonymSet").getSynonymSetOutput = null as any;
utilities.lazyLoad(exports, ["getSynonymSet","getSynonymSetOutput"], () => require("./getSynonymSet"));

export { RuleSetArgs } from "./ruleSet";
export type RuleSet = import("./ruleSet").RuleSet;
export const RuleSet: typeof import("./ruleSet").RuleSet = null as any;
utilities.lazyLoad(exports, ["RuleSet"], () => require("./ruleSet"));

export { SynonymSetArgs } from "./synonymSet";
export type SynonymSet = import("./synonymSet").SynonymSet;
export const SynonymSet: typeof import("./synonymSet").SynonymSet = null as any;
utilities.lazyLoad(exports, ["SynonymSet"], () => require("./synonymSet"));


// Export enums:
export * from "../../types/enums/contentwarehouse/v1";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "google-native:contentwarehouse/v1:Document":
                return new Document(name, <any>undefined, { urn })
            case "google-native:contentwarehouse/v1:DocumentSchema":
                return new DocumentSchema(name, <any>undefined, { urn })
            case "google-native:contentwarehouse/v1:RuleSet":
                return new RuleSet(name, <any>undefined, { urn })
            case "google-native:contentwarehouse/v1:SynonymSet":
                return new SynonymSet(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("google-native", "contentwarehouse/v1", _module)
