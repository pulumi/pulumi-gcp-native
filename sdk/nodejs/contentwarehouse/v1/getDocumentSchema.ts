// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets a document schema. Returns NOT_FOUND if the document schema does not exist.
 */
export function getDocumentSchema(args: GetDocumentSchemaArgs, opts?: pulumi.InvokeOptions): Promise<GetDocumentSchemaResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-native:contentwarehouse/v1:getDocumentSchema", {
        "documentSchemaId": args.documentSchemaId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetDocumentSchemaArgs {
    documentSchemaId: string;
    location: string;
    project?: string;
}

export interface GetDocumentSchemaResult {
    /**
     * The time when the document schema is created.
     */
    readonly createTime: string;
    /**
     * Schema description.
     */
    readonly description: string;
    /**
     * Name of the schema given by the user. Must be unique per customer.
     */
    readonly displayName: string;
    /**
     * Document Type, true refers the document is a folder, otherwise it is a typical document.
     */
    readonly documentIsFolder: boolean;
    /**
     * The resource name of the document schema. Format: projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}. The name is ignored when creating a document schema.
     */
    readonly name: string;
    /**
     * Document details.
     */
    readonly propertyDefinitions: outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1PropertyDefinitionResponse[];
    /**
     * The time when the document schema is last updated.
     */
    readonly updateTime: string;
}

export function getDocumentSchemaOutput(args: GetDocumentSchemaOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDocumentSchemaResult> {
    return pulumi.output(args).apply(a => getDocumentSchema(a, opts))
}

export interface GetDocumentSchemaOutputArgs {
    documentSchemaId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
