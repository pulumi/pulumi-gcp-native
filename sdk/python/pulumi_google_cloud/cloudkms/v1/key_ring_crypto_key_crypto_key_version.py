# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from ._inputs import *

__all__ = ['KeyRingCryptoKeyCryptoKeyVersion']


class KeyRingCryptoKeyCryptoKeyVersion(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 attestation: Optional[pulumi.Input[pulumi.InputType['KeyOperationAttestationArgs']]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 crypto_key_versions_id: Optional[pulumi.Input[str]] = None,
                 crypto_keys_id: Optional[pulumi.Input[str]] = None,
                 destroy_event_time: Optional[pulumi.Input[str]] = None,
                 destroy_time: Optional[pulumi.Input[str]] = None,
                 external_protection_level_options: Optional[pulumi.Input[pulumi.InputType['ExternalProtectionLevelOptionsArgs']]] = None,
                 generate_time: Optional[pulumi.Input[str]] = None,
                 import_failure_reason: Optional[pulumi.Input[str]] = None,
                 import_job: Optional[pulumi.Input[str]] = None,
                 import_time: Optional[pulumi.Input[str]] = None,
                 key_rings_id: Optional[pulumi.Input[str]] = None,
                 locations_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 projects_id: Optional[pulumi.Input[str]] = None,
                 protection_level: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a new CryptoKeyVersion in a CryptoKey. The server will assign the next sequential id. If unset, state will be set to ENABLED.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] algorithm: Output only. The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
        :param pulumi.Input[pulumi.InputType['KeyOperationAttestationArgs']] attestation: Output only. Statement that was generated and signed by the HSM at key creation time. Use this statement to verify attributes of the key as stored on the HSM, independently of Google. Only provided for key versions with protection_level HSM.
        :param pulumi.Input[str] create_time: Output only. The time at which this CryptoKeyVersion was created.
        :param pulumi.Input[str] destroy_event_time: Output only. The time this CryptoKeyVersion's key material was destroyed. Only present if state is DESTROYED.
        :param pulumi.Input[str] destroy_time: Output only. The time this CryptoKeyVersion's key material is scheduled for destruction. Only present if state is DESTROY_SCHEDULED.
        :param pulumi.Input[pulumi.InputType['ExternalProtectionLevelOptionsArgs']] external_protection_level_options: ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level.
        :param pulumi.Input[str] generate_time: Output only. The time this CryptoKeyVersion's key material was generated.
        :param pulumi.Input[str] import_failure_reason: Output only. The root cause of an import failure. Only present if state is IMPORT_FAILED.
        :param pulumi.Input[str] import_job: Output only. The name of the ImportJob used to import this CryptoKeyVersion. Only present if the underlying key material was imported.
        :param pulumi.Input[str] import_time: Output only. The time at which this CryptoKeyVersion's key material was imported.
        :param pulumi.Input[str] name: Output only. The resource name for this CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`.
        :param pulumi.Input[str] protection_level: Output only. The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.
        :param pulumi.Input[str] state: The current state of the CryptoKeyVersion.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['algorithm'] = algorithm
            __props__['attestation'] = attestation
            __props__['create_time'] = create_time
            if crypto_key_versions_id is None and not opts.urn:
                raise TypeError("Missing required property 'crypto_key_versions_id'")
            __props__['crypto_key_versions_id'] = crypto_key_versions_id
            if crypto_keys_id is None and not opts.urn:
                raise TypeError("Missing required property 'crypto_keys_id'")
            __props__['crypto_keys_id'] = crypto_keys_id
            __props__['destroy_event_time'] = destroy_event_time
            __props__['destroy_time'] = destroy_time
            __props__['external_protection_level_options'] = external_protection_level_options
            __props__['generate_time'] = generate_time
            __props__['import_failure_reason'] = import_failure_reason
            __props__['import_job'] = import_job
            __props__['import_time'] = import_time
            if key_rings_id is None and not opts.urn:
                raise TypeError("Missing required property 'key_rings_id'")
            __props__['key_rings_id'] = key_rings_id
            if locations_id is None and not opts.urn:
                raise TypeError("Missing required property 'locations_id'")
            __props__['locations_id'] = locations_id
            __props__['name'] = name
            if projects_id is None and not opts.urn:
                raise TypeError("Missing required property 'projects_id'")
            __props__['projects_id'] = projects_id
            __props__['protection_level'] = protection_level
            __props__['state'] = state
        super(KeyRingCryptoKeyCryptoKeyVersion, __self__).__init__(
            'google-cloud:cloudkms/v1:KeyRingCryptoKeyCryptoKeyVersion',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'KeyRingCryptoKeyCryptoKeyVersion':
        """
        Get an existing KeyRingCryptoKeyCryptoKeyVersion resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return KeyRingCryptoKeyCryptoKeyVersion(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

