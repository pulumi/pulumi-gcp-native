# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from ._inputs import *

__all__ = ['KeyRingImportJob']


class KeyRingImportJob(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attestation: Optional[pulumi.Input[pulumi.InputType['KeyOperationAttestationArgs']]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 expire_event_time: Optional[pulumi.Input[str]] = None,
                 expire_time: Optional[pulumi.Input[str]] = None,
                 generate_time: Optional[pulumi.Input[str]] = None,
                 import_jobs_id: Optional[pulumi.Input[str]] = None,
                 import_method: Optional[pulumi.Input[str]] = None,
                 key_rings_id: Optional[pulumi.Input[str]] = None,
                 locations_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 projects_id: Optional[pulumi.Input[str]] = None,
                 protection_level: Optional[pulumi.Input[str]] = None,
                 public_key: Optional[pulumi.Input[pulumi.InputType['WrappingPublicKeyArgs']]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a new ImportJob within a KeyRing. ImportJob.import_method is required.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['KeyOperationAttestationArgs']] attestation: Output only. Statement that was generated and signed by the key creator (for example, an HSM) at key creation time. Use this statement to verify attributes of the key as stored on the HSM, independently of Google. Only present if the chosen ImportMethod is one with a protection level of HSM.
        :param pulumi.Input[str] create_time: Output only. The time at which this ImportJob was created.
        :param pulumi.Input[str] expire_event_time: Output only. The time this ImportJob expired. Only present if state is EXPIRED.
        :param pulumi.Input[str] expire_time: Output only. The time at which this ImportJob is scheduled for expiration and can no longer be used to import key material.
        :param pulumi.Input[str] generate_time: Output only. The time this ImportJob's key material was generated.
        :param pulumi.Input[str] import_method: Required. Immutable. The wrapping method to be used for incoming key material.
        :param pulumi.Input[str] name: Output only. The resource name for this ImportJob in the format `projects/*/locations/*/keyRings/*/importJobs/*`.
        :param pulumi.Input[str] protection_level: Required. Immutable. The protection level of the ImportJob. This must match the protection_level of the version_template on the CryptoKey you attempt to import into.
        :param pulumi.Input[pulumi.InputType['WrappingPublicKeyArgs']] public_key: Output only. The public key with which to wrap key material prior to import. Only returned if state is ACTIVE.
        :param pulumi.Input[str] state: Output only. The current state of the ImportJob, indicating if it can be used.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['attestation'] = attestation
            __props__['create_time'] = create_time
            __props__['expire_event_time'] = expire_event_time
            __props__['expire_time'] = expire_time
            __props__['generate_time'] = generate_time
            if import_jobs_id is None and not opts.urn:
                raise TypeError("Missing required property 'import_jobs_id'")
            __props__['import_jobs_id'] = import_jobs_id
            __props__['import_method'] = import_method
            if key_rings_id is None and not opts.urn:
                raise TypeError("Missing required property 'key_rings_id'")
            __props__['key_rings_id'] = key_rings_id
            if locations_id is None and not opts.urn:
                raise TypeError("Missing required property 'locations_id'")
            __props__['locations_id'] = locations_id
            __props__['name'] = name
            if projects_id is None and not opts.urn:
                raise TypeError("Missing required property 'projects_id'")
            __props__['projects_id'] = projects_id
            __props__['protection_level'] = protection_level
            __props__['public_key'] = public_key
            __props__['state'] = state
        super(KeyRingImportJob, __self__).__init__(
            'google-cloud:cloudkms/v1:KeyRingImportJob',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'KeyRingImportJob':
        """
        Get an existing KeyRingImportJob resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return KeyRingImportJob(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

