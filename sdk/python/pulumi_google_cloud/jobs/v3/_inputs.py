# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'ApplicationInfoArgs',
    'ClientEventArgs',
    'CompanyArgs',
    'CompanyDerivedInfoArgs',
    'CompensationEntryArgs',
    'CompensationInfoArgs',
    'CompensationRangeArgs',
    'JobArgs',
    'JobDerivedInfoArgs',
    'JobEventArgs',
    'LatLngArgs',
    'LocationArgs',
    'MoneyArgs',
    'PostalAddressArgs',
    'ProcessingOptionsArgs',
]

@pulumi.input_type
class ApplicationInfoArgs:
    def __init__(__self__, *,
                 emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 instruction: Optional[pulumi.Input[str]] = None,
                 uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Application related details of a job posting.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] emails: Optional but at least one of uris, emails or instruction must be specified. Use this field to specify email address(es) to which resumes or applications can be sent. The maximum number of allowed characters for each entry is 255.
        :param pulumi.Input[str] instruction: Optional but at least one of uris, emails or instruction must be specified. Use this field to provide instructions, such as "Mail your application to ...", that a candidate can follow to apply for the job. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 3,000.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] uris: Optional but at least one of uris, emails or instruction must be specified. Use this URI field to direct an applicant to a website, for example to link to an online application form. The maximum number of allowed characters for each entry is 2,000.
        """
        if emails is not None:
            pulumi.set(__self__, "emails", emails)
        if instruction is not None:
            pulumi.set(__self__, "instruction", instruction)
        if uris is not None:
            pulumi.set(__self__, "uris", uris)

    @property
    @pulumi.getter
    def emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional but at least one of uris, emails or instruction must be specified. Use this field to specify email address(es) to which resumes or applications can be sent. The maximum number of allowed characters for each entry is 255.
        """
        return pulumi.get(self, "emails")

    @emails.setter
    def emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "emails", value)

    @property
    @pulumi.getter
    def instruction(self) -> Optional[pulumi.Input[str]]:
        """
        Optional but at least one of uris, emails or instruction must be specified. Use this field to provide instructions, such as "Mail your application to ...", that a candidate can follow to apply for the job. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 3,000.
        """
        return pulumi.get(self, "instruction")

    @instruction.setter
    def instruction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instruction", value)

    @property
    @pulumi.getter
    def uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional but at least one of uris, emails or instruction must be specified. Use this URI field to direct an applicant to a website, for example to link to an online application form. The maximum number of allowed characters for each entry is 2,000.
        """
        return pulumi.get(self, "uris")

    @uris.setter
    def uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "uris", value)


@pulumi.input_type
class ClientEventArgs:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[str]] = None,
                 event_id: Optional[pulumi.Input[str]] = None,
                 extra_info: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 job_event: Optional[pulumi.Input['JobEventArgs']] = None,
                 parent_event_id: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None):
        """
        An event issued when an end user interacts with the application that implements Cloud Talent Solution. Providing this information improves the quality of search and recommendation for the API clients, enabling the service to perform optimally. The number of events sent must be consistent with other calls, such as job searches, issued to the service by the client.
        :param pulumi.Input[str] create_time: Required. The timestamp of the event.
        :param pulumi.Input[str] event_id: Required. A unique identifier, generated by the client application. This `event_id` is used to establish the relationship between different events (see parent_event_id).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] extra_info: Optional. Extra information about this event. Used for storing information with no matching field in event payload, for example, user application specific context or details. At most 20 keys are supported. The maximum total size of all keys and values is 2 KB.
        :param pulumi.Input['JobEventArgs'] job_event: A event issued when a job seeker interacts with the application that implements Cloud Talent Solution.
        :param pulumi.Input[str] parent_event_id: Optional. The event_id of an event that resulted in the current event. For example, a Job view event usually follows a parent impression event: A job seeker first does a search where a list of jobs appears (impression). The job seeker then selects a result and views the description of a particular job (Job view).
        :param pulumi.Input[str] request_id: Required. A unique ID generated in the API responses. It can be found in ResponseMetadata.request_id.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if event_id is not None:
            pulumi.set(__self__, "event_id", event_id)
        if extra_info is not None:
            pulumi.set(__self__, "extra_info", extra_info)
        if job_event is not None:
            pulumi.set(__self__, "job_event", job_event)
        if parent_event_id is not None:
            pulumi.set(__self__, "parent_event_id", parent_event_id)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Required. The timestamp of the event.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> Optional[pulumi.Input[str]]:
        """
        Required. A unique identifier, generated by the client application. This `event_id` is used to establish the relationship between different events (see parent_event_id).
        """
        return pulumi.get(self, "event_id")

    @event_id.setter
    def event_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_id", value)

    @property
    @pulumi.getter(name="extraInfo")
    def extra_info(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional. Extra information about this event. Used for storing information with no matching field in event payload, for example, user application specific context or details. At most 20 keys are supported. The maximum total size of all keys and values is 2 KB.
        """
        return pulumi.get(self, "extra_info")

    @extra_info.setter
    def extra_info(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "extra_info", value)

    @property
    @pulumi.getter(name="jobEvent")
    def job_event(self) -> Optional[pulumi.Input['JobEventArgs']]:
        """
        A event issued when a job seeker interacts with the application that implements Cloud Talent Solution.
        """
        return pulumi.get(self, "job_event")

    @job_event.setter
    def job_event(self, value: Optional[pulumi.Input['JobEventArgs']]):
        pulumi.set(self, "job_event", value)

    @property
    @pulumi.getter(name="parentEventId")
    def parent_event_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The event_id of an event that resulted in the current event. For example, a Job view event usually follows a parent impression event: A job seeker first does a search where a list of jobs appears (impression). The job seeker then selects a result and views the description of a particular job (Job view).
        """
        return pulumi.get(self, "parent_event_id")

    @parent_event_id.setter
    def parent_event_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_event_id", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        """
        Required. A unique ID generated in the API responses. It can be found in ResponseMetadata.request_id.
        """
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)


@pulumi.input_type
class CompanyArgs:
    def __init__(__self__, *,
                 career_site_uri: Optional[pulumi.Input[str]] = None,
                 derived_info: Optional[pulumi.Input['CompanyDerivedInfoArgs']] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 eeo_text: Optional[pulumi.Input[str]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 headquarters_address: Optional[pulumi.Input[str]] = None,
                 hiring_agency: Optional[pulumi.Input[bool]] = None,
                 image_uri: Optional[pulumi.Input[str]] = None,
                 keyword_searchable_job_custom_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 suspended: Optional[pulumi.Input[bool]] = None,
                 website_uri: Optional[pulumi.Input[str]] = None):
        """
        A Company resource represents a company in the service. A company is the entity that owns job postings, that is, the hiring entity responsible for employing applicants for the job position.
        :param pulumi.Input[str] career_site_uri: Optional. The URI to employer's career site or careers page on the employer's web site, for example, "https://careers.google.com".
        :param pulumi.Input['CompanyDerivedInfoArgs'] derived_info: Derived details about the company.
        :param pulumi.Input[str] display_name: Required. The display name of the company, for example, "Google LLC".
        :param pulumi.Input[str] eeo_text: Optional. Equal Employment Opportunity legal disclaimer text to be associated with all jobs, and typically to be displayed in all roles. The maximum number of allowed characters is 500.
        :param pulumi.Input[str] external_id: Required. Client side company identifier, used to uniquely identify the company. The maximum number of allowed characters is 255.
        :param pulumi.Input[str] headquarters_address: Optional. The street address of the company's main headquarters, which may be different from the job location. The service attempts to geolocate the provided address, and populates a more specific location wherever possible in DerivedInfo.headquarters_location.
        :param pulumi.Input[bool] hiring_agency: Optional. Set to true if it is the hiring agency that post jobs for other employers. Defaults to false if not provided.
        :param pulumi.Input[str] image_uri: Optional. A URI that hosts the employer's company logo.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] keyword_searchable_job_custom_attributes: Optional. A list of keys of filterable Job.custom_attributes, whose corresponding `string_values` are used in keyword search. Jobs with `string_values` under these specified field keys are returned if any of the values matches the search keyword. Custom field values with parenthesis, brackets and special symbols won't be properly searchable, and those keyword queries need to be surrounded by quotes.
        :param pulumi.Input[str] name: Required during company update. The resource name for a company. This is generated by the service when a company is created. The format is "projects/{project_id}/companies/{company_id}", for example, "projects/api-test-project/companies/foo".
        :param pulumi.Input[str] size: Optional. The employer's company size.
        :param pulumi.Input[bool] suspended: Indicates whether a company is flagged to be suspended from public availability by the service when job content appears suspicious, abusive, or spammy.
        :param pulumi.Input[str] website_uri: Optional. The URI representing the company's primary web site or home page, for example, "https://www.google.com". The maximum number of allowed characters is 255.
        """
        if career_site_uri is not None:
            pulumi.set(__self__, "career_site_uri", career_site_uri)
        if derived_info is not None:
            pulumi.set(__self__, "derived_info", derived_info)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if eeo_text is not None:
            pulumi.set(__self__, "eeo_text", eeo_text)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if headquarters_address is not None:
            pulumi.set(__self__, "headquarters_address", headquarters_address)
        if hiring_agency is not None:
            pulumi.set(__self__, "hiring_agency", hiring_agency)
        if image_uri is not None:
            pulumi.set(__self__, "image_uri", image_uri)
        if keyword_searchable_job_custom_attributes is not None:
            pulumi.set(__self__, "keyword_searchable_job_custom_attributes", keyword_searchable_job_custom_attributes)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if suspended is not None:
            pulumi.set(__self__, "suspended", suspended)
        if website_uri is not None:
            pulumi.set(__self__, "website_uri", website_uri)

    @property
    @pulumi.getter(name="careerSiteUri")
    def career_site_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The URI to employer's career site or careers page on the employer's web site, for example, "https://careers.google.com".
        """
        return pulumi.get(self, "career_site_uri")

    @career_site_uri.setter
    def career_site_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "career_site_uri", value)

    @property
    @pulumi.getter(name="derivedInfo")
    def derived_info(self) -> Optional[pulumi.Input['CompanyDerivedInfoArgs']]:
        """
        Derived details about the company.
        """
        return pulumi.get(self, "derived_info")

    @derived_info.setter
    def derived_info(self, value: Optional[pulumi.Input['CompanyDerivedInfoArgs']]):
        pulumi.set(self, "derived_info", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Required. The display name of the company, for example, "Google LLC".
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="eeoText")
    def eeo_text(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Equal Employment Opportunity legal disclaimer text to be associated with all jobs, and typically to be displayed in all roles. The maximum number of allowed characters is 500.
        """
        return pulumi.get(self, "eeo_text")

    @eeo_text.setter
    def eeo_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eeo_text", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        """
        Required. Client side company identifier, used to uniquely identify the company. The maximum number of allowed characters is 255.
        """
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="headquartersAddress")
    def headquarters_address(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The street address of the company's main headquarters, which may be different from the job location. The service attempts to geolocate the provided address, and populates a more specific location wherever possible in DerivedInfo.headquarters_location.
        """
        return pulumi.get(self, "headquarters_address")

    @headquarters_address.setter
    def headquarters_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "headquarters_address", value)

    @property
    @pulumi.getter(name="hiringAgency")
    def hiring_agency(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional. Set to true if it is the hiring agency that post jobs for other employers. Defaults to false if not provided.
        """
        return pulumi.get(self, "hiring_agency")

    @hiring_agency.setter
    def hiring_agency(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hiring_agency", value)

    @property
    @pulumi.getter(name="imageUri")
    def image_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. A URI that hosts the employer's company logo.
        """
        return pulumi.get(self, "image_uri")

    @image_uri.setter
    def image_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_uri", value)

    @property
    @pulumi.getter(name="keywordSearchableJobCustomAttributes")
    def keyword_searchable_job_custom_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional. A list of keys of filterable Job.custom_attributes, whose corresponding `string_values` are used in keyword search. Jobs with `string_values` under these specified field keys are returned if any of the values matches the search keyword. Custom field values with parenthesis, brackets and special symbols won't be properly searchable, and those keyword queries need to be surrounded by quotes.
        """
        return pulumi.get(self, "keyword_searchable_job_custom_attributes")

    @keyword_searchable_job_custom_attributes.setter
    def keyword_searchable_job_custom_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "keyword_searchable_job_custom_attributes", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Required during company update. The resource name for a company. This is generated by the service when a company is created. The format is "projects/{project_id}/companies/{company_id}", for example, "projects/api-test-project/companies/foo".
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The employer's company size.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def suspended(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether a company is flagged to be suspended from public availability by the service when job content appears suspicious, abusive, or spammy.
        """
        return pulumi.get(self, "suspended")

    @suspended.setter
    def suspended(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suspended", value)

    @property
    @pulumi.getter(name="websiteUri")
    def website_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The URI representing the company's primary web site or home page, for example, "https://www.google.com". The maximum number of allowed characters is 255.
        """
        return pulumi.get(self, "website_uri")

    @website_uri.setter
    def website_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "website_uri", value)


@pulumi.input_type
class CompanyDerivedInfoArgs:
    def __init__(__self__, *,
                 headquarters_location: Optional[pulumi.Input['LocationArgs']] = None):
        """
        Derived details about the company.
        :param pulumi.Input['LocationArgs'] headquarters_location: A structured headquarters location of the company, resolved from Company.hq_location if provided.
        """
        if headquarters_location is not None:
            pulumi.set(__self__, "headquarters_location", headquarters_location)

    @property
    @pulumi.getter(name="headquartersLocation")
    def headquarters_location(self) -> Optional[pulumi.Input['LocationArgs']]:
        """
        A structured headquarters location of the company, resolved from Company.hq_location if provided.
        """
        return pulumi.get(self, "headquarters_location")

    @headquarters_location.setter
    def headquarters_location(self, value: Optional[pulumi.Input['LocationArgs']]):
        pulumi.set(self, "headquarters_location", value)


@pulumi.input_type
class CompensationEntryArgs:
    def __init__(__self__, *,
                 amount: Optional[pulumi.Input['MoneyArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 expected_units_per_year: Optional[pulumi.Input[float]] = None,
                 range: Optional[pulumi.Input['CompensationRangeArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        A compensation entry that represents one component of compensation, such as base pay, bonus, or other compensation type. Annualization: One compensation entry can be annualized if - it contains valid amount or range. - and its expected_units_per_year is set or can be derived. Its annualized range is determined as (amount or range) times expected_units_per_year.
        :param pulumi.Input['MoneyArgs'] amount: Optional. Compensation amount.
        :param pulumi.Input[str] description: Optional. Compensation description. For example, could indicate equity terms or provide additional context to an estimated bonus.
        :param pulumi.Input[float] expected_units_per_year: Optional. Expected number of units paid each year. If not specified, when Job.employment_types is FULLTIME, a default value is inferred based on unit. Default values: - HOURLY: 2080 - DAILY: 260 - WEEKLY: 52 - MONTHLY: 12 - ANNUAL: 1
        :param pulumi.Input['CompensationRangeArgs'] range: Optional. Compensation range.
        :param pulumi.Input[str] type: Optional. Compensation type. Default is CompensationUnit.COMPENSATION_TYPE_UNSPECIFIED.
        :param pulumi.Input[str] unit: Optional. Frequency of the specified amount. Default is CompensationUnit.COMPENSATION_UNIT_UNSPECIFIED.
        """
        if amount is not None:
            pulumi.set(__self__, "amount", amount)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expected_units_per_year is not None:
            pulumi.set(__self__, "expected_units_per_year", expected_units_per_year)
        if range is not None:
            pulumi.set(__self__, "range", range)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def amount(self) -> Optional[pulumi.Input['MoneyArgs']]:
        """
        Optional. Compensation amount.
        """
        return pulumi.get(self, "amount")

    @amount.setter
    def amount(self, value: Optional[pulumi.Input['MoneyArgs']]):
        pulumi.set(self, "amount", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Compensation description. For example, could indicate equity terms or provide additional context to an estimated bonus.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="expectedUnitsPerYear")
    def expected_units_per_year(self) -> Optional[pulumi.Input[float]]:
        """
        Optional. Expected number of units paid each year. If not specified, when Job.employment_types is FULLTIME, a default value is inferred based on unit. Default values: - HOURLY: 2080 - DAILY: 260 - WEEKLY: 52 - MONTHLY: 12 - ANNUAL: 1
        """
        return pulumi.get(self, "expected_units_per_year")

    @expected_units_per_year.setter
    def expected_units_per_year(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "expected_units_per_year", value)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input['CompensationRangeArgs']]:
        """
        Optional. Compensation range.
        """
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input['CompensationRangeArgs']]):
        pulumi.set(self, "range", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Compensation type. Default is CompensationUnit.COMPENSATION_TYPE_UNSPECIFIED.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Frequency of the specified amount. Default is CompensationUnit.COMPENSATION_UNIT_UNSPECIFIED.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class CompensationInfoArgs:
    def __init__(__self__, *,
                 annualized_base_compensation_range: Optional[pulumi.Input['CompensationRangeArgs']] = None,
                 annualized_total_compensation_range: Optional[pulumi.Input['CompensationRangeArgs']] = None,
                 entries: Optional[pulumi.Input[Sequence[pulumi.Input['CompensationEntryArgs']]]] = None):
        """
        Job compensation details.
        :param pulumi.Input['CompensationRangeArgs'] annualized_base_compensation_range: Annualized base compensation range. Computed as base compensation entry's CompensationEntry.compensation times CompensationEntry.expected_units_per_year. See CompensationEntry for explanation on compensation annualization.
        :param pulumi.Input['CompensationRangeArgs'] annualized_total_compensation_range: Annualized total compensation range. Computed as all compensation entries' CompensationEntry.compensation times CompensationEntry.expected_units_per_year. See CompensationEntry for explanation on compensation annualization.
        :param pulumi.Input[Sequence[pulumi.Input['CompensationEntryArgs']]] entries: Optional. Job compensation information. At most one entry can be of type CompensationInfo.CompensationType.BASE, which is referred as ** base compensation entry ** for the job.
        """
        if annualized_base_compensation_range is not None:
            pulumi.set(__self__, "annualized_base_compensation_range", annualized_base_compensation_range)
        if annualized_total_compensation_range is not None:
            pulumi.set(__self__, "annualized_total_compensation_range", annualized_total_compensation_range)
        if entries is not None:
            pulumi.set(__self__, "entries", entries)

    @property
    @pulumi.getter(name="annualizedBaseCompensationRange")
    def annualized_base_compensation_range(self) -> Optional[pulumi.Input['CompensationRangeArgs']]:
        """
        Annualized base compensation range. Computed as base compensation entry's CompensationEntry.compensation times CompensationEntry.expected_units_per_year. See CompensationEntry for explanation on compensation annualization.
        """
        return pulumi.get(self, "annualized_base_compensation_range")

    @annualized_base_compensation_range.setter
    def annualized_base_compensation_range(self, value: Optional[pulumi.Input['CompensationRangeArgs']]):
        pulumi.set(self, "annualized_base_compensation_range", value)

    @property
    @pulumi.getter(name="annualizedTotalCompensationRange")
    def annualized_total_compensation_range(self) -> Optional[pulumi.Input['CompensationRangeArgs']]:
        """
        Annualized total compensation range. Computed as all compensation entries' CompensationEntry.compensation times CompensationEntry.expected_units_per_year. See CompensationEntry for explanation on compensation annualization.
        """
        return pulumi.get(self, "annualized_total_compensation_range")

    @annualized_total_compensation_range.setter
    def annualized_total_compensation_range(self, value: Optional[pulumi.Input['CompensationRangeArgs']]):
        pulumi.set(self, "annualized_total_compensation_range", value)

    @property
    @pulumi.getter
    def entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CompensationEntryArgs']]]]:
        """
        Optional. Job compensation information. At most one entry can be of type CompensationInfo.CompensationType.BASE, which is referred as ** base compensation entry ** for the job.
        """
        return pulumi.get(self, "entries")

    @entries.setter
    def entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CompensationEntryArgs']]]]):
        pulumi.set(self, "entries", value)


@pulumi.input_type
class CompensationRangeArgs:
    def __init__(__self__, *,
                 max_compensation: Optional[pulumi.Input['MoneyArgs']] = None,
                 min_compensation: Optional[pulumi.Input['MoneyArgs']] = None):
        """
        Compensation range.
        :param pulumi.Input['MoneyArgs'] max_compensation: Optional. The maximum amount of compensation. If left empty, the value is set to a maximal compensation value and the currency code is set to match the currency code of min_compensation.
        :param pulumi.Input['MoneyArgs'] min_compensation: Optional. The minimum amount of compensation. If left empty, the value is set to zero and the currency code is set to match the currency code of max_compensation.
        """
        if max_compensation is not None:
            pulumi.set(__self__, "max_compensation", max_compensation)
        if min_compensation is not None:
            pulumi.set(__self__, "min_compensation", min_compensation)

    @property
    @pulumi.getter(name="maxCompensation")
    def max_compensation(self) -> Optional[pulumi.Input['MoneyArgs']]:
        """
        Optional. The maximum amount of compensation. If left empty, the value is set to a maximal compensation value and the currency code is set to match the currency code of min_compensation.
        """
        return pulumi.get(self, "max_compensation")

    @max_compensation.setter
    def max_compensation(self, value: Optional[pulumi.Input['MoneyArgs']]):
        pulumi.set(self, "max_compensation", value)

    @property
    @pulumi.getter(name="minCompensation")
    def min_compensation(self) -> Optional[pulumi.Input['MoneyArgs']]:
        """
        Optional. The minimum amount of compensation. If left empty, the value is set to zero and the currency code is set to match the currency code of max_compensation.
        """
        return pulumi.get(self, "min_compensation")

    @min_compensation.setter
    def min_compensation(self, value: Optional[pulumi.Input['MoneyArgs']]):
        pulumi.set(self, "min_compensation", value)


@pulumi.input_type
class JobArgs:
    def __init__(__self__, *,
                 addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 application_info: Optional[pulumi.Input['ApplicationInfoArgs']] = None,
                 company_display_name: Optional[pulumi.Input[str]] = None,
                 company_name: Optional[pulumi.Input[str]] = None,
                 compensation_info: Optional[pulumi.Input['CompensationInfoArgs']] = None,
                 custom_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 degree_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 department: Optional[pulumi.Input[str]] = None,
                 derived_info: Optional[pulumi.Input['JobDerivedInfoArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 employment_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 incentives: Optional[pulumi.Input[str]] = None,
                 job_benefits: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 job_end_time: Optional[pulumi.Input[str]] = None,
                 job_level: Optional[pulumi.Input[str]] = None,
                 job_start_time: Optional[pulumi.Input[str]] = None,
                 language_code: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 posting_create_time: Optional[pulumi.Input[str]] = None,
                 posting_expire_time: Optional[pulumi.Input[str]] = None,
                 posting_publish_time: Optional[pulumi.Input[str]] = None,
                 posting_region: Optional[pulumi.Input[str]] = None,
                 posting_update_time: Optional[pulumi.Input[str]] = None,
                 processing_options: Optional[pulumi.Input['ProcessingOptionsArgs']] = None,
                 promotion_value: Optional[pulumi.Input[int]] = None,
                 qualifications: Optional[pulumi.Input[str]] = None,
                 requisition_id: Optional[pulumi.Input[str]] = None,
                 responsibilities: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        A Job resource represents a job posting (also referred to as a "job listing" or "job requisition"). A job belongs to a Company, which is the hiring entity responsible for the job.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] addresses: Optional but strongly recommended for the best service experience. Location(s) where the employer is looking to hire for this job posting. Specifying the full street address(es) of the hiring location enables better API results, especially job searches by commute time. At most 50 locations are allowed for best search performance. If a job has more locations, it is suggested to split it into multiple jobs with unique requisition_ids (e.g. 'ReqA' becomes 'ReqA-1', 'ReqA-2', etc.) as multiple jobs with the same company_name, language_code and requisition_id are not allowed. If the original requisition_id must be preserved, a custom field should be used for storage. It is also suggested to group the locations that close to each other in the same job for better search experience. The maximum number of allowed characters is 500.
        :param pulumi.Input['ApplicationInfoArgs'] application_info: Required. At least one field within ApplicationInfo must be specified. Job application information.
        :param pulumi.Input[str] company_display_name: Display name of the company listing the job.
        :param pulumi.Input[str] company_name: Required. The resource name of the company listing the job, such as "projects/api-test-project/companies/foo".
        :param pulumi.Input['CompensationInfoArgs'] compensation_info: Optional. Job compensation information.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] custom_attributes: Optional. A map of fields to hold both filterable and non-filterable custom job attributes that are not covered by the provided structured fields. The keys of the map are strings up to 64 bytes and must match the pattern: a-zA-Z*. For example, key0LikeThis or KEY_1_LIKE_THIS. At most 100 filterable and at most 100 unfilterable keys are supported. For filterable `string_values`, across all keys at most 200 values are allowed, with each string no more than 255 characters. For unfilterable `string_values`, the maximum total size of `string_values` across all keys is 50KB.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] degree_types: Optional. The desired education degrees for the job, such as Bachelors, Masters.
        :param pulumi.Input[str] department: Optional. The department or functional area within the company with the open position. The maximum number of allowed characters is 255.
        :param pulumi.Input['JobDerivedInfoArgs'] derived_info: Derived details about the job posting.
        :param pulumi.Input[str] description: Required. The description of the job, which typically includes a multi-paragraph description of the company and related information. Separate fields are provided on the job object for responsibilities, qualifications, and other job characteristics. Use of these separate job fields is recommended. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 100,000.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] employment_types: Optional. The employment type(s) of a job, for example, full time or part time.
        :param pulumi.Input[str] incentives: Optional. A description of bonus, commission, and other compensation incentives associated with the job not including salary or pay. The maximum number of allowed characters is 10,000.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] job_benefits: Optional. The benefits included with the job.
        :param pulumi.Input[str] job_end_time: Optional. The end timestamp of the job. Typically this field is used for contracting engagements. Invalid timestamps are ignored.
        :param pulumi.Input[str] job_level: Optional. The experience level associated with the job, such as "Entry Level".
        :param pulumi.Input[str] job_start_time: Optional. The start timestamp of the job in UTC time zone. Typically this field is used for contracting engagements. Invalid timestamps are ignored.
        :param pulumi.Input[str] language_code: Optional. The language of the posting. This field is distinct from any requirements for fluency that are associated with the job. Language codes must be in BCP-47 format, such as "en-US" or "sr-Latn". For more information, see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47){: class="external" target="_blank" }. If this field is unspecified and Job.description is present, detected language code based on Job.description is assigned, otherwise defaults to 'en_US'.
        :param pulumi.Input[str] name: Required during job update. The resource name for the job. This is generated by the service when a job is created. The format is "projects/{project_id}/jobs/{job_id}", for example, "projects/api-test-project/jobs/1234". Use of this field in job queries and API calls is preferred over the use of requisition_id since this value is unique.
        :param pulumi.Input[str] posting_create_time: The timestamp when this job posting was created.
        :param pulumi.Input[str] posting_expire_time: Optional but strongly recommended for the best service experience. The expiration timestamp of the job. After this timestamp, the job is marked as expired, and it no longer appears in search results. The expired job can't be deleted or listed by the DeleteJob and ListJobs APIs, but it can be retrieved with the GetJob API or updated with the UpdateJob API. An expired job can be updated and opened again by using a future expiration timestamp. Updating an expired job fails if there is another existing open job with same company_name, language_code and requisition_id. The expired jobs are retained in our system for 90 days. However, the overall expired job count cannot exceed 3 times the maximum of open jobs count over the past week, otherwise jobs with earlier expire time are cleaned first. Expired jobs are no longer accessible after they are cleaned out. Invalid timestamps are ignored, and treated as expire time not provided. Timestamp before the instant request is made is considered valid, the job will be treated as expired immediately. If this value is not provided at the time of job creation or is invalid, the job posting expires after 30 days from the job's creation time. For example, if the job was created on 2017/01/01 13:00AM UTC with an unspecified expiration date, the job expires after 2017/01/31 13:00AM UTC. If this value is not provided on job update, it depends on the field masks set by UpdateJobRequest.update_mask. If the field masks include expiry_time, or the masks are empty meaning that every field is updated, the job posting expires after 30 days from the job's last update time. Otherwise the expiration date isn't updated.
        :param pulumi.Input[str] posting_publish_time: Optional. The timestamp this job posting was most recently published. The default value is the time the request arrives at the server. Invalid timestamps are ignored.
        :param pulumi.Input[str] posting_region: Optional. The job PostingRegion (for example, state, country) throughout which the job is available. If this field is set, a LocationFilter in a search query within the job region finds this job posting if an exact location match isn't specified. If this field is set to PostingRegion.NATION or PostingRegion.ADMINISTRATIVE_AREA, setting job Job.addresses to the same location level as this field is strongly recommended.
        :param pulumi.Input[str] posting_update_time: The timestamp when this job posting was last updated.
        :param pulumi.Input['ProcessingOptionsArgs'] processing_options: Optional. Options for job processing.
        :param pulumi.Input[int] promotion_value: Optional. A promotion value of the job, as determined by the client. The value determines the sort order of the jobs returned when searching for jobs using the featured jobs search call, with higher promotional values being returned first and ties being resolved by relevance sort. Only the jobs with a promotionValue >0 are returned in a FEATURED_JOB_SEARCH. Default value is 0, and negative values are treated as 0.
        :param pulumi.Input[str] qualifications: Optional. A description of the qualifications required to perform the job. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000.
        :param pulumi.Input[str] requisition_id: Required. The requisition ID, also referred to as the posting ID, assigned by the client to identify a job. This field is intended to be used by clients for client identification and tracking of postings. A job is not allowed to be created if there is another job with the same [company_name], language_code and requisition_id. The maximum number of allowed characters is 255.
        :param pulumi.Input[str] responsibilities: Optional. A description of job responsibilities. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000.
        :param pulumi.Input[str] title: Required. The title of the job, such as "Software Engineer" The maximum number of allowed characters is 500.
        """
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if application_info is not None:
            pulumi.set(__self__, "application_info", application_info)
        if company_display_name is not None:
            pulumi.set(__self__, "company_display_name", company_display_name)
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if compensation_info is not None:
            pulumi.set(__self__, "compensation_info", compensation_info)
        if custom_attributes is not None:
            pulumi.set(__self__, "custom_attributes", custom_attributes)
        if degree_types is not None:
            pulumi.set(__self__, "degree_types", degree_types)
        if department is not None:
            pulumi.set(__self__, "department", department)
        if derived_info is not None:
            pulumi.set(__self__, "derived_info", derived_info)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if employment_types is not None:
            pulumi.set(__self__, "employment_types", employment_types)
        if incentives is not None:
            pulumi.set(__self__, "incentives", incentives)
        if job_benefits is not None:
            pulumi.set(__self__, "job_benefits", job_benefits)
        if job_end_time is not None:
            pulumi.set(__self__, "job_end_time", job_end_time)
        if job_level is not None:
            pulumi.set(__self__, "job_level", job_level)
        if job_start_time is not None:
            pulumi.set(__self__, "job_start_time", job_start_time)
        if language_code is not None:
            pulumi.set(__self__, "language_code", language_code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if posting_create_time is not None:
            pulumi.set(__self__, "posting_create_time", posting_create_time)
        if posting_expire_time is not None:
            pulumi.set(__self__, "posting_expire_time", posting_expire_time)
        if posting_publish_time is not None:
            pulumi.set(__self__, "posting_publish_time", posting_publish_time)
        if posting_region is not None:
            pulumi.set(__self__, "posting_region", posting_region)
        if posting_update_time is not None:
            pulumi.set(__self__, "posting_update_time", posting_update_time)
        if processing_options is not None:
            pulumi.set(__self__, "processing_options", processing_options)
        if promotion_value is not None:
            pulumi.set(__self__, "promotion_value", promotion_value)
        if qualifications is not None:
            pulumi.set(__self__, "qualifications", qualifications)
        if requisition_id is not None:
            pulumi.set(__self__, "requisition_id", requisition_id)
        if responsibilities is not None:
            pulumi.set(__self__, "responsibilities", responsibilities)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional but strongly recommended for the best service experience. Location(s) where the employer is looking to hire for this job posting. Specifying the full street address(es) of the hiring location enables better API results, especially job searches by commute time. At most 50 locations are allowed for best search performance. If a job has more locations, it is suggested to split it into multiple jobs with unique requisition_ids (e.g. 'ReqA' becomes 'ReqA-1', 'ReqA-2', etc.) as multiple jobs with the same company_name, language_code and requisition_id are not allowed. If the original requisition_id must be preserved, a custom field should be used for storage. It is also suggested to group the locations that close to each other in the same job for better search experience. The maximum number of allowed characters is 500.
        """
        return pulumi.get(self, "addresses")

    @addresses.setter
    def addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "addresses", value)

    @property
    @pulumi.getter(name="applicationInfo")
    def application_info(self) -> Optional[pulumi.Input['ApplicationInfoArgs']]:
        """
        Required. At least one field within ApplicationInfo must be specified. Job application information.
        """
        return pulumi.get(self, "application_info")

    @application_info.setter
    def application_info(self, value: Optional[pulumi.Input['ApplicationInfoArgs']]):
        pulumi.set(self, "application_info", value)

    @property
    @pulumi.getter(name="companyDisplayName")
    def company_display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name of the company listing the job.
        """
        return pulumi.get(self, "company_display_name")

    @company_display_name.setter
    def company_display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "company_display_name", value)

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[pulumi.Input[str]]:
        """
        Required. The resource name of the company listing the job, such as "projects/api-test-project/companies/foo".
        """
        return pulumi.get(self, "company_name")

    @company_name.setter
    def company_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "company_name", value)

    @property
    @pulumi.getter(name="compensationInfo")
    def compensation_info(self) -> Optional[pulumi.Input['CompensationInfoArgs']]:
        """
        Optional. Job compensation information.
        """
        return pulumi.get(self, "compensation_info")

    @compensation_info.setter
    def compensation_info(self, value: Optional[pulumi.Input['CompensationInfoArgs']]):
        pulumi.set(self, "compensation_info", value)

    @property
    @pulumi.getter(name="customAttributes")
    def custom_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional. A map of fields to hold both filterable and non-filterable custom job attributes that are not covered by the provided structured fields. The keys of the map are strings up to 64 bytes and must match the pattern: a-zA-Z*. For example, key0LikeThis or KEY_1_LIKE_THIS. At most 100 filterable and at most 100 unfilterable keys are supported. For filterable `string_values`, across all keys at most 200 values are allowed, with each string no more than 255 characters. For unfilterable `string_values`, the maximum total size of `string_values` across all keys is 50KB.
        """
        return pulumi.get(self, "custom_attributes")

    @custom_attributes.setter
    def custom_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "custom_attributes", value)

    @property
    @pulumi.getter(name="degreeTypes")
    def degree_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional. The desired education degrees for the job, such as Bachelors, Masters.
        """
        return pulumi.get(self, "degree_types")

    @degree_types.setter
    def degree_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "degree_types", value)

    @property
    @pulumi.getter
    def department(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The department or functional area within the company with the open position. The maximum number of allowed characters is 255.
        """
        return pulumi.get(self, "department")

    @department.setter
    def department(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "department", value)

    @property
    @pulumi.getter(name="derivedInfo")
    def derived_info(self) -> Optional[pulumi.Input['JobDerivedInfoArgs']]:
        """
        Derived details about the job posting.
        """
        return pulumi.get(self, "derived_info")

    @derived_info.setter
    def derived_info(self, value: Optional[pulumi.Input['JobDerivedInfoArgs']]):
        pulumi.set(self, "derived_info", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Required. The description of the job, which typically includes a multi-paragraph description of the company and related information. Separate fields are provided on the job object for responsibilities, qualifications, and other job characteristics. Use of these separate job fields is recommended. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 100,000.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="employmentTypes")
    def employment_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional. The employment type(s) of a job, for example, full time or part time.
        """
        return pulumi.get(self, "employment_types")

    @employment_types.setter
    def employment_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "employment_types", value)

    @property
    @pulumi.getter
    def incentives(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. A description of bonus, commission, and other compensation incentives associated with the job not including salary or pay. The maximum number of allowed characters is 10,000.
        """
        return pulumi.get(self, "incentives")

    @incentives.setter
    def incentives(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incentives", value)

    @property
    @pulumi.getter(name="jobBenefits")
    def job_benefits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional. The benefits included with the job.
        """
        return pulumi.get(self, "job_benefits")

    @job_benefits.setter
    def job_benefits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "job_benefits", value)

    @property
    @pulumi.getter(name="jobEndTime")
    def job_end_time(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The end timestamp of the job. Typically this field is used for contracting engagements. Invalid timestamps are ignored.
        """
        return pulumi.get(self, "job_end_time")

    @job_end_time.setter
    def job_end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "job_end_time", value)

    @property
    @pulumi.getter(name="jobLevel")
    def job_level(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The experience level associated with the job, such as "Entry Level".
        """
        return pulumi.get(self, "job_level")

    @job_level.setter
    def job_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "job_level", value)

    @property
    @pulumi.getter(name="jobStartTime")
    def job_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The start timestamp of the job in UTC time zone. Typically this field is used for contracting engagements. Invalid timestamps are ignored.
        """
        return pulumi.get(self, "job_start_time")

    @job_start_time.setter
    def job_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "job_start_time", value)

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The language of the posting. This field is distinct from any requirements for fluency that are associated with the job. Language codes must be in BCP-47 format, such as "en-US" or "sr-Latn". For more information, see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47){: class="external" target="_blank" }. If this field is unspecified and Job.description is present, detected language code based on Job.description is assigned, otherwise defaults to 'en_US'.
        """
        return pulumi.get(self, "language_code")

    @language_code.setter
    def language_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language_code", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Required during job update. The resource name for the job. This is generated by the service when a job is created. The format is "projects/{project_id}/jobs/{job_id}", for example, "projects/api-test-project/jobs/1234". Use of this field in job queries and API calls is preferred over the use of requisition_id since this value is unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="postingCreateTime")
    def posting_create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The timestamp when this job posting was created.
        """
        return pulumi.get(self, "posting_create_time")

    @posting_create_time.setter
    def posting_create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "posting_create_time", value)

    @property
    @pulumi.getter(name="postingExpireTime")
    def posting_expire_time(self) -> Optional[pulumi.Input[str]]:
        """
        Optional but strongly recommended for the best service experience. The expiration timestamp of the job. After this timestamp, the job is marked as expired, and it no longer appears in search results. The expired job can't be deleted or listed by the DeleteJob and ListJobs APIs, but it can be retrieved with the GetJob API or updated with the UpdateJob API. An expired job can be updated and opened again by using a future expiration timestamp. Updating an expired job fails if there is another existing open job with same company_name, language_code and requisition_id. The expired jobs are retained in our system for 90 days. However, the overall expired job count cannot exceed 3 times the maximum of open jobs count over the past week, otherwise jobs with earlier expire time are cleaned first. Expired jobs are no longer accessible after they are cleaned out. Invalid timestamps are ignored, and treated as expire time not provided. Timestamp before the instant request is made is considered valid, the job will be treated as expired immediately. If this value is not provided at the time of job creation or is invalid, the job posting expires after 30 days from the job's creation time. For example, if the job was created on 2017/01/01 13:00AM UTC with an unspecified expiration date, the job expires after 2017/01/31 13:00AM UTC. If this value is not provided on job update, it depends on the field masks set by UpdateJobRequest.update_mask. If the field masks include expiry_time, or the masks are empty meaning that every field is updated, the job posting expires after 30 days from the job's last update time. Otherwise the expiration date isn't updated.
        """
        return pulumi.get(self, "posting_expire_time")

    @posting_expire_time.setter
    def posting_expire_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "posting_expire_time", value)

    @property
    @pulumi.getter(name="postingPublishTime")
    def posting_publish_time(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The timestamp this job posting was most recently published. The default value is the time the request arrives at the server. Invalid timestamps are ignored.
        """
        return pulumi.get(self, "posting_publish_time")

    @posting_publish_time.setter
    def posting_publish_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "posting_publish_time", value)

    @property
    @pulumi.getter(name="postingRegion")
    def posting_region(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The job PostingRegion (for example, state, country) throughout which the job is available. If this field is set, a LocationFilter in a search query within the job region finds this job posting if an exact location match isn't specified. If this field is set to PostingRegion.NATION or PostingRegion.ADMINISTRATIVE_AREA, setting job Job.addresses to the same location level as this field is strongly recommended.
        """
        return pulumi.get(self, "posting_region")

    @posting_region.setter
    def posting_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "posting_region", value)

    @property
    @pulumi.getter(name="postingUpdateTime")
    def posting_update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The timestamp when this job posting was last updated.
        """
        return pulumi.get(self, "posting_update_time")

    @posting_update_time.setter
    def posting_update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "posting_update_time", value)

    @property
    @pulumi.getter(name="processingOptions")
    def processing_options(self) -> Optional[pulumi.Input['ProcessingOptionsArgs']]:
        """
        Optional. Options for job processing.
        """
        return pulumi.get(self, "processing_options")

    @processing_options.setter
    def processing_options(self, value: Optional[pulumi.Input['ProcessingOptionsArgs']]):
        pulumi.set(self, "processing_options", value)

    @property
    @pulumi.getter(name="promotionValue")
    def promotion_value(self) -> Optional[pulumi.Input[int]]:
        """
        Optional. A promotion value of the job, as determined by the client. The value determines the sort order of the jobs returned when searching for jobs using the featured jobs search call, with higher promotional values being returned first and ties being resolved by relevance sort. Only the jobs with a promotionValue >0 are returned in a FEATURED_JOB_SEARCH. Default value is 0, and negative values are treated as 0.
        """
        return pulumi.get(self, "promotion_value")

    @promotion_value.setter
    def promotion_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "promotion_value", value)

    @property
    @pulumi.getter
    def qualifications(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. A description of the qualifications required to perform the job. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000.
        """
        return pulumi.get(self, "qualifications")

    @qualifications.setter
    def qualifications(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qualifications", value)

    @property
    @pulumi.getter(name="requisitionId")
    def requisition_id(self) -> Optional[pulumi.Input[str]]:
        """
        Required. The requisition ID, also referred to as the posting ID, assigned by the client to identify a job. This field is intended to be used by clients for client identification and tracking of postings. A job is not allowed to be created if there is another job with the same [company_name], language_code and requisition_id. The maximum number of allowed characters is 255.
        """
        return pulumi.get(self, "requisition_id")

    @requisition_id.setter
    def requisition_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requisition_id", value)

    @property
    @pulumi.getter
    def responsibilities(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. A description of job responsibilities. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000.
        """
        return pulumi.get(self, "responsibilities")

    @responsibilities.setter
    def responsibilities(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "responsibilities", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Required. The title of the job, such as "Software Engineer" The maximum number of allowed characters is 500.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class JobDerivedInfoArgs:
    def __init__(__self__, *,
                 job_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input['LocationArgs']]]] = None):
        """
        Output only. Derived details about the job posting.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] job_categories: Job categories derived from Job.title and Job.description.
        :param pulumi.Input[Sequence[pulumi.Input['LocationArgs']]] locations: Structured locations of the job, resolved from Job.addresses. locations are exactly matched to Job.addresses in the same order.
        """
        if job_categories is not None:
            pulumi.set(__self__, "job_categories", job_categories)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)

    @property
    @pulumi.getter(name="jobCategories")
    def job_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Job categories derived from Job.title and Job.description.
        """
        return pulumi.get(self, "job_categories")

    @job_categories.setter
    def job_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "job_categories", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LocationArgs']]]]:
        """
        Structured locations of the job, resolved from Job.addresses. locations are exactly matched to Job.addresses in the same order.
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LocationArgs']]]]):
        pulumi.set(self, "locations", value)


@pulumi.input_type
class JobEventArgs:
    def __init__(__self__, *,
                 jobs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        An event issued when a job seeker interacts with the application that implements Cloud Talent Solution.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] jobs: Required. The job name(s) associated with this event. For example, if this is an impression event, this field contains the identifiers of all jobs shown to the job seeker. If this was a view event, this field contains the identifier of the viewed job.
        :param pulumi.Input[str] type: Required. The type of the event (see JobEventType).
        """
        if jobs is not None:
            pulumi.set(__self__, "jobs", jobs)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def jobs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Required. The job name(s) associated with this event. For example, if this is an impression event, this field contains the identifiers of all jobs shown to the job seeker. If this was a view event, this field contains the identifier of the viewed job.
        """
        return pulumi.get(self, "jobs")

    @jobs.setter
    def jobs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "jobs", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Required. The type of the event (see JobEventType).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class LatLngArgs:
    def __init__(__self__, *,
                 latitude: Optional[pulumi.Input[float]] = None,
                 longitude: Optional[pulumi.Input[float]] = None):
        """
        An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this must conform to the WGS84 standard. Values must be within normalized ranges.
        :param pulumi.Input[float] latitude: The latitude in degrees. It must be in the range [-90.0, +90.0].
        :param pulumi.Input[float] longitude: The longitude in degrees. It must be in the range [-180.0, +180.0].
        """
        if latitude is not None:
            pulumi.set(__self__, "latitude", latitude)
        if longitude is not None:
            pulumi.set(__self__, "longitude", longitude)

    @property
    @pulumi.getter
    def latitude(self) -> Optional[pulumi.Input[float]]:
        """
        The latitude in degrees. It must be in the range [-90.0, +90.0].
        """
        return pulumi.get(self, "latitude")

    @latitude.setter
    def latitude(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "latitude", value)

    @property
    @pulumi.getter
    def longitude(self) -> Optional[pulumi.Input[float]]:
        """
        The longitude in degrees. It must be in the range [-180.0, +180.0].
        """
        return pulumi.get(self, "longitude")

    @longitude.setter
    def longitude(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "longitude", value)


@pulumi.input_type
class LocationArgs:
    def __init__(__self__, *,
                 lat_lng: Optional[pulumi.Input['LatLngArgs']] = None,
                 location_type: Optional[pulumi.Input[str]] = None,
                 postal_address: Optional[pulumi.Input['PostalAddressArgs']] = None,
                 radius_in_miles: Optional[pulumi.Input[float]] = None):
        """
        Output only. A resource that represents a location with full geographic information.
        :param pulumi.Input['LatLngArgs'] lat_lng: An object representing a latitude/longitude pair.
        :param pulumi.Input[str] location_type: The type of a location, which corresponds to the address lines field of PostalAddress. For example, "Downtown, Atlanta, GA, USA" has a type of LocationType#NEIGHBORHOOD, and "Kansas City, KS, USA" has a type of LocationType#LOCALITY.
        :param pulumi.Input['PostalAddressArgs'] postal_address: Postal address of the location that includes human readable information, such as postal delivery and payments addresses. Given a postal address, a postal service can deliver items to a premises, P.O. Box, or other delivery location.
        :param pulumi.Input[float] radius_in_miles: Radius in miles of the job location. This value is derived from the location bounding box in which a circle with the specified radius centered from LatLng covers the area associated with the job location. For example, currently, "Mountain View, CA, USA" has a radius of 6.17 miles.
        """
        if lat_lng is not None:
            pulumi.set(__self__, "lat_lng", lat_lng)
        if location_type is not None:
            pulumi.set(__self__, "location_type", location_type)
        if postal_address is not None:
            pulumi.set(__self__, "postal_address", postal_address)
        if radius_in_miles is not None:
            pulumi.set(__self__, "radius_in_miles", radius_in_miles)

    @property
    @pulumi.getter(name="latLng")
    def lat_lng(self) -> Optional[pulumi.Input['LatLngArgs']]:
        """
        An object representing a latitude/longitude pair.
        """
        return pulumi.get(self, "lat_lng")

    @lat_lng.setter
    def lat_lng(self, value: Optional[pulumi.Input['LatLngArgs']]):
        pulumi.set(self, "lat_lng", value)

    @property
    @pulumi.getter(name="locationType")
    def location_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of a location, which corresponds to the address lines field of PostalAddress. For example, "Downtown, Atlanta, GA, USA" has a type of LocationType#NEIGHBORHOOD, and "Kansas City, KS, USA" has a type of LocationType#LOCALITY.
        """
        return pulumi.get(self, "location_type")

    @location_type.setter
    def location_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location_type", value)

    @property
    @pulumi.getter(name="postalAddress")
    def postal_address(self) -> Optional[pulumi.Input['PostalAddressArgs']]:
        """
        Postal address of the location that includes human readable information, such as postal delivery and payments addresses. Given a postal address, a postal service can deliver items to a premises, P.O. Box, or other delivery location.
        """
        return pulumi.get(self, "postal_address")

    @postal_address.setter
    def postal_address(self, value: Optional[pulumi.Input['PostalAddressArgs']]):
        pulumi.set(self, "postal_address", value)

    @property
    @pulumi.getter(name="radiusInMiles")
    def radius_in_miles(self) -> Optional[pulumi.Input[float]]:
        """
        Radius in miles of the job location. This value is derived from the location bounding box in which a circle with the specified radius centered from LatLng covers the area associated with the job location. For example, currently, "Mountain View, CA, USA" has a radius of 6.17 miles.
        """
        return pulumi.get(self, "radius_in_miles")

    @radius_in_miles.setter
    def radius_in_miles(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "radius_in_miles", value)


@pulumi.input_type
class MoneyArgs:
    def __init__(__self__, *,
                 currency_code: Optional[pulumi.Input[str]] = None,
                 nanos: Optional[pulumi.Input[int]] = None,
                 units: Optional[pulumi.Input[str]] = None):
        """
        Represents an amount of money with its currency type.
        :param pulumi.Input[str] currency_code: The three-letter currency code defined in ISO 4217.
        :param pulumi.Input[int] nanos: Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
        :param pulumi.Input[str] units: The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
        """
        if currency_code is not None:
            pulumi.set(__self__, "currency_code", currency_code)
        if nanos is not None:
            pulumi.set(__self__, "nanos", nanos)
        if units is not None:
            pulumi.set(__self__, "units", units)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> Optional[pulumi.Input[str]]:
        """
        The three-letter currency code defined in ISO 4217.
        """
        return pulumi.get(self, "currency_code")

    @currency_code.setter
    def currency_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "currency_code", value)

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[int]]:
        """
        Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
        """
        return pulumi.get(self, "nanos")

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nanos", value)

    @property
    @pulumi.getter
    def units(self) -> Optional[pulumi.Input[str]]:
        """
        The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
        """
        return pulumi.get(self, "units")

    @units.setter
    def units(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "units", value)


@pulumi.input_type
class PostalAddressArgs:
    def __init__(__self__, *,
                 address_lines: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 administrative_area: Optional[pulumi.Input[str]] = None,
                 language_code: Optional[pulumi.Input[str]] = None,
                 locality: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 postal_code: Optional[pulumi.Input[str]] = None,
                 recipients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 region_code: Optional[pulumi.Input[str]] = None,
                 revision: Optional[pulumi.Input[int]] = None,
                 sorting_code: Optional[pulumi.Input[str]] = None,
                 sublocality: Optional[pulumi.Input[str]] = None):
        """
        Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an i18n-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
        :param pulumi.Input[Sequence[pulumi.Input[str]]] address_lines: Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
        :param pulumi.Input[str] administrative_area: Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
        :param pulumi.Input[str] language_code: Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: "zh-Hant", "ja", "ja-Latn", "en".
        :param pulumi.Input[str] locality: Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
        :param pulumi.Input[str] organization: Optional. The name of the organization at the address.
        :param pulumi.Input[str] postal_code: Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] recipients: Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.
        :param pulumi.Input[str] region_code: Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
        :param pulumi.Input[int] revision: The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions.
        :param pulumi.Input[str] sorting_code: Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. Côte d'Ivoire).
        :param pulumi.Input[str] sublocality: Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
        """
        if address_lines is not None:
            pulumi.set(__self__, "address_lines", address_lines)
        if administrative_area is not None:
            pulumi.set(__self__, "administrative_area", administrative_area)
        if language_code is not None:
            pulumi.set(__self__, "language_code", language_code)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if recipients is not None:
            pulumi.set(__self__, "recipients", recipients)
        if region_code is not None:
            pulumi.set(__self__, "region_code", region_code)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if sorting_code is not None:
            pulumi.set(__self__, "sorting_code", sorting_code)
        if sublocality is not None:
            pulumi.set(__self__, "sublocality", sublocality)

    @property
    @pulumi.getter(name="addressLines")
    def address_lines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
        """
        return pulumi.get(self, "address_lines")

    @address_lines.setter
    def address_lines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "address_lines", value)

    @property
    @pulumi.getter(name="administrativeArea")
    def administrative_area(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
        """
        return pulumi.get(self, "administrative_area")

    @administrative_area.setter
    def administrative_area(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "administrative_area", value)

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: "zh-Hant", "ja", "ja-Latn", "en".
        """
        return pulumi.get(self, "language_code")

    @language_code.setter
    def language_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language_code", value)

    @property
    @pulumi.getter
    def locality(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
        """
        return pulumi.get(self, "locality")

    @locality.setter
    def locality(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locality", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The name of the organization at the address.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
        """
        return pulumi.get(self, "postal_code")

    @postal_code.setter
    def postal_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "postal_code", value)

    @property
    @pulumi.getter
    def recipients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.
        """
        return pulumi.get(self, "recipients")

    @recipients.setter
    def recipients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "recipients", value)

    @property
    @pulumi.getter(name="regionCode")
    def region_code(self) -> Optional[pulumi.Input[str]]:
        """
        Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
        """
        return pulumi.get(self, "region_code")

    @region_code.setter
    def region_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region_code", value)

    @property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[int]]:
        """
        The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions.
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "revision", value)

    @property
    @pulumi.getter(name="sortingCode")
    def sorting_code(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. Côte d'Ivoire).
        """
        return pulumi.get(self, "sorting_code")

    @sorting_code.setter
    def sorting_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sorting_code", value)

    @property
    @pulumi.getter
    def sublocality(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
        """
        return pulumi.get(self, "sublocality")

    @sublocality.setter
    def sublocality(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sublocality", value)


@pulumi.input_type
class ProcessingOptionsArgs:
    def __init__(__self__, *,
                 disable_street_address_resolution: Optional[pulumi.Input[bool]] = None,
                 html_sanitization: Optional[pulumi.Input[str]] = None):
        """
        Input only. Options for job processing.
        :param pulumi.Input[bool] disable_street_address_resolution: Optional. If set to `true`, the service does not attempt to resolve a more precise address for the job.
        :param pulumi.Input[str] html_sanitization: Optional. Option for job HTML content sanitization. Applied fields are: * description * applicationInfo.instruction * incentives * qualifications * responsibilities HTML tags in these fields may be stripped if sanitiazation is not disabled. Defaults to HtmlSanitization.SIMPLE_FORMATTING_ONLY.
        """
        if disable_street_address_resolution is not None:
            pulumi.set(__self__, "disable_street_address_resolution", disable_street_address_resolution)
        if html_sanitization is not None:
            pulumi.set(__self__, "html_sanitization", html_sanitization)

    @property
    @pulumi.getter(name="disableStreetAddressResolution")
    def disable_street_address_resolution(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional. If set to `true`, the service does not attempt to resolve a more precise address for the job.
        """
        return pulumi.get(self, "disable_street_address_resolution")

    @disable_street_address_resolution.setter
    def disable_street_address_resolution(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_street_address_resolution", value)

    @property
    @pulumi.getter(name="htmlSanitization")
    def html_sanitization(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Option for job HTML content sanitization. Applied fields are: * description * applicationInfo.instruction * incentives * qualifications * responsibilities HTML tags in these fields may be stripped if sanitiazation is not disabled. Defaults to HtmlSanitization.SIMPLE_FORMATTING_ONLY.
        """
        return pulumi.get(self, "html_sanitization")

    @html_sanitization.setter
    def html_sanitization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "html_sanitization", value)


