# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'InstanceMessageArgs',
    'MemcacheParametersArgs',
    'NodeArgs',
    'NodeConfigArgs',
]

@pulumi.input_type
class InstanceMessageArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] code: A code that correspond to one type of user-facing message.
        :param pulumi.Input[str] message: Message on memcached instance which will be exposed to users.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[str]]:
        """
        A code that correspond to one type of user-facing message.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message on memcached instance which will be exposed to users.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)


@pulumi.input_type
class MemcacheParametersArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 params: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The unique ID associated with this set of parameters. Users can use this id to determine if the parameters associated with the instance differ from the parameters associated with the nodes. A discrepancy between parameter ids can inform users that they may need to take action to apply parameters on nodes.
        :param pulumi.Input[str] id: Output only.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] params: User defined set of parameters to use in the memcached process.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if params is not None:
            pulumi.set(__self__, "params", params)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Output only.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def params(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        User defined set of parameters to use in the memcached process.
        """
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "params", value)


@pulumi.input_type
class NodeArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 node_id: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input['MemcacheParametersArgs']] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 update_available: Optional[pulumi.Input[bool]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: Output only. Hostname or IP address of the Memcached node used by the clients to connect to the Memcached server on this node.
        :param pulumi.Input[str] node_id: Output only. Identifier of the Memcached node. The node id does not include project or location like the Memcached instance name.
        :param pulumi.Input['MemcacheParametersArgs'] parameters: User defined parameters currently applied to the node.
        :param pulumi.Input[int] port: Output only. The port number of the Memcached server on this node.
        :param pulumi.Input[str] state: Output only. Current state of the Memcached node.
        :param pulumi.Input[bool] update_available: Output only. Returns true if there is an update waiting to be applied
        :param pulumi.Input[str] zone: Output only. Location (GCP Zone) for the Memcached node.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if node_id is not None:
            pulumi.set(__self__, "node_id", node_id)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if update_available is not None:
            pulumi.set(__self__, "update_available", update_available)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Hostname or IP address of the Memcached node used by the clients to connect to the Memcached server on this node.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Identifier of the Memcached node. The node id does not include project or location like the Memcached instance name.
        """
        return pulumi.get(self, "node_id")

    @node_id.setter
    def node_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_id", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input['MemcacheParametersArgs']]:
        """
        User defined parameters currently applied to the node.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input['MemcacheParametersArgs']]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Output only. The port number of the Memcached server on this node.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Current state of the Memcached node.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="updateAvailable")
    def update_available(self) -> Optional[pulumi.Input[bool]]:
        """
        Output only. Returns true if there is an update waiting to be applied
        """
        return pulumi.get(self, "update_available")

    @update_available.setter
    def update_available(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "update_available", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Location (GCP Zone) for the Memcached node.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class NodeConfigArgs:
    def __init__(__self__, *,
                 cpu_count: Optional[pulumi.Input[int]] = None,
                 memory_size_mb: Optional[pulumi.Input[int]] = None):
        """
        Configuration for a Memcached Node.
        :param pulumi.Input[int] cpu_count: Required. Number of cpus per Memcached node.
        :param pulumi.Input[int] memory_size_mb: Required. Memory size in MiB for each Memcached node.
        """
        if cpu_count is not None:
            pulumi.set(__self__, "cpu_count", cpu_count)
        if memory_size_mb is not None:
            pulumi.set(__self__, "memory_size_mb", memory_size_mb)

    @property
    @pulumi.getter(name="cpuCount")
    def cpu_count(self) -> Optional[pulumi.Input[int]]:
        """
        Required. Number of cpus per Memcached node.
        """
        return pulumi.get(self, "cpu_count")

    @cpu_count.setter
    def cpu_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_count", value)

    @property
    @pulumi.getter(name="memorySizeMb")
    def memory_size_mb(self) -> Optional[pulumi.Input[int]]:
        """
        Required. Memory size in MiB for each Memcached node.
        """
        return pulumi.get(self, "memory_size_mb")

    @memory_size_mb.setter
    def memory_size_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_size_mb", value)


