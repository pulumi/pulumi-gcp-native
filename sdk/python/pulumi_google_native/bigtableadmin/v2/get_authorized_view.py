# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetAuthorizedViewResult',
    'AwaitableGetAuthorizedViewResult',
    'get_authorized_view',
    'get_authorized_view_output',
]

@pulumi.output_type
class GetAuthorizedViewResult:
    def __init__(__self__, deletion_protection=None, etag=None, name=None, subset_view=None):
        if deletion_protection and not isinstance(deletion_protection, bool):
            raise TypeError("Expected argument 'deletion_protection' to be a bool")
        pulumi.set(__self__, "deletion_protection", deletion_protection)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if subset_view and not isinstance(subset_view, dict):
            raise TypeError("Expected argument 'subset_view' to be a dict")
        pulumi.set(__self__, "subset_view", subset_view)

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> bool:
        """
        Set to true to make the AuthorizedView protected against deletion. The parent Table and containing Instance cannot be deleted if an AuthorizedView has this bit set.
        """
        return pulumi.get(self, "deletion_protection")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        The etag for this AuthorizedView. If this is provided on update, it must match the server's etag. The server returns ABORTED error on a mismatched etag.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Identifier. The name of this AuthorizedView. Values are of the form `projects/{project}/instances/{instance}/tables/{table}/authorizedViews/{authorized_view}`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subsetView")
    def subset_view(self) -> 'outputs.GoogleBigtableAdminV2AuthorizedViewSubsetViewResponse':
        """
        An AuthorizedView permitting access to an explicit subset of a Table.
        """
        return pulumi.get(self, "subset_view")


class AwaitableGetAuthorizedViewResult(GetAuthorizedViewResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAuthorizedViewResult(
            deletion_protection=self.deletion_protection,
            etag=self.etag,
            name=self.name,
            subset_view=self.subset_view)


def get_authorized_view(authorized_view_id: Optional[str] = None,
                        instance_id: Optional[str] = None,
                        project: Optional[str] = None,
                        table_id: Optional[str] = None,
                        view: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAuthorizedViewResult:
    """
    Gets information from a specified AuthorizedView.
    """
    __args__ = dict()
    __args__['authorizedViewId'] = authorized_view_id
    __args__['instanceId'] = instance_id
    __args__['project'] = project
    __args__['tableId'] = table_id
    __args__['view'] = view
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:bigtableadmin/v2:getAuthorizedView', __args__, opts=opts, typ=GetAuthorizedViewResult).value

    return AwaitableGetAuthorizedViewResult(
        deletion_protection=pulumi.get(__ret__, 'deletion_protection'),
        etag=pulumi.get(__ret__, 'etag'),
        name=pulumi.get(__ret__, 'name'),
        subset_view=pulumi.get(__ret__, 'subset_view'))


@_utilities.lift_output_func(get_authorized_view)
def get_authorized_view_output(authorized_view_id: Optional[pulumi.Input[str]] = None,
                               instance_id: Optional[pulumi.Input[str]] = None,
                               project: Optional[pulumi.Input[Optional[str]]] = None,
                               table_id: Optional[pulumi.Input[str]] = None,
                               view: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAuthorizedViewResult]:
    """
    Gets information from a specified AuthorizedView.
    """
    ...
