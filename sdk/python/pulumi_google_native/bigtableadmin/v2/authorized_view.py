# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AuthorizedViewArgs', 'AuthorizedView']

@pulumi.input_type
class AuthorizedViewArgs:
    def __init__(__self__, *,
                 authorized_view_id: pulumi.Input[str],
                 instance_id: pulumi.Input[str],
                 table_id: pulumi.Input[str],
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 subset_view: Optional[pulumi.Input['GoogleBigtableAdminV2AuthorizedViewSubsetViewArgs']] = None):
        """
        The set of arguments for constructing a AuthorizedView resource.
        :param pulumi.Input[str] authorized_view_id: Required. The id of the AuthorizedView to create. This AuthorizedView must not already exist. The `authorized_view_id` appended to `parent` forms the full AuthorizedView name of the form `projects/{project}/instances/{instance}/tables/{table}/authorizedView/{authorized_view}`.
        :param pulumi.Input[bool] deletion_protection: Set to true to make the AuthorizedView protected against deletion. The parent Table and containing Instance cannot be deleted if an AuthorizedView has this bit set.
        :param pulumi.Input[str] etag: The etag for this AuthorizedView. If this is provided on update, it must match the server's etag. The server returns ABORTED error on a mismatched etag.
        :param pulumi.Input[str] name: Identifier. The name of this AuthorizedView. Values are of the form `projects/{project}/instances/{instance}/tables/{table}/authorizedViews/{authorized_view}`
        :param pulumi.Input['GoogleBigtableAdminV2AuthorizedViewSubsetViewArgs'] subset_view: An AuthorizedView permitting access to an explicit subset of a Table.
        """
        pulumi.set(__self__, "authorized_view_id", authorized_view_id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "table_id", table_id)
        if deletion_protection is not None:
            pulumi.set(__self__, "deletion_protection", deletion_protection)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if subset_view is not None:
            pulumi.set(__self__, "subset_view", subset_view)

    @property
    @pulumi.getter(name="authorizedViewId")
    def authorized_view_id(self) -> pulumi.Input[str]:
        """
        Required. The id of the AuthorizedView to create. This AuthorizedView must not already exist. The `authorized_view_id` appended to `parent` forms the full AuthorizedView name of the form `projects/{project}/instances/{instance}/tables/{table}/authorizedView/{authorized_view}`.
        """
        return pulumi.get(self, "authorized_view_id")

    @authorized_view_id.setter
    def authorized_view_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "authorized_view_id", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="tableId")
    def table_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table_id")

    @table_id.setter
    def table_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "table_id", value)

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to true to make the AuthorizedView protected against deletion. The parent Table and containing Instance cannot be deleted if an AuthorizedView has this bit set.
        """
        return pulumi.get(self, "deletion_protection")

    @deletion_protection.setter
    def deletion_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deletion_protection", value)

    @property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[str]]:
        """
        The etag for this AuthorizedView. If this is provided on update, it must match the server's etag. The server returns ABORTED error on a mismatched etag.
        """
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etag", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier. The name of this AuthorizedView. Values are of the form `projects/{project}/instances/{instance}/tables/{table}/authorizedViews/{authorized_view}`
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="subsetView")
    def subset_view(self) -> Optional[pulumi.Input['GoogleBigtableAdminV2AuthorizedViewSubsetViewArgs']]:
        """
        An AuthorizedView permitting access to an explicit subset of a Table.
        """
        return pulumi.get(self, "subset_view")

    @subset_view.setter
    def subset_view(self, value: Optional[pulumi.Input['GoogleBigtableAdminV2AuthorizedViewSubsetViewArgs']]):
        pulumi.set(self, "subset_view", value)


class AuthorizedView(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authorized_view_id: Optional[pulumi.Input[str]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 subset_view: Optional[pulumi.Input[pulumi.InputType['GoogleBigtableAdminV2AuthorizedViewSubsetViewArgs']]] = None,
                 table_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates a new AuthorizedView in a table.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] authorized_view_id: Required. The id of the AuthorizedView to create. This AuthorizedView must not already exist. The `authorized_view_id` appended to `parent` forms the full AuthorizedView name of the form `projects/{project}/instances/{instance}/tables/{table}/authorizedView/{authorized_view}`.
        :param pulumi.Input[bool] deletion_protection: Set to true to make the AuthorizedView protected against deletion. The parent Table and containing Instance cannot be deleted if an AuthorizedView has this bit set.
        :param pulumi.Input[str] etag: The etag for this AuthorizedView. If this is provided on update, it must match the server's etag. The server returns ABORTED error on a mismatched etag.
        :param pulumi.Input[str] name: Identifier. The name of this AuthorizedView. Values are of the form `projects/{project}/instances/{instance}/tables/{table}/authorizedViews/{authorized_view}`
        :param pulumi.Input[pulumi.InputType['GoogleBigtableAdminV2AuthorizedViewSubsetViewArgs']] subset_view: An AuthorizedView permitting access to an explicit subset of a Table.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AuthorizedViewArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a new AuthorizedView in a table.

        :param str resource_name: The name of the resource.
        :param AuthorizedViewArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AuthorizedViewArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authorized_view_id: Optional[pulumi.Input[str]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 subset_view: Optional[pulumi.Input[pulumi.InputType['GoogleBigtableAdminV2AuthorizedViewSubsetViewArgs']]] = None,
                 table_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AuthorizedViewArgs.__new__(AuthorizedViewArgs)

            if authorized_view_id is None and not opts.urn:
                raise TypeError("Missing required property 'authorized_view_id'")
            __props__.__dict__["authorized_view_id"] = authorized_view_id
            __props__.__dict__["deletion_protection"] = deletion_protection
            __props__.__dict__["etag"] = etag
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["name"] = name
            __props__.__dict__["project"] = project
            __props__.__dict__["subset_view"] = subset_view
            if table_id is None and not opts.urn:
                raise TypeError("Missing required property 'table_id'")
            __props__.__dict__["table_id"] = table_id
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["authorized_view_id", "instance_id", "project", "table_id"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(AuthorizedView, __self__).__init__(
            'google-native:bigtableadmin/v2:AuthorizedView',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'AuthorizedView':
        """
        Get an existing AuthorizedView resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = AuthorizedViewArgs.__new__(AuthorizedViewArgs)

        __props__.__dict__["authorized_view_id"] = None
        __props__.__dict__["deletion_protection"] = None
        __props__.__dict__["etag"] = None
        __props__.__dict__["instance_id"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["subset_view"] = None
        __props__.__dict__["table_id"] = None
        return AuthorizedView(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authorizedViewId")
    def authorized_view_id(self) -> pulumi.Output[str]:
        """
        Required. The id of the AuthorizedView to create. This AuthorizedView must not already exist. The `authorized_view_id` appended to `parent` forms the full AuthorizedView name of the form `projects/{project}/instances/{instance}/tables/{table}/authorizedView/{authorized_view}`.
        """
        return pulumi.get(self, "authorized_view_id")

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> pulumi.Output[bool]:
        """
        Set to true to make the AuthorizedView protected against deletion. The parent Table and containing Instance cannot be deleted if an AuthorizedView has this bit set.
        """
        return pulumi.get(self, "deletion_protection")

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[str]:
        """
        The etag for this AuthorizedView. If this is provided on update, it must match the server's etag. The server returns ABORTED error on a mismatched etag.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Identifier. The name of this AuthorizedView. Values are of the form `projects/{project}/instances/{instance}/tables/{table}/authorizedViews/{authorized_view}`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="subsetView")
    def subset_view(self) -> pulumi.Output['outputs.GoogleBigtableAdminV2AuthorizedViewSubsetViewResponse']:
        """
        An AuthorizedView permitting access to an explicit subset of a Table.
        """
        return pulumi.get(self, "subset_view")

    @property
    @pulumi.getter(name="tableId")
    def table_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "table_id")

