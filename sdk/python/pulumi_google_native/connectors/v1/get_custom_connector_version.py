# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetCustomConnectorVersionResult',
    'AwaitableGetCustomConnectorVersionResult',
    'get_custom_connector_version',
    'get_custom_connector_version_output',
]

@pulumi.output_type
class GetCustomConnectorVersionResult:
    def __init__(__self__, auth_config=None, backend_variable_templates=None, create_time=None, destination_configs=None, enable_backend_destination_config=None, labels=None, name=None, service_account=None, spec_location=None, spec_server_urls=None, state=None, update_time=None):
        if auth_config and not isinstance(auth_config, dict):
            raise TypeError("Expected argument 'auth_config' to be a dict")
        pulumi.set(__self__, "auth_config", auth_config)
        if backend_variable_templates and not isinstance(backend_variable_templates, list):
            raise TypeError("Expected argument 'backend_variable_templates' to be a list")
        pulumi.set(__self__, "backend_variable_templates", backend_variable_templates)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if destination_configs and not isinstance(destination_configs, list):
            raise TypeError("Expected argument 'destination_configs' to be a list")
        pulumi.set(__self__, "destination_configs", destination_configs)
        if enable_backend_destination_config and not isinstance(enable_backend_destination_config, bool):
            raise TypeError("Expected argument 'enable_backend_destination_config' to be a bool")
        pulumi.set(__self__, "enable_backend_destination_config", enable_backend_destination_config)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if service_account and not isinstance(service_account, str):
            raise TypeError("Expected argument 'service_account' to be a str")
        pulumi.set(__self__, "service_account", service_account)
        if spec_location and not isinstance(spec_location, str):
            raise TypeError("Expected argument 'spec_location' to be a str")
        pulumi.set(__self__, "spec_location", spec_location)
        if spec_server_urls and not isinstance(spec_server_urls, list):
            raise TypeError("Expected argument 'spec_server_urls' to be a list")
        pulumi.set(__self__, "spec_server_urls", spec_server_urls)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="authConfig")
    def auth_config(self) -> 'outputs.AuthConfigResponse':
        """
        Optional. Authentication config for accessing connector facade/ proxy. This is used only when enable_backend_destination_config is true.
        """
        return pulumi.get(self, "auth_config")

    @property
    @pulumi.getter(name="backendVariableTemplates")
    def backend_variable_templates(self) -> Sequence['outputs.ConfigVariableTemplateResponse']:
        """
        Optional. Backend variables config templates. This translates to additional variable templates in connection.
        """
        return pulumi.get(self, "backend_variable_templates")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Created time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="destinationConfigs")
    def destination_configs(self) -> Sequence['outputs.DestinationConfigResponse']:
        """
        Optional. Destination config(s) for accessing connector facade/ proxy. This is used only when enable_backend_destination_config is true.
        """
        return pulumi.get(self, "destination_configs")

    @property
    @pulumi.getter(name="enableBackendDestinationConfig")
    def enable_backend_destination_config(self) -> bool:
        """
        Optional. When enabled, the connector will be a facade/ proxy, and connects to the destination provided during connection creation.
        """
        return pulumi.get(self, "enable_backend_destination_config")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Identifier. Resource name of the Version. Format: projects/{project}/locations/{location}/customConnectors/{custom_connector}/customConnectorVersions/{custom_connector_version}
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> str:
        """
        Optional. Service account used by runtime plane to access auth config secrets.
        """
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="specLocation")
    def spec_location(self) -> str:
        """
        Optional. Location of the custom connector spec. The location can be either a public url like `https://public-url.com/spec` Or a Google Cloud Storage location like `gs:///`
        """
        return pulumi.get(self, "spec_location")

    @property
    @pulumi.getter(name="specServerUrls")
    def spec_server_urls(self) -> Sequence[str]:
        """
        Server URLs parsed from the spec.
        """
        return pulumi.get(self, "spec_server_urls")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of the custom connector version.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Updated time.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetCustomConnectorVersionResult(GetCustomConnectorVersionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCustomConnectorVersionResult(
            auth_config=self.auth_config,
            backend_variable_templates=self.backend_variable_templates,
            create_time=self.create_time,
            destination_configs=self.destination_configs,
            enable_backend_destination_config=self.enable_backend_destination_config,
            labels=self.labels,
            name=self.name,
            service_account=self.service_account,
            spec_location=self.spec_location,
            spec_server_urls=self.spec_server_urls,
            state=self.state,
            update_time=self.update_time)


def get_custom_connector_version(custom_connector_id: Optional[str] = None,
                                 custom_connector_version_id: Optional[str] = None,
                                 project: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCustomConnectorVersionResult:
    """
    Gets details of a single CustomConnectorVersion.
    """
    __args__ = dict()
    __args__['customConnectorId'] = custom_connector_id
    __args__['customConnectorVersionId'] = custom_connector_version_id
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:connectors/v1:getCustomConnectorVersion', __args__, opts=opts, typ=GetCustomConnectorVersionResult).value

    return AwaitableGetCustomConnectorVersionResult(
        auth_config=pulumi.get(__ret__, 'auth_config'),
        backend_variable_templates=pulumi.get(__ret__, 'backend_variable_templates'),
        create_time=pulumi.get(__ret__, 'create_time'),
        destination_configs=pulumi.get(__ret__, 'destination_configs'),
        enable_backend_destination_config=pulumi.get(__ret__, 'enable_backend_destination_config'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        service_account=pulumi.get(__ret__, 'service_account'),
        spec_location=pulumi.get(__ret__, 'spec_location'),
        spec_server_urls=pulumi.get(__ret__, 'spec_server_urls'),
        state=pulumi.get(__ret__, 'state'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_custom_connector_version)
def get_custom_connector_version_output(custom_connector_id: Optional[pulumi.Input[str]] = None,
                                        custom_connector_version_id: Optional[pulumi.Input[str]] = None,
                                        project: Optional[pulumi.Input[Optional[str]]] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCustomConnectorVersionResult]:
    """
    Gets details of a single CustomConnectorVersion.
    """
    ...
