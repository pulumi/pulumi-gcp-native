# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = ['VersionArgs', 'Version']

@pulumi.input_type
class VersionArgs:
    def __init__(__self__, *,
                 integration_id: pulumi.Input[str],
                 product_id: pulumi.Input[str],
                 content: Optional[pulumi.Input[str]] = None,
                 file_format: Optional[pulumi.Input['VersionFileFormat']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Version resource.
        :param pulumi.Input[str] content: The textproto of the integration_version.
        :param pulumi.Input['VersionFileFormat'] file_format: File format for upload request.
        """
        pulumi.set(__self__, "integration_id", integration_id)
        pulumi.set(__self__, "product_id", product_id)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if file_format is not None:
            pulumi.set(__self__, "file_format", file_format)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter(name="integrationId")
    def integration_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "integration_id")

    @integration_id.setter
    def integration_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_id", value)

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "product_id", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        The textproto of the integration_version.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="fileFormat")
    def file_format(self) -> Optional[pulumi.Input['VersionFileFormat']]:
        """
        File format for upload request.
        """
        return pulumi.get(self, "file_format")

    @file_format.setter
    def file_format(self, value: Optional[pulumi.Input['VersionFileFormat']]):
        pulumi.set(self, "file_format", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


class Version(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 file_format: Optional[pulumi.Input['VersionFileFormat']] = None,
                 integration_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 product_id: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Uploads an integration. The content can be a previously downloaded integration. Performs the same function as CreateDraftIntegrationVersion, but accepts input in a string format, which holds the complete representation of the IntegrationVersion content.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] content: The textproto of the integration_version.
        :param pulumi.Input['VersionFileFormat'] file_format: File format for upload request.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VersionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Uploads an integration. The content can be a previously downloaded integration. Performs the same function as CreateDraftIntegrationVersion, but accepts input in a string format, which holds the complete representation of the IntegrationVersion content.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param VersionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VersionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 file_format: Optional[pulumi.Input['VersionFileFormat']] = None,
                 integration_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 product_id: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VersionArgs.__new__(VersionArgs)

            __props__.__dict__["content"] = content
            __props__.__dict__["file_format"] = file_format
            if integration_id is None and not opts.urn:
                raise TypeError("Missing required property 'integration_id'")
            __props__.__dict__["integration_id"] = integration_id
            __props__.__dict__["location"] = location
            if product_id is None and not opts.urn:
                raise TypeError("Missing required property 'product_id'")
            __props__.__dict__["product_id"] = product_id
            __props__.__dict__["project"] = project
            __props__.__dict__["cloud_logging_details"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["database_persistence_policy"] = None
            __props__.__dict__["description"] = None
            __props__.__dict__["enable_variable_masking"] = None
            __props__.__dict__["error_catcher_configs"] = None
            __props__.__dict__["integration_config_parameters"] = None
            __props__.__dict__["integration_parameters"] = None
            __props__.__dict__["integration_parameters_internal"] = None
            __props__.__dict__["last_modifier_email"] = None
            __props__.__dict__["lock_holder"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["origin"] = None
            __props__.__dict__["parent_template_id"] = None
            __props__.__dict__["run_as_service_account"] = None
            __props__.__dict__["snapshot_number"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["task_configs"] = None
            __props__.__dict__["task_configs_internal"] = None
            __props__.__dict__["teardown"] = None
            __props__.__dict__["trigger_configs"] = None
            __props__.__dict__["trigger_configs_internal"] = None
            __props__.__dict__["update_time"] = None
            __props__.__dict__["user_label"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["integration_id", "location", "product_id", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Version, __self__).__init__(
            'google-native:integrations/v1alpha:Version',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Version':
        """
        Get an existing Version resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = VersionArgs.__new__(VersionArgs)

        __props__.__dict__["cloud_logging_details"] = None
        __props__.__dict__["create_time"] = None
        __props__.__dict__["database_persistence_policy"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["enable_variable_masking"] = None
        __props__.__dict__["error_catcher_configs"] = None
        __props__.__dict__["integration_config_parameters"] = None
        __props__.__dict__["integration_id"] = None
        __props__.__dict__["integration_parameters"] = None
        __props__.__dict__["integration_parameters_internal"] = None
        __props__.__dict__["last_modifier_email"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["lock_holder"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["origin"] = None
        __props__.__dict__["parent_template_id"] = None
        __props__.__dict__["product_id"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["run_as_service_account"] = None
        __props__.__dict__["snapshot_number"] = None
        __props__.__dict__["state"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["task_configs"] = None
        __props__.__dict__["task_configs_internal"] = None
        __props__.__dict__["teardown"] = None
        __props__.__dict__["trigger_configs"] = None
        __props__.__dict__["trigger_configs_internal"] = None
        __props__.__dict__["update_time"] = None
        __props__.__dict__["user_label"] = None
        return Version(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cloudLoggingDetails")
    def cloud_logging_details(self) -> pulumi.Output['outputs.GoogleCloudIntegrationsV1alphaCloudLoggingDetailsResponse']:
        """
        Optional. Cloud Logging details for the integration version
        """
        return pulumi.get(self, "cloud_logging_details")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Auto-generated.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="databasePersistencePolicy")
    def database_persistence_policy(self) -> pulumi.Output[str]:
        """
        Optional. Flag to disable database persistence for execution data, including event execution info, execution export info, execution metadata index and execution param index.
        """
        return pulumi.get(self, "database_persistence_policy")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Optional. The integration description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enableVariableMasking")
    def enable_variable_masking(self) -> pulumi.Output[bool]:
        """
        Optional. True if variable masking feature should be turned on for this version
        """
        return pulumi.get(self, "enable_variable_masking")

    @property
    @pulumi.getter(name="errorCatcherConfigs")
    def error_catcher_configs(self) -> pulumi.Output[Sequence['outputs.GoogleCloudIntegrationsV1alphaErrorCatcherConfigResponse']]:
        """
        Optional. Error Catch Task configuration for the integration. It's optional.
        """
        return pulumi.get(self, "error_catcher_configs")

    @property
    @pulumi.getter(name="integrationConfigParameters")
    def integration_config_parameters(self) -> pulumi.Output[Sequence['outputs.GoogleCloudIntegrationsV1alphaIntegrationConfigParameterResponse']]:
        """
        Optional. Config Parameters that are expected to be passed to the integration when an integration is published. This consists of all the parameters that are expected to provide configuration in the integration execution. This gives the user the ability to provide default values, value, add information like connection url, project based configuration value and also provide data types of each parameter.
        """
        return pulumi.get(self, "integration_config_parameters")

    @property
    @pulumi.getter(name="integrationId")
    def integration_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "integration_id")

    @property
    @pulumi.getter(name="integrationParameters")
    def integration_parameters(self) -> pulumi.Output[Sequence['outputs.GoogleCloudIntegrationsV1alphaIntegrationParameterResponse']]:
        """
        Optional. Parameters that are expected to be passed to the integration when an event is triggered. This consists of all the parameters that are expected in the integration execution. This gives the user the ability to provide default values, add information like PII and also provide data types of each parameter.
        """
        return pulumi.get(self, "integration_parameters")

    @property
    @pulumi.getter(name="integrationParametersInternal")
    def integration_parameters_internal(self) -> pulumi.Output['outputs.EnterpriseCrmFrontendsEventbusProtoWorkflowParametersResponse']:
        """
        Optional. Parameters that are expected to be passed to the integration when an event is triggered. This consists of all the parameters that are expected in the integration execution. This gives the user the ability to provide default values, add information like PII and also provide data types of each parameter.
        """
        return pulumi.get(self, "integration_parameters_internal")

    @property
    @pulumi.getter(name="lastModifierEmail")
    def last_modifier_email(self) -> pulumi.Output[str]:
        """
        Optional. The last modifier's email address. Generated based on the End User Credentials/LOAS role of the user making the call.
        """
        return pulumi.get(self, "last_modifier_email")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="lockHolder")
    def lock_holder(self) -> pulumi.Output[str]:
        """
        Optional. The edit lock holder's email address. Generated based on the End User Credentials/LOAS role of the user making the call.
        """
        return pulumi.get(self, "lock_holder")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Auto-generated primary key.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def origin(self) -> pulumi.Output[str]:
        """
        Optional. The origin that indicates where this integration is coming from.
        """
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter(name="parentTemplateId")
    def parent_template_id(self) -> pulumi.Output[str]:
        """
        Optional. The id of the template which was used to create this integration_version.
        """
        return pulumi.get(self, "parent_template_id")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="runAsServiceAccount")
    def run_as_service_account(self) -> pulumi.Output[str]:
        """
        Optional. The run-as service account email, if set and auth config is not configured, that will be used to generate auth token to be used in Connector task, Rest caller task and Cloud function task.
        """
        return pulumi.get(self, "run_as_service_account")

    @property
    @pulumi.getter(name="snapshotNumber")
    def snapshot_number(self) -> pulumi.Output[str]:
        """
        Optional. An increasing sequence that is set when a new snapshot is created. The last created snapshot can be identified by [workflow_name, org_id latest(snapshot_number)]. However, last created snapshot need not be same as the HEAD. So users should always use "HEAD" tag to identify the head.
        """
        return pulumi.get(self, "snapshot_number")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        User should not set it as an input.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Generated by eventbus. User should not set it as an input.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="taskConfigs")
    def task_configs(self) -> pulumi.Output[Sequence['outputs.GoogleCloudIntegrationsV1alphaTaskConfigResponse']]:
        """
        Optional. Task configuration for the integration. It's optional, but the integration doesn't do anything without task_configs.
        """
        return pulumi.get(self, "task_configs")

    @property
    @pulumi.getter(name="taskConfigsInternal")
    def task_configs_internal(self) -> pulumi.Output[Sequence['outputs.EnterpriseCrmFrontendsEventbusProtoTaskConfigResponse']]:
        """
        Optional. Task configuration for the integration. It's optional, but the integration doesn't do anything without task_configs.
        """
        return pulumi.get(self, "task_configs_internal")

    @property
    @pulumi.getter
    def teardown(self) -> pulumi.Output['outputs.EnterpriseCrmEventbusProtoTeardownResponse']:
        """
        Optional. Contains a graph of tasks that will be executed before putting the event in a terminal state (SUCCEEDED/FAILED/FATAL), regardless of success or failure, similar to "finally" in code.
        """
        return pulumi.get(self, "teardown")

    @property
    @pulumi.getter(name="triggerConfigs")
    def trigger_configs(self) -> pulumi.Output[Sequence['outputs.GoogleCloudIntegrationsV1alphaTriggerConfigResponse']]:
        """
        Optional. Trigger configurations.
        """
        return pulumi.get(self, "trigger_configs")

    @property
    @pulumi.getter(name="triggerConfigsInternal")
    def trigger_configs_internal(self) -> pulumi.Output[Sequence['outputs.EnterpriseCrmFrontendsEventbusProtoTriggerConfigResponse']]:
        """
        Optional. Trigger configurations.
        """
        return pulumi.get(self, "trigger_configs_internal")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Auto-generated.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="userLabel")
    def user_label(self) -> pulumi.Output[str]:
        """
        Optional. A user-defined label that annotates an integration version. Typically, this is only set when the integration version is created.
        """
        return pulumi.get(self, "user_label")

