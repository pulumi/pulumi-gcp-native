# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['GeneratorArgs', 'Generator']

@pulumi.input_type
class GeneratorArgs:
    def __init__(__self__, *,
                 agent_id: pulumi.Input[str],
                 display_name: pulumi.Input[str],
                 prompt_text: pulumi.Input['GoogleCloudDialogflowCxV3PhraseArgs'],
                 language_code: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 placeholders: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowCxV3GeneratorPlaceholderArgs']]]] = None,
                 project: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Generator resource.
        :param pulumi.Input[str] display_name: The human-readable name of the generator, unique within the agent. The prompt contains pre-defined parameters such as $conversation, $last-user-utterance, etc. populated by Dialogflow. It can also contain custom placeholders which will be resolved during fulfillment.
        :param pulumi.Input['GoogleCloudDialogflowCxV3PhraseArgs'] prompt_text: Prompt for the LLM model.
        :param pulumi.Input[str] language_code: The language to create generators for the following fields: * `Generator.prompt_text.text` If not specified, the agent's default language is used.
        :param pulumi.Input[str] name: The unique identifier of the generator. Must be set for the Generators.UpdateGenerator method. Generators.CreateGenerate populates the name automatically. Format: `projects//locations//agents//generators/`.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowCxV3GeneratorPlaceholderArgs']]] placeholders: Optional. List of custom placeholders in the prompt text.
        """
        pulumi.set(__self__, "agent_id", agent_id)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "prompt_text", prompt_text)
        if language_code is not None:
            pulumi.set(__self__, "language_code", language_code)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if placeholders is not None:
            pulumi.set(__self__, "placeholders", placeholders)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "agent_id")

    @agent_id.setter
    def agent_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "agent_id", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        The human-readable name of the generator, unique within the agent. The prompt contains pre-defined parameters such as $conversation, $last-user-utterance, etc. populated by Dialogflow. It can also contain custom placeholders which will be resolved during fulfillment.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="promptText")
    def prompt_text(self) -> pulumi.Input['GoogleCloudDialogflowCxV3PhraseArgs']:
        """
        Prompt for the LLM model.
        """
        return pulumi.get(self, "prompt_text")

    @prompt_text.setter
    def prompt_text(self, value: pulumi.Input['GoogleCloudDialogflowCxV3PhraseArgs']):
        pulumi.set(self, "prompt_text", value)

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> Optional[pulumi.Input[str]]:
        """
        The language to create generators for the following fields: * `Generator.prompt_text.text` If not specified, the agent's default language is used.
        """
        return pulumi.get(self, "language_code")

    @language_code.setter
    def language_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language_code", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier of the generator. Must be set for the Generators.UpdateGenerator method. Generators.CreateGenerate populates the name automatically. Format: `projects//locations//agents//generators/`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def placeholders(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowCxV3GeneratorPlaceholderArgs']]]]:
        """
        Optional. List of custom placeholders in the prompt text.
        """
        return pulumi.get(self, "placeholders")

    @placeholders.setter
    def placeholders(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GoogleCloudDialogflowCxV3GeneratorPlaceholderArgs']]]]):
        pulumi.set(self, "placeholders", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


class Generator(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agent_id: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 language_code: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 placeholders: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GoogleCloudDialogflowCxV3GeneratorPlaceholderArgs']]]]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 prompt_text: Optional[pulumi.Input[pulumi.InputType['GoogleCloudDialogflowCxV3PhraseArgs']]] = None,
                 __props__=None):
        """
        Creates a generator in the specified agent.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] display_name: The human-readable name of the generator, unique within the agent. The prompt contains pre-defined parameters such as $conversation, $last-user-utterance, etc. populated by Dialogflow. It can also contain custom placeholders which will be resolved during fulfillment.
        :param pulumi.Input[str] language_code: The language to create generators for the following fields: * `Generator.prompt_text.text` If not specified, the agent's default language is used.
        :param pulumi.Input[str] name: The unique identifier of the generator. Must be set for the Generators.UpdateGenerator method. Generators.CreateGenerate populates the name automatically. Format: `projects//locations//agents//generators/`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GoogleCloudDialogflowCxV3GeneratorPlaceholderArgs']]]] placeholders: Optional. List of custom placeholders in the prompt text.
        :param pulumi.Input[pulumi.InputType['GoogleCloudDialogflowCxV3PhraseArgs']] prompt_text: Prompt for the LLM model.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GeneratorArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a generator in the specified agent.

        :param str resource_name: The name of the resource.
        :param GeneratorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GeneratorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agent_id: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 language_code: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 placeholders: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GoogleCloudDialogflowCxV3GeneratorPlaceholderArgs']]]]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 prompt_text: Optional[pulumi.Input[pulumi.InputType['GoogleCloudDialogflowCxV3PhraseArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GeneratorArgs.__new__(GeneratorArgs)

            if agent_id is None and not opts.urn:
                raise TypeError("Missing required property 'agent_id'")
            __props__.__dict__["agent_id"] = agent_id
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["language_code"] = language_code
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            __props__.__dict__["placeholders"] = placeholders
            __props__.__dict__["project"] = project
            if prompt_text is None and not opts.urn:
                raise TypeError("Missing required property 'prompt_text'")
            __props__.__dict__["prompt_text"] = prompt_text
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["agent_id", "location", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Generator, __self__).__init__(
            'google-native:dialogflow/v3:Generator',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Generator':
        """
        Get an existing Generator resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = GeneratorArgs.__new__(GeneratorArgs)

        __props__.__dict__["agent_id"] = None
        __props__.__dict__["display_name"] = None
        __props__.__dict__["language_code"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["placeholders"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["prompt_text"] = None
        return Generator(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        The human-readable name of the generator, unique within the agent. The prompt contains pre-defined parameters such as $conversation, $last-user-utterance, etc. populated by Dialogflow. It can also contain custom placeholders which will be resolved during fulfillment.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> pulumi.Output[Optional[str]]:
        """
        The language to create generators for the following fields: * `Generator.prompt_text.text` If not specified, the agent's default language is used.
        """
        return pulumi.get(self, "language_code")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The unique identifier of the generator. Must be set for the Generators.UpdateGenerator method. Generators.CreateGenerate populates the name automatically. Format: `projects//locations//agents//generators/`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def placeholders(self) -> pulumi.Output[Sequence['outputs.GoogleCloudDialogflowCxV3GeneratorPlaceholderResponse']]:
        """
        Optional. List of custom placeholders in the prompt text.
        """
        return pulumi.get(self, "placeholders")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="promptText")
    def prompt_text(self) -> pulumi.Output['outputs.GoogleCloudDialogflowCxV3PhraseResponse']:
        """
        Prompt for the LLM model.
        """
        return pulumi.get(self, "prompt_text")

