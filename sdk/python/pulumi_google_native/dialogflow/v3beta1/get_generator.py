# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetGeneratorResult',
    'AwaitableGetGeneratorResult',
    'get_generator',
    'get_generator_output',
]

@pulumi.output_type
class GetGeneratorResult:
    def __init__(__self__, display_name=None, name=None, placeholders=None, prompt_text=None):
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if placeholders and not isinstance(placeholders, list):
            raise TypeError("Expected argument 'placeholders' to be a list")
        pulumi.set(__self__, "placeholders", placeholders)
        if prompt_text and not isinstance(prompt_text, dict):
            raise TypeError("Expected argument 'prompt_text' to be a dict")
        pulumi.set(__self__, "prompt_text", prompt_text)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The human-readable name of the generator, unique within the agent. The prompt contains pre-defined parameters such as $conversation, $last-user-utterance, etc. populated by Dialogflow. It can also contain custom placeholders which will be resolved during fulfillment.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The unique identifier of the generator. Must be set for the Generators.UpdateGenerator method. Generators.CreateGenerate populates the name automatically. Format: `projects//locations//agents//generators/`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def placeholders(self) -> Sequence['outputs.GoogleCloudDialogflowCxV3beta1GeneratorPlaceholderResponse']:
        """
        Optional. List of custom placeholders in the prompt text.
        """
        return pulumi.get(self, "placeholders")

    @property
    @pulumi.getter(name="promptText")
    def prompt_text(self) -> 'outputs.GoogleCloudDialogflowCxV3beta1PhraseResponse':
        """
        Prompt for the LLM model.
        """
        return pulumi.get(self, "prompt_text")


class AwaitableGetGeneratorResult(GetGeneratorResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGeneratorResult(
            display_name=self.display_name,
            name=self.name,
            placeholders=self.placeholders,
            prompt_text=self.prompt_text)


def get_generator(agent_id: Optional[str] = None,
                  generator_id: Optional[str] = None,
                  language_code: Optional[str] = None,
                  location: Optional[str] = None,
                  project: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGeneratorResult:
    """
    Retrieves the specified generator.
    """
    __args__ = dict()
    __args__['agentId'] = agent_id
    __args__['generatorId'] = generator_id
    __args__['languageCode'] = language_code
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:dialogflow/v3beta1:getGenerator', __args__, opts=opts, typ=GetGeneratorResult).value

    return AwaitableGetGeneratorResult(
        display_name=pulumi.get(__ret__, 'display_name'),
        name=pulumi.get(__ret__, 'name'),
        placeholders=pulumi.get(__ret__, 'placeholders'),
        prompt_text=pulumi.get(__ret__, 'prompt_text'))


@_utilities.lift_output_func(get_generator)
def get_generator_output(agent_id: Optional[pulumi.Input[str]] = None,
                         generator_id: Optional[pulumi.Input[str]] = None,
                         language_code: Optional[pulumi.Input[Optional[str]]] = None,
                         location: Optional[pulumi.Input[str]] = None,
                         project: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGeneratorResult]:
    """
    Retrieves the specified generator.
    """
    ...
