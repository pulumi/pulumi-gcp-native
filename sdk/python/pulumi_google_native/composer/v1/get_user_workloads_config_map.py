# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'GetUserWorkloadsConfigMapResult',
    'AwaitableGetUserWorkloadsConfigMapResult',
    'get_user_workloads_config_map',
    'get_user_workloads_config_map_output',
]

@pulumi.output_type
class GetUserWorkloadsConfigMapResult:
    def __init__(__self__, data=None, name=None):
        if data and not isinstance(data, dict):
            raise TypeError("Expected argument 'data' to be a dict")
        pulumi.set(__self__, "data", data)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def data(self) -> Mapping[str, str]:
        """
        Optional. The "data" field of Kubernetes ConfigMap, organized in key-value pairs. For details see: https://kubernetes.io/docs/concepts/configuration/configmap/
        """
        return pulumi.get(self, "data")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Identifier. The resource name of the ConfigMap, in the form: "projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsConfigMaps/{userWorkloadsConfigMapId}"
        """
        return pulumi.get(self, "name")


class AwaitableGetUserWorkloadsConfigMapResult(GetUserWorkloadsConfigMapResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserWorkloadsConfigMapResult(
            data=self.data,
            name=self.name)


def get_user_workloads_config_map(environment_id: Optional[str] = None,
                                  location: Optional[str] = None,
                                  project: Optional[str] = None,
                                  user_workloads_config_map_id: Optional[str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUserWorkloadsConfigMapResult:
    """
    Gets an existing user workloads ConfigMap. This method is supported for Cloud Composer environments in versions composer-3.*.*-airflow-*.*.* and newer.
    """
    __args__ = dict()
    __args__['environmentId'] = environment_id
    __args__['location'] = location
    __args__['project'] = project
    __args__['userWorkloadsConfigMapId'] = user_workloads_config_map_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:composer/v1:getUserWorkloadsConfigMap', __args__, opts=opts, typ=GetUserWorkloadsConfigMapResult).value

    return AwaitableGetUserWorkloadsConfigMapResult(
        data=pulumi.get(__ret__, 'data'),
        name=pulumi.get(__ret__, 'name'))


@_utilities.lift_output_func(get_user_workloads_config_map)
def get_user_workloads_config_map_output(environment_id: Optional[pulumi.Input[str]] = None,
                                         location: Optional[pulumi.Input[str]] = None,
                                         project: Optional[pulumi.Input[Optional[str]]] = None,
                                         user_workloads_config_map_id: Optional[pulumi.Input[str]] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetUserWorkloadsConfigMapResult]:
    """
    Gets an existing user workloads ConfigMap. This method is supported for Cloud Composer environments in versions composer-3.*.*-airflow-*.*.* and newer.
    """
    ...
