# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'GetResourcePolicyResult',
    'AwaitableGetResourcePolicyResult',
    'get_resource_policy',
    'get_resource_policy_output',
]

@pulumi.output_type
class GetResourcePolicyResult:
    def __init__(__self__, enforcement_mode=None, etag=None, name=None, target_resource=None, update_time=None):
        if enforcement_mode and not isinstance(enforcement_mode, str):
            raise TypeError("Expected argument 'enforcement_mode' to be a str")
        pulumi.set(__self__, "enforcement_mode", enforcement_mode)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if target_resource and not isinstance(target_resource, str):
            raise TypeError("Expected argument 'target_resource' to be a str")
        pulumi.set(__self__, "target_resource", target_resource)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="enforcementMode")
    def enforcement_mode(self) -> str:
        """
        The App Check enforcement mode for this resource. This will override the EnforcementMode setting on the service. For new resources that you are creating, you should consider setting an override and enable enforcement on the resource immediately, if there are no outdated clients that can use it.
        """
        return pulumi.get(self, "enforcement_mode")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. This etag is strongly validated.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The relative name of the resource configuration object, in the format: ``` projects/{project_number}/services/{service_id}/resourcePolicies/{resource_policy_id} ``` Note that the `service_id` element must be a supported service ID. Currently, the following service IDs are supported: * `oauth2.googleapis.com` (Google Identity for iOS) `resource_policy_id` is a system-generated UID used as the resource ID for the policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="targetResource")
    def target_resource(self) -> str:
        """
        Service specific name of the resource object to which this policy applies, in the format: * `//oauth2.googleapis.com/projects/{project}/oauthClients/{oauth_client_id}` (Google Identity for iOS) NOTE that the resource must belong to the service specified in the `name` and be from the same project as this policy, but it may or may not exist at the time of creation of the policy.
        """
        return pulumi.get(self, "target_resource")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Timestamp when this service configuration object was most recently updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetResourcePolicyResult(GetResourcePolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourcePolicyResult(
            enforcement_mode=self.enforcement_mode,
            etag=self.etag,
            name=self.name,
            target_resource=self.target_resource,
            update_time=self.update_time)


def get_resource_policy(project: Optional[str] = None,
                        resource_policy_id: Optional[str] = None,
                        service_id: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourcePolicyResult:
    """
    Gets the requested ResourcePolicy configuration.
    """
    __args__ = dict()
    __args__['project'] = project
    __args__['resourcePolicyId'] = resource_policy_id
    __args__['serviceId'] = service_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:firebaseappcheck/v1beta:getResourcePolicy', __args__, opts=opts, typ=GetResourcePolicyResult).value

    return AwaitableGetResourcePolicyResult(
        enforcement_mode=pulumi.get(__ret__, 'enforcement_mode'),
        etag=pulumi.get(__ret__, 'etag'),
        name=pulumi.get(__ret__, 'name'),
        target_resource=pulumi.get(__ret__, 'target_resource'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_resource_policy)
def get_resource_policy_output(project: Optional[pulumi.Input[Optional[str]]] = None,
                               resource_policy_id: Optional[pulumi.Input[str]] = None,
                               service_id: Optional[pulumi.Input[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetResourcePolicyResult]:
    """
    Gets the requested ResourcePolicy configuration.
    """
    ...
