# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetTargetSiteResult',
    'AwaitableGetTargetSiteResult',
    'get_target_site',
    'get_target_site_output',
]

@pulumi.output_type
class GetTargetSiteResult:
    def __init__(__self__, exact_match=None, failure_reason=None, generated_uri_pattern=None, indexing_status=None, name=None, provided_uri_pattern=None, site_verification_info=None, type=None, update_time=None):
        if exact_match and not isinstance(exact_match, bool):
            raise TypeError("Expected argument 'exact_match' to be a bool")
        pulumi.set(__self__, "exact_match", exact_match)
        if failure_reason and not isinstance(failure_reason, dict):
            raise TypeError("Expected argument 'failure_reason' to be a dict")
        pulumi.set(__self__, "failure_reason", failure_reason)
        if generated_uri_pattern and not isinstance(generated_uri_pattern, str):
            raise TypeError("Expected argument 'generated_uri_pattern' to be a str")
        pulumi.set(__self__, "generated_uri_pattern", generated_uri_pattern)
        if indexing_status and not isinstance(indexing_status, str):
            raise TypeError("Expected argument 'indexing_status' to be a str")
        pulumi.set(__self__, "indexing_status", indexing_status)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provided_uri_pattern and not isinstance(provided_uri_pattern, str):
            raise TypeError("Expected argument 'provided_uri_pattern' to be a str")
        pulumi.set(__self__, "provided_uri_pattern", provided_uri_pattern)
        if site_verification_info and not isinstance(site_verification_info, dict):
            raise TypeError("Expected argument 'site_verification_info' to be a dict")
        pulumi.set(__self__, "site_verification_info", site_verification_info)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> bool:
        """
        Input only. If set to false, a uri_pattern is generated to include all pages whose address contains the provided_uri_pattern. If set to true, an uri_pattern is generated to try to be an exact match of the provided_uri_pattern or just the specific page if the provided_uri_pattern is a specific one. provided_uri_pattern is always normalized to generate the URI pattern to be used by the search engine.
        """
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> 'outputs.GoogleCloudDiscoveryengineV1betaTargetSiteFailureReasonResponse':
        """
        Failure reason.
        """
        return pulumi.get(self, "failure_reason")

    @property
    @pulumi.getter(name="generatedUriPattern")
    def generated_uri_pattern(self) -> str:
        """
        This is system-generated based on the provided_uri_pattern.
        """
        return pulumi.get(self, "generated_uri_pattern")

    @property
    @pulumi.getter(name="indexingStatus")
    def indexing_status(self) -> str:
        """
        Indexing status.
        """
        return pulumi.get(self, "indexing_status")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The fully qualified resource name of the target site. `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine/targetSites/{target_site}` The `target_site_id` is system-generated.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="providedUriPattern")
    def provided_uri_pattern(self) -> str:
        """
        Input only. The user provided URI pattern from which the `generated_uri_pattern` is generated.
        """
        return pulumi.get(self, "provided_uri_pattern")

    @property
    @pulumi.getter(name="siteVerificationInfo")
    def site_verification_info(self) -> 'outputs.GoogleCloudDiscoveryengineV1betaSiteVerificationInfoResponse':
        """
        Site ownership and validity verification status.
        """
        return pulumi.get(self, "site_verification_info")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the target site, e.g., whether the site is to be included or excluded.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The target site's last updated time.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetTargetSiteResult(GetTargetSiteResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTargetSiteResult(
            exact_match=self.exact_match,
            failure_reason=self.failure_reason,
            generated_uri_pattern=self.generated_uri_pattern,
            indexing_status=self.indexing_status,
            name=self.name,
            provided_uri_pattern=self.provided_uri_pattern,
            site_verification_info=self.site_verification_info,
            type=self.type,
            update_time=self.update_time)


def get_target_site(collection_id: Optional[str] = None,
                    data_store_id: Optional[str] = None,
                    location: Optional[str] = None,
                    project: Optional[str] = None,
                    target_site_id: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTargetSiteResult:
    """
    Gets a TargetSite.
    """
    __args__ = dict()
    __args__['collectionId'] = collection_id
    __args__['dataStoreId'] = data_store_id
    __args__['location'] = location
    __args__['project'] = project
    __args__['targetSiteId'] = target_site_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:discoveryengine/v1beta:getTargetSite', __args__, opts=opts, typ=GetTargetSiteResult).value

    return AwaitableGetTargetSiteResult(
        exact_match=pulumi.get(__ret__, 'exact_match'),
        failure_reason=pulumi.get(__ret__, 'failure_reason'),
        generated_uri_pattern=pulumi.get(__ret__, 'generated_uri_pattern'),
        indexing_status=pulumi.get(__ret__, 'indexing_status'),
        name=pulumi.get(__ret__, 'name'),
        provided_uri_pattern=pulumi.get(__ret__, 'provided_uri_pattern'),
        site_verification_info=pulumi.get(__ret__, 'site_verification_info'),
        type=pulumi.get(__ret__, 'type'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_target_site)
def get_target_site_output(collection_id: Optional[pulumi.Input[str]] = None,
                           data_store_id: Optional[pulumi.Input[str]] = None,
                           location: Optional[pulumi.Input[str]] = None,
                           project: Optional[pulumi.Input[Optional[str]]] = None,
                           target_site_id: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTargetSiteResult]:
    """
    Gets a TargetSite.
    """
    ...
