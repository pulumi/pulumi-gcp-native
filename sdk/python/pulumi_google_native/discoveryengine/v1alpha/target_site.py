# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = ['TargetSiteArgs', 'TargetSite']

@pulumi.input_type
class TargetSiteArgs:
    def __init__(__self__, *,
                 collection_id: pulumi.Input[str],
                 data_store_id: pulumi.Input[str],
                 provided_uri_pattern: pulumi.Input[str],
                 exact_match: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input['TargetSiteType']] = None):
        """
        The set of arguments for constructing a TargetSite resource.
        :param pulumi.Input[str] provided_uri_pattern: Input only. The user provided URI pattern from which the `generated_uri_pattern` is generated.
        :param pulumi.Input[bool] exact_match: Input only. If set to false, a uri_pattern is generated to include all pages whose address contains the provided_uri_pattern. If set to true, an uri_pattern is generated to try to be an exact match of the provided_uri_pattern or just the specific page if the provided_uri_pattern is a specific one. provided_uri_pattern is always normalized to generate the URI pattern to be used by the search engine.
        :param pulumi.Input['TargetSiteType'] type: The type of the target site, e.g., whether the site is to be included or excluded.
        """
        pulumi.set(__self__, "collection_id", collection_id)
        pulumi.set(__self__, "data_store_id", data_store_id)
        pulumi.set(__self__, "provided_uri_pattern", provided_uri_pattern)
        if exact_match is not None:
            pulumi.set(__self__, "exact_match", exact_match)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="collectionId")
    def collection_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "collection_id")

    @collection_id.setter
    def collection_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "collection_id", value)

    @property
    @pulumi.getter(name="dataStoreId")
    def data_store_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_store_id")

    @data_store_id.setter
    def data_store_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_store_id", value)

    @property
    @pulumi.getter(name="providedUriPattern")
    def provided_uri_pattern(self) -> pulumi.Input[str]:
        """
        Input only. The user provided URI pattern from which the `generated_uri_pattern` is generated.
        """
        return pulumi.get(self, "provided_uri_pattern")

    @provided_uri_pattern.setter
    def provided_uri_pattern(self, value: pulumi.Input[str]):
        pulumi.set(self, "provided_uri_pattern", value)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[pulumi.Input[bool]]:
        """
        Input only. If set to false, a uri_pattern is generated to include all pages whose address contains the provided_uri_pattern. If set to true, an uri_pattern is generated to try to be an exact match of the provided_uri_pattern or just the specific page if the provided_uri_pattern is a specific one. provided_uri_pattern is always normalized to generate the URI pattern to be used by the search engine.
        """
        return pulumi.get(self, "exact_match")

    @exact_match.setter
    def exact_match(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exact_match", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['TargetSiteType']]:
        """
        The type of the target site, e.g., whether the site is to be included or excluded.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['TargetSiteType']]):
        pulumi.set(self, "type", value)


class TargetSite(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 collection_id: Optional[pulumi.Input[str]] = None,
                 data_store_id: Optional[pulumi.Input[str]] = None,
                 exact_match: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 provided_uri_pattern: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input['TargetSiteType']] = None,
                 __props__=None):
        """
        Creates a TargetSite.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] exact_match: Input only. If set to false, a uri_pattern is generated to include all pages whose address contains the provided_uri_pattern. If set to true, an uri_pattern is generated to try to be an exact match of the provided_uri_pattern or just the specific page if the provided_uri_pattern is a specific one. provided_uri_pattern is always normalized to generate the URI pattern to be used by the search engine.
        :param pulumi.Input[str] provided_uri_pattern: Input only. The user provided URI pattern from which the `generated_uri_pattern` is generated.
        :param pulumi.Input['TargetSiteType'] type: The type of the target site, e.g., whether the site is to be included or excluded.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TargetSiteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a TargetSite.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param TargetSiteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TargetSiteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 collection_id: Optional[pulumi.Input[str]] = None,
                 data_store_id: Optional[pulumi.Input[str]] = None,
                 exact_match: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 provided_uri_pattern: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input['TargetSiteType']] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TargetSiteArgs.__new__(TargetSiteArgs)

            if collection_id is None and not opts.urn:
                raise TypeError("Missing required property 'collection_id'")
            __props__.__dict__["collection_id"] = collection_id
            if data_store_id is None and not opts.urn:
                raise TypeError("Missing required property 'data_store_id'")
            __props__.__dict__["data_store_id"] = data_store_id
            __props__.__dict__["exact_match"] = exact_match
            __props__.__dict__["location"] = location
            __props__.__dict__["project"] = project
            if provided_uri_pattern is None and not opts.urn:
                raise TypeError("Missing required property 'provided_uri_pattern'")
            __props__.__dict__["provided_uri_pattern"] = provided_uri_pattern
            __props__.__dict__["type"] = type
            __props__.__dict__["failure_reason"] = None
            __props__.__dict__["generated_uri_pattern"] = None
            __props__.__dict__["indexing_status"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["site_verification_info"] = None
            __props__.__dict__["update_time"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["collection_id", "data_store_id", "location", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(TargetSite, __self__).__init__(
            'google-native:discoveryengine/v1alpha:TargetSite',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'TargetSite':
        """
        Get an existing TargetSite resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = TargetSiteArgs.__new__(TargetSiteArgs)

        __props__.__dict__["collection_id"] = None
        __props__.__dict__["data_store_id"] = None
        __props__.__dict__["exact_match"] = None
        __props__.__dict__["failure_reason"] = None
        __props__.__dict__["generated_uri_pattern"] = None
        __props__.__dict__["indexing_status"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["provided_uri_pattern"] = None
        __props__.__dict__["site_verification_info"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["update_time"] = None
        return TargetSite(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="collectionId")
    def collection_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "collection_id")

    @property
    @pulumi.getter(name="dataStoreId")
    def data_store_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "data_store_id")

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> pulumi.Output[bool]:
        """
        Input only. If set to false, a uri_pattern is generated to include all pages whose address contains the provided_uri_pattern. If set to true, an uri_pattern is generated to try to be an exact match of the provided_uri_pattern or just the specific page if the provided_uri_pattern is a specific one. provided_uri_pattern is always normalized to generate the URI pattern to be used by the search engine.
        """
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> pulumi.Output['outputs.GoogleCloudDiscoveryengineV1alphaTargetSiteFailureReasonResponse']:
        """
        Failure reason.
        """
        return pulumi.get(self, "failure_reason")

    @property
    @pulumi.getter(name="generatedUriPattern")
    def generated_uri_pattern(self) -> pulumi.Output[str]:
        """
        This is system-generated based on the provided_uri_pattern.
        """
        return pulumi.get(self, "generated_uri_pattern")

    @property
    @pulumi.getter(name="indexingStatus")
    def indexing_status(self) -> pulumi.Output[str]:
        """
        Indexing status.
        """
        return pulumi.get(self, "indexing_status")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The fully qualified resource name of the target site. `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine/targetSites/{target_site}` The `target_site_id` is system-generated.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="providedUriPattern")
    def provided_uri_pattern(self) -> pulumi.Output[str]:
        """
        Input only. The user provided URI pattern from which the `generated_uri_pattern` is generated.
        """
        return pulumi.get(self, "provided_uri_pattern")

    @property
    @pulumi.getter(name="siteVerificationInfo")
    def site_verification_info(self) -> pulumi.Output['outputs.GoogleCloudDiscoveryengineV1alphaSiteVerificationInfoResponse']:
        """
        Site ownership and validity verification status.
        """
        return pulumi.get(self, "site_verification_info")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the target site, e.g., whether the site is to be included or excluded.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        The target site's last updated time.
        """
        return pulumi.get(self, "update_time")

