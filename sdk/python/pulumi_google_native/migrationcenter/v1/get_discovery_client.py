# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetDiscoveryClientResult',
    'AwaitableGetDiscoveryClientResult',
    'get_discovery_client',
    'get_discovery_client_output',
]

@pulumi.output_type
class GetDiscoveryClientResult:
    def __init__(__self__, create_time=None, description=None, display_name=None, errors=None, expire_time=None, heartbeat_time=None, labels=None, name=None, service_account=None, signals_endpoint=None, source=None, state=None, ttl=None, update_time=None, version=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if errors and not isinstance(errors, list):
            raise TypeError("Expected argument 'errors' to be a list")
        pulumi.set(__self__, "errors", errors)
        if expire_time and not isinstance(expire_time, str):
            raise TypeError("Expected argument 'expire_time' to be a str")
        pulumi.set(__self__, "expire_time", expire_time)
        if heartbeat_time and not isinstance(heartbeat_time, str):
            raise TypeError("Expected argument 'heartbeat_time' to be a str")
        pulumi.set(__self__, "heartbeat_time", heartbeat_time)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if service_account and not isinstance(service_account, str):
            raise TypeError("Expected argument 'service_account' to be a str")
        pulumi.set(__self__, "service_account", service_account)
        if signals_endpoint and not isinstance(signals_endpoint, str):
            raise TypeError("Expected argument 'signals_endpoint' to be a str")
        pulumi.set(__self__, "signals_endpoint", signals_endpoint)
        if source and not isinstance(source, str):
            raise TypeError("Expected argument 'source' to be a str")
        pulumi.set(__self__, "source", source)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if ttl and not isinstance(ttl, str):
            raise TypeError("Expected argument 'ttl' to be a str")
        pulumi.set(__self__, "ttl", ttl)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Time when the discovery client was first created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. Free text description. Maximum length is 1000 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Optional. Free text display name. Maximum length is 63 characters.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.StatusResponse']:
        """
        Errors affecting client functionality.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        """
        Optional. Client expiration time in UTC. If specified, the backend will not accept new frames after this time.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="heartbeatTime")
    def heartbeat_time(self) -> str:
        """
        Last heartbeat time. Healthy clients are expected to send heartbeats regularly (normally every few minutes).
        """
        return pulumi.get(self, "heartbeat_time")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Optional. Labels as key value pairs.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Identifier. Full name of this discovery client.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> str:
        """
        Service account used by the discovery client for various operation.
        """
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="signalsEndpoint")
    def signals_endpoint(self) -> str:
        """
        This field is intended for internal use.
        """
        return pulumi.get(self, "signals_endpoint")

    @property
    @pulumi.getter
    def source(self) -> str:
        """
        Immutable. Full name of the source object associated with this discovery client.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Current state of the discovery client.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def ttl(self) -> str:
        """
        Optional. Input only. Client time-to-live. If specified, the backend will not accept new frames after this time. This field is input only. The derived expiration time is provided as output through the `expire_time` field.
        """
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Time when the discovery client was last updated. This value is not updated by heartbeats, to view the last heartbeat time please refer to the `heartbeat_time` field.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Client version, as reported in recent heartbeat.
        """
        return pulumi.get(self, "version")


class AwaitableGetDiscoveryClientResult(GetDiscoveryClientResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDiscoveryClientResult(
            create_time=self.create_time,
            description=self.description,
            display_name=self.display_name,
            errors=self.errors,
            expire_time=self.expire_time,
            heartbeat_time=self.heartbeat_time,
            labels=self.labels,
            name=self.name,
            service_account=self.service_account,
            signals_endpoint=self.signals_endpoint,
            source=self.source,
            state=self.state,
            ttl=self.ttl,
            update_time=self.update_time,
            version=self.version)


def get_discovery_client(discovery_client_id: Optional[str] = None,
                         location: Optional[str] = None,
                         project: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDiscoveryClientResult:
    """
    Gets the details of a discovery client.
    """
    __args__ = dict()
    __args__['discoveryClientId'] = discovery_client_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:migrationcenter/v1:getDiscoveryClient', __args__, opts=opts, typ=GetDiscoveryClientResult).value

    return AwaitableGetDiscoveryClientResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        errors=pulumi.get(__ret__, 'errors'),
        expire_time=pulumi.get(__ret__, 'expire_time'),
        heartbeat_time=pulumi.get(__ret__, 'heartbeat_time'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        service_account=pulumi.get(__ret__, 'service_account'),
        signals_endpoint=pulumi.get(__ret__, 'signals_endpoint'),
        source=pulumi.get(__ret__, 'source'),
        state=pulumi.get(__ret__, 'state'),
        ttl=pulumi.get(__ret__, 'ttl'),
        update_time=pulumi.get(__ret__, 'update_time'),
        version=pulumi.get(__ret__, 'version'))


@_utilities.lift_output_func(get_discovery_client)
def get_discovery_client_output(discovery_client_id: Optional[pulumi.Input[str]] = None,
                                location: Optional[pulumi.Input[str]] = None,
                                project: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDiscoveryClientResult]:
    """
    Gets the details of a discovery client.
    """
    ...
