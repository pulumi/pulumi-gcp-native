# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TestArgs', 'Test']

@pulumi.input_type
class TestArgs:
    def __init__(__self__, *,
                 app_id: pulumi.Input[str],
                 device_executions: pulumi.Input[Sequence[pulumi.Input['GoogleFirebaseAppdistroV1alphaDeviceExecutionArgs']]],
                 release_id: pulumi.Input[str],
                 login_credential: Optional[pulumi.Input['GoogleFirebaseAppdistroV1alphaLoginCredentialArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 release_test_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Test resource.
        :param pulumi.Input[Sequence[pulumi.Input['GoogleFirebaseAppdistroV1alphaDeviceExecutionArgs']]] device_executions: The results of the test on each device.
        :param pulumi.Input['GoogleFirebaseAppdistroV1alphaLoginCredentialArgs'] login_credential: Optional. Input only. Login credentials for the test. Input only.
        :param pulumi.Input[str] name: The name of the release test resource. Format: `projects/{project_number}/apps/{app_id}/releases/{release_id}/tests/{test_id}`
        :param pulumi.Input[str] release_test_id: Optional. The ID to use for the test, which will become the final component of the tests's resource name. This value should be 4-63 characters, and valid characters are /a-z-/. If it is not provided one will be automatically generated.
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "device_executions", device_executions)
        pulumi.set(__self__, "release_id", release_id)
        if login_credential is not None:
            pulumi.set(__self__, "login_credential", login_credential)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if release_test_id is not None:
            pulumi.set(__self__, "release_test_id", release_test_id)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter(name="deviceExecutions")
    def device_executions(self) -> pulumi.Input[Sequence[pulumi.Input['GoogleFirebaseAppdistroV1alphaDeviceExecutionArgs']]]:
        """
        The results of the test on each device.
        """
        return pulumi.get(self, "device_executions")

    @device_executions.setter
    def device_executions(self, value: pulumi.Input[Sequence[pulumi.Input['GoogleFirebaseAppdistroV1alphaDeviceExecutionArgs']]]):
        pulumi.set(self, "device_executions", value)

    @property
    @pulumi.getter(name="releaseId")
    def release_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "release_id")

    @release_id.setter
    def release_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "release_id", value)

    @property
    @pulumi.getter(name="loginCredential")
    def login_credential(self) -> Optional[pulumi.Input['GoogleFirebaseAppdistroV1alphaLoginCredentialArgs']]:
        """
        Optional. Input only. Login credentials for the test. Input only.
        """
        return pulumi.get(self, "login_credential")

    @login_credential.setter
    def login_credential(self, value: Optional[pulumi.Input['GoogleFirebaseAppdistroV1alphaLoginCredentialArgs']]):
        pulumi.set(self, "login_credential", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the release test resource. Format: `projects/{project_number}/apps/{app_id}/releases/{release_id}/tests/{test_id}`
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="releaseTestId")
    def release_test_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The ID to use for the test, which will become the final component of the tests's resource name. This value should be 4-63 characters, and valid characters are /a-z-/. If it is not provided one will be automatically generated.
        """
        return pulumi.get(self, "release_test_id")

    @release_test_id.setter
    def release_test_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_test_id", value)


class Test(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 device_executions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GoogleFirebaseAppdistroV1alphaDeviceExecutionArgs']]]]] = None,
                 login_credential: Optional[pulumi.Input[pulumi.InputType['GoogleFirebaseAppdistroV1alphaLoginCredentialArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 release_id: Optional[pulumi.Input[str]] = None,
                 release_test_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Run automated test(s) on release.
        Note - this resource's API doesn't support deletion. When deleted, the resource will persist
        on Google Cloud even though it will be deleted from Pulumi state.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GoogleFirebaseAppdistroV1alphaDeviceExecutionArgs']]]] device_executions: The results of the test on each device.
        :param pulumi.Input[pulumi.InputType['GoogleFirebaseAppdistroV1alphaLoginCredentialArgs']] login_credential: Optional. Input only. Login credentials for the test. Input only.
        :param pulumi.Input[str] name: The name of the release test resource. Format: `projects/{project_number}/apps/{app_id}/releases/{release_id}/tests/{test_id}`
        :param pulumi.Input[str] release_test_id: Optional. The ID to use for the test, which will become the final component of the tests's resource name. This value should be 4-63 characters, and valid characters are /a-z-/. If it is not provided one will be automatically generated.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TestArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Run automated test(s) on release.
        Note - this resource's API doesn't support deletion. When deleted, the resource will persist
        on Google Cloud even though it will be deleted from Pulumi state.

        :param str resource_name: The name of the resource.
        :param TestArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TestArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 device_executions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GoogleFirebaseAppdistroV1alphaDeviceExecutionArgs']]]]] = None,
                 login_credential: Optional[pulumi.Input[pulumi.InputType['GoogleFirebaseAppdistroV1alphaLoginCredentialArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 release_id: Optional[pulumi.Input[str]] = None,
                 release_test_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TestArgs.__new__(TestArgs)

            if app_id is None and not opts.urn:
                raise TypeError("Missing required property 'app_id'")
            __props__.__dict__["app_id"] = app_id
            if device_executions is None and not opts.urn:
                raise TypeError("Missing required property 'device_executions'")
            __props__.__dict__["device_executions"] = device_executions
            __props__.__dict__["login_credential"] = login_credential
            __props__.__dict__["name"] = name
            __props__.__dict__["project"] = project
            if release_id is None and not opts.urn:
                raise TypeError("Missing required property 'release_id'")
            __props__.__dict__["release_id"] = release_id
            __props__.__dict__["release_test_id"] = release_test_id
            __props__.__dict__["create_time"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["app_id", "project", "release_id"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Test, __self__).__init__(
            'google-native:firebaseappdistribution/v1alpha:Test',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Test':
        """
        Get an existing Test resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = TestArgs.__new__(TestArgs)

        __props__.__dict__["app_id"] = None
        __props__.__dict__["create_time"] = None
        __props__.__dict__["device_executions"] = None
        __props__.__dict__["login_credential"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["release_id"] = None
        __props__.__dict__["release_test_id"] = None
        return Test(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Timestamp when the test was run.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deviceExecutions")
    def device_executions(self) -> pulumi.Output[Sequence['outputs.GoogleFirebaseAppdistroV1alphaDeviceExecutionResponse']]:
        """
        The results of the test on each device.
        """
        return pulumi.get(self, "device_executions")

    @property
    @pulumi.getter(name="loginCredential")
    def login_credential(self) -> pulumi.Output['outputs.GoogleFirebaseAppdistroV1alphaLoginCredentialResponse']:
        """
        Optional. Input only. Login credentials for the test. Input only.
        """
        return pulumi.get(self, "login_credential")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the release test resource. Format: `projects/{project_number}/apps/{app_id}/releases/{release_id}/tests/{test_id}`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="releaseId")
    def release_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "release_id")

    @property
    @pulumi.getter(name="releaseTestId")
    def release_test_id(self) -> pulumi.Output[Optional[str]]:
        """
        Optional. The ID to use for the test, which will become the final component of the tests's resource name. This value should be 4-63 characters, and valid characters are /a-z-/. If it is not provided one will be automatically generated.
        """
        return pulumi.get(self, "release_test_id")

