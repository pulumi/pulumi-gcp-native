# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GoogleFirebaseAppdistroV1alphaAppCrashResponse',
    'GoogleFirebaseAppdistroV1alphaDeviceExecutionResponse',
    'GoogleFirebaseAppdistroV1alphaLoginCredentialFieldHintsResponse',
    'GoogleFirebaseAppdistroV1alphaLoginCredentialResponse',
    'GoogleFirebaseAppdistroV1alphaRoboStatsResponse',
    'GoogleFirebaseAppdistroV1alphaTestDeviceResponse',
]

@pulumi.output_type
class GoogleFirebaseAppdistroV1alphaAppCrashResponse(dict):
    """
    An app crash that occurred during an automated test.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stackTrace":
            suggest = "stack_trace"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleFirebaseAppdistroV1alphaAppCrashResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleFirebaseAppdistroV1alphaAppCrashResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleFirebaseAppdistroV1alphaAppCrashResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 message: str,
                 stack_trace: str):
        """
        An app crash that occurred during an automated test.
        :param str message: The message associated with the crash.
        :param str stack_trace: The raw stack trace.
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "stack_trace", stack_trace)

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        The message associated with the crash.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="stackTrace")
    def stack_trace(self) -> str:
        """
        The raw stack trace.
        """
        return pulumi.get(self, "stack_trace")


@pulumi.output_type
class GoogleFirebaseAppdistroV1alphaDeviceExecutionResponse(dict):
    """
    The results of running an automated test on a particular device.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appCrash":
            suggest = "app_crash"
        elif key == "crawlGraphUri":
            suggest = "crawl_graph_uri"
        elif key == "failedReason":
            suggest = "failed_reason"
        elif key == "inconclusiveReason":
            suggest = "inconclusive_reason"
        elif key == "resultsStoragePath":
            suggest = "results_storage_path"
        elif key == "roboStats":
            suggest = "robo_stats"
        elif key == "screenshotUris":
            suggest = "screenshot_uris"
        elif key == "videoUri":
            suggest = "video_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleFirebaseAppdistroV1alphaDeviceExecutionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleFirebaseAppdistroV1alphaDeviceExecutionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleFirebaseAppdistroV1alphaDeviceExecutionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_crash: 'outputs.GoogleFirebaseAppdistroV1alphaAppCrashResponse',
                 crawl_graph_uri: str,
                 device: 'outputs.GoogleFirebaseAppdistroV1alphaTestDeviceResponse',
                 failed_reason: str,
                 inconclusive_reason: str,
                 results_storage_path: str,
                 robo_stats: 'outputs.GoogleFirebaseAppdistroV1alphaRoboStatsResponse',
                 screenshot_uris: Sequence[str],
                 state: str,
                 video_uri: str):
        """
        The results of running an automated test on a particular device.
        :param 'GoogleFirebaseAppdistroV1alphaAppCrashResponse' app_crash: An app crash, if any occurred during the test.
        :param str crawl_graph_uri: A URI to an image of the Robo crawl graph.
        :param 'GoogleFirebaseAppdistroV1alphaTestDeviceResponse' device: The device that the test was run on.
        :param str failed_reason: The reason why the test failed.
        :param str inconclusive_reason: The reason why the test was inconclusive.
        :param str results_storage_path: The path to a directory in Cloud Storage that will eventually contain the results for this execution. For example, gs://bucket/Nexus5-18-en-portrait.
        :param 'GoogleFirebaseAppdistroV1alphaRoboStatsResponse' robo_stats: The statistics collected during the Robo test.
        :param Sequence[str] screenshot_uris: A list of screenshot image URIs taken from the Robo crawl. The file names are numbered by the order in which they were taken.
        :param str state: The state of the test.
        :param str video_uri: A URI to a video of the test run.
        """
        pulumi.set(__self__, "app_crash", app_crash)
        pulumi.set(__self__, "crawl_graph_uri", crawl_graph_uri)
        pulumi.set(__self__, "device", device)
        pulumi.set(__self__, "failed_reason", failed_reason)
        pulumi.set(__self__, "inconclusive_reason", inconclusive_reason)
        pulumi.set(__self__, "results_storage_path", results_storage_path)
        pulumi.set(__self__, "robo_stats", robo_stats)
        pulumi.set(__self__, "screenshot_uris", screenshot_uris)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "video_uri", video_uri)

    @property
    @pulumi.getter(name="appCrash")
    def app_crash(self) -> 'outputs.GoogleFirebaseAppdistroV1alphaAppCrashResponse':
        """
        An app crash, if any occurred during the test.
        """
        return pulumi.get(self, "app_crash")

    @property
    @pulumi.getter(name="crawlGraphUri")
    def crawl_graph_uri(self) -> str:
        """
        A URI to an image of the Robo crawl graph.
        """
        return pulumi.get(self, "crawl_graph_uri")

    @property
    @pulumi.getter
    def device(self) -> 'outputs.GoogleFirebaseAppdistroV1alphaTestDeviceResponse':
        """
        The device that the test was run on.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="failedReason")
    def failed_reason(self) -> str:
        """
        The reason why the test failed.
        """
        return pulumi.get(self, "failed_reason")

    @property
    @pulumi.getter(name="inconclusiveReason")
    def inconclusive_reason(self) -> str:
        """
        The reason why the test was inconclusive.
        """
        return pulumi.get(self, "inconclusive_reason")

    @property
    @pulumi.getter(name="resultsStoragePath")
    def results_storage_path(self) -> str:
        """
        The path to a directory in Cloud Storage that will eventually contain the results for this execution. For example, gs://bucket/Nexus5-18-en-portrait.
        """
        return pulumi.get(self, "results_storage_path")

    @property
    @pulumi.getter(name="roboStats")
    def robo_stats(self) -> 'outputs.GoogleFirebaseAppdistroV1alphaRoboStatsResponse':
        """
        The statistics collected during the Robo test.
        """
        return pulumi.get(self, "robo_stats")

    @property
    @pulumi.getter(name="screenshotUris")
    def screenshot_uris(self) -> Sequence[str]:
        """
        A list of screenshot image URIs taken from the Robo crawl. The file names are numbered by the order in which they were taken.
        """
        return pulumi.get(self, "screenshot_uris")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the test.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="videoUri")
    def video_uri(self) -> str:
        """
        A URI to a video of the test run.
        """
        return pulumi.get(self, "video_uri")


@pulumi.output_type
class GoogleFirebaseAppdistroV1alphaLoginCredentialFieldHintsResponse(dict):
    """
    Hints to the crawler for identifying input fields
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passwordResourceName":
            suggest = "password_resource_name"
        elif key == "usernameResourceName":
            suggest = "username_resource_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleFirebaseAppdistroV1alphaLoginCredentialFieldHintsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleFirebaseAppdistroV1alphaLoginCredentialFieldHintsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleFirebaseAppdistroV1alphaLoginCredentialFieldHintsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password_resource_name: str,
                 username_resource_name: str):
        """
        Hints to the crawler for identifying input fields
        :param str password_resource_name: The Android resource name of the password UI element. For example, in Java: R.string.foo in xml: @string/foo Only the "foo" part is needed. Reference doc: https://developer.android.com/guide/topics/resources/accessing-resources.html
        :param str username_resource_name: The Android resource name of the username UI element. For example, in Java: R.string.foo in xml: @string/foo Only the "foo" part is needed. Reference doc: https://developer.android.com/guide/topics/resources/accessing-resources.html
        """
        pulumi.set(__self__, "password_resource_name", password_resource_name)
        pulumi.set(__self__, "username_resource_name", username_resource_name)

    @property
    @pulumi.getter(name="passwordResourceName")
    def password_resource_name(self) -> str:
        """
        The Android resource name of the password UI element. For example, in Java: R.string.foo in xml: @string/foo Only the "foo" part is needed. Reference doc: https://developer.android.com/guide/topics/resources/accessing-resources.html
        """
        return pulumi.get(self, "password_resource_name")

    @property
    @pulumi.getter(name="usernameResourceName")
    def username_resource_name(self) -> str:
        """
        The Android resource name of the username UI element. For example, in Java: R.string.foo in xml: @string/foo Only the "foo" part is needed. Reference doc: https://developer.android.com/guide/topics/resources/accessing-resources.html
        """
        return pulumi.get(self, "username_resource_name")


@pulumi.output_type
class GoogleFirebaseAppdistroV1alphaLoginCredentialResponse(dict):
    """
    Login credential for automated tests
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldHints":
            suggest = "field_hints"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleFirebaseAppdistroV1alphaLoginCredentialResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleFirebaseAppdistroV1alphaLoginCredentialResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleFirebaseAppdistroV1alphaLoginCredentialResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_hints: 'outputs.GoogleFirebaseAppdistroV1alphaLoginCredentialFieldHintsResponse',
                 google: bool,
                 password: str,
                 username: str):
        """
        Login credential for automated tests
        :param 'GoogleFirebaseAppdistroV1alphaLoginCredentialFieldHintsResponse' field_hints: Optional. Hints to the crawler for identifying input fields
        :param bool google: Optional. Are these credentials for Google?
        :param str password: Optional. Password for automated tests
        :param str username: Optional. Username for automated tests
        """
        pulumi.set(__self__, "field_hints", field_hints)
        pulumi.set(__self__, "google", google)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="fieldHints")
    def field_hints(self) -> 'outputs.GoogleFirebaseAppdistroV1alphaLoginCredentialFieldHintsResponse':
        """
        Optional. Hints to the crawler for identifying input fields
        """
        return pulumi.get(self, "field_hints")

    @property
    @pulumi.getter
    def google(self) -> bool:
        """
        Optional. Are these credentials for Google?
        """
        return pulumi.get(self, "google")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Optional. Password for automated tests
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Optional. Username for automated tests
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GoogleFirebaseAppdistroV1alphaRoboStatsResponse(dict):
    """
    Statistics collected during a Robo test.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionsPerformed":
            suggest = "actions_performed"
        elif key == "crawlDuration":
            suggest = "crawl_duration"
        elif key == "distinctVisitedScreens":
            suggest = "distinct_visited_screens"
        elif key == "mainActivityCrawlTimedOut":
            suggest = "main_activity_crawl_timed_out"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GoogleFirebaseAppdistroV1alphaRoboStatsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GoogleFirebaseAppdistroV1alphaRoboStatsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GoogleFirebaseAppdistroV1alphaRoboStatsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions_performed: int,
                 crawl_duration: str,
                 distinct_visited_screens: int,
                 main_activity_crawl_timed_out: bool):
        """
        Statistics collected during a Robo test.
        :param int actions_performed: Number of actions that crawler performed.
        :param str crawl_duration: Duration of crawl.
        :param int distinct_visited_screens: Number of distinct screens visited.
        :param bool main_activity_crawl_timed_out: Whether the main activity crawl timed out.
        """
        pulumi.set(__self__, "actions_performed", actions_performed)
        pulumi.set(__self__, "crawl_duration", crawl_duration)
        pulumi.set(__self__, "distinct_visited_screens", distinct_visited_screens)
        pulumi.set(__self__, "main_activity_crawl_timed_out", main_activity_crawl_timed_out)

    @property
    @pulumi.getter(name="actionsPerformed")
    def actions_performed(self) -> int:
        """
        Number of actions that crawler performed.
        """
        return pulumi.get(self, "actions_performed")

    @property
    @pulumi.getter(name="crawlDuration")
    def crawl_duration(self) -> str:
        """
        Duration of crawl.
        """
        return pulumi.get(self, "crawl_duration")

    @property
    @pulumi.getter(name="distinctVisitedScreens")
    def distinct_visited_screens(self) -> int:
        """
        Number of distinct screens visited.
        """
        return pulumi.get(self, "distinct_visited_screens")

    @property
    @pulumi.getter(name="mainActivityCrawlTimedOut")
    def main_activity_crawl_timed_out(self) -> bool:
        """
        Whether the main activity crawl timed out.
        """
        return pulumi.get(self, "main_activity_crawl_timed_out")


@pulumi.output_type
class GoogleFirebaseAppdistroV1alphaTestDeviceResponse(dict):
    """
    A device on which automated tests can be run.
    """
    def __init__(__self__, *,
                 locale: str,
                 model: str,
                 orientation: str,
                 version: str):
        """
        A device on which automated tests can be run.
        :param str locale: Optional. The locale of the device (e.g. "en_US" for US English) during the test.
        :param str model: The device model.
        :param str orientation: Optional. The orientation of the device during the test.
        :param str version: The version of the device (API level on Android).
        """
        pulumi.set(__self__, "locale", locale)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "orientation", orientation)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def locale(self) -> str:
        """
        Optional. The locale of the device (e.g. "en_US" for US English) during the test.
        """
        return pulumi.get(self, "locale")

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        The device model.
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def orientation(self) -> str:
        """
        Optional. The orientation of the device during the test.
        """
        return pulumi.get(self, "orientation")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the device (API level on Android).
        """
        return pulumi.get(self, "version")


