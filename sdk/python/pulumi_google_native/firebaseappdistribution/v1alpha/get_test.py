# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetTestResult',
    'AwaitableGetTestResult',
    'get_test',
    'get_test_output',
]

@pulumi.output_type
class GetTestResult:
    def __init__(__self__, create_time=None, device_executions=None, login_credential=None, name=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if device_executions and not isinstance(device_executions, list):
            raise TypeError("Expected argument 'device_executions' to be a list")
        pulumi.set(__self__, "device_executions", device_executions)
        if login_credential and not isinstance(login_credential, dict):
            raise TypeError("Expected argument 'login_credential' to be a dict")
        pulumi.set(__self__, "login_credential", login_credential)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Timestamp when the test was run.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deviceExecutions")
    def device_executions(self) -> Sequence['outputs.GoogleFirebaseAppdistroV1alphaDeviceExecutionResponse']:
        """
        The results of the test on each device.
        """
        return pulumi.get(self, "device_executions")

    @property
    @pulumi.getter(name="loginCredential")
    def login_credential(self) -> 'outputs.GoogleFirebaseAppdistroV1alphaLoginCredentialResponse':
        """
        Optional. Input only. Login credentials for the test. Input only.
        """
        return pulumi.get(self, "login_credential")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the release test resource. Format: `projects/{project_number}/apps/{app_id}/releases/{release_id}/tests/{test_id}`
        """
        return pulumi.get(self, "name")


class AwaitableGetTestResult(GetTestResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTestResult(
            create_time=self.create_time,
            device_executions=self.device_executions,
            login_credential=self.login_credential,
            name=self.name)


def get_test(app_id: Optional[str] = None,
             project: Optional[str] = None,
             release_id: Optional[str] = None,
             test_id: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTestResult:
    """
    Get results for automated test run on release.
    """
    __args__ = dict()
    __args__['appId'] = app_id
    __args__['project'] = project
    __args__['releaseId'] = release_id
    __args__['testId'] = test_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:firebaseappdistribution/v1alpha:getTest', __args__, opts=opts, typ=GetTestResult).value

    return AwaitableGetTestResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        device_executions=pulumi.get(__ret__, 'device_executions'),
        login_credential=pulumi.get(__ret__, 'login_credential'),
        name=pulumi.get(__ret__, 'name'))


@_utilities.lift_output_func(get_test)
def get_test_output(app_id: Optional[pulumi.Input[str]] = None,
                    project: Optional[pulumi.Input[Optional[str]]] = None,
                    release_id: Optional[pulumi.Input[str]] = None,
                    test_id: Optional[pulumi.Input[str]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTestResult]:
    """
    Get results for automated test run on release.
    """
    ...
