# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetOrgPolicyViolationsPreviewResult',
    'AwaitableGetOrgPolicyViolationsPreviewResult',
    'get_org_policy_violations_preview',
    'get_org_policy_violations_preview_output',
]

@pulumi.output_type
class GetOrgPolicyViolationsPreviewResult:
    def __init__(__self__, create_time=None, custom_constraints=None, name=None, overlay=None, resource_counts=None, state=None, violations_count=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if custom_constraints and not isinstance(custom_constraints, list):
            raise TypeError("Expected argument 'custom_constraints' to be a list")
        pulumi.set(__self__, "custom_constraints", custom_constraints)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if overlay and not isinstance(overlay, dict):
            raise TypeError("Expected argument 'overlay' to be a dict")
        pulumi.set(__self__, "overlay", overlay)
        if resource_counts and not isinstance(resource_counts, dict):
            raise TypeError("Expected argument 'resource_counts' to be a dict")
        pulumi.set(__self__, "resource_counts", resource_counts)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if violations_count and not isinstance(violations_count, int):
            raise TypeError("Expected argument 'violations_count' to be a int")
        pulumi.set(__self__, "violations_count", violations_count)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Time when this `OrgPolicyViolationsPreview` was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="customConstraints")
    def custom_constraints(self) -> Sequence[str]:
        """
        The names of the constraints against which all `OrgPolicyViolations` were evaluated. If `OrgPolicyOverlay` only contains `PolicyOverlay` then it contains the name of the configured custom constraint, applicable to the specified policies. Otherwise it contains the name of the constraint specified in `CustomConstraintOverlay`. Format: `organizations/{organization_id}/customConstraints/{custom_constraint_id}` Example: `organizations/123/customConstraints/custom.createOnlyE2TypeVms`
        """
        return pulumi.get(self, "custom_constraints")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name of the `OrgPolicyViolationsPreview`. It has the following format: `organizations/{organization}/locations/{location}/orgPolicyViolationsPreviews/{orgPolicyViolationsPreview}` Example: `organizations/my-example-org/locations/global/orgPolicyViolationsPreviews/506a5f7f`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def overlay(self) -> 'outputs.GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayResponse':
        """
        The proposed changes we are previewing violations for.
        """
        return pulumi.get(self, "overlay")

    @property
    @pulumi.getter(name="resourceCounts")
    def resource_counts(self) -> 'outputs.GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCountsResponse':
        """
        A summary of the state of all resources scanned for compliance with the changed OrgPolicy.
        """
        return pulumi.get(self, "resource_counts")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the `OrgPolicyViolationsPreview`.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="violationsCount")
    def violations_count(self) -> int:
        """
        The number of OrgPolicyViolations in this `OrgPolicyViolationsPreview`. This count may differ from `resource_summary.noncompliant_count` because each OrgPolicyViolation is specific to a resource **and** constraint. If there are multiple constraints being evaluated (i.e. multiple policies in the overlay), a single resource may violate multiple constraints.
        """
        return pulumi.get(self, "violations_count")


class AwaitableGetOrgPolicyViolationsPreviewResult(GetOrgPolicyViolationsPreviewResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOrgPolicyViolationsPreviewResult(
            create_time=self.create_time,
            custom_constraints=self.custom_constraints,
            name=self.name,
            overlay=self.overlay,
            resource_counts=self.resource_counts,
            state=self.state,
            violations_count=self.violations_count)


def get_org_policy_violations_preview(location: Optional[str] = None,
                                      org_policy_violations_preview_id: Optional[str] = None,
                                      organization_id: Optional[str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOrgPolicyViolationsPreviewResult:
    """
    GetOrgPolicyViolationsPreview gets the specified OrgPolicyViolationsPreview. Each OrgPolicyViolationsPreview is available for at least 7 days.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['orgPolicyViolationsPreviewId'] = org_policy_violations_preview_id
    __args__['organizationId'] = organization_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:policysimulator/v1beta:getOrgPolicyViolationsPreview', __args__, opts=opts, typ=GetOrgPolicyViolationsPreviewResult).value

    return AwaitableGetOrgPolicyViolationsPreviewResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        custom_constraints=pulumi.get(__ret__, 'custom_constraints'),
        name=pulumi.get(__ret__, 'name'),
        overlay=pulumi.get(__ret__, 'overlay'),
        resource_counts=pulumi.get(__ret__, 'resource_counts'),
        state=pulumi.get(__ret__, 'state'),
        violations_count=pulumi.get(__ret__, 'violations_count'))


@_utilities.lift_output_func(get_org_policy_violations_preview)
def get_org_policy_violations_preview_output(location: Optional[pulumi.Input[str]] = None,
                                             org_policy_violations_preview_id: Optional[pulumi.Input[str]] = None,
                                             organization_id: Optional[pulumi.Input[str]] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetOrgPolicyViolationsPreviewResult]:
    """
    GetOrgPolicyViolationsPreview gets the specified OrgPolicyViolationsPreview. Each OrgPolicyViolationsPreview is available for at least 7 days.
    """
    ...
