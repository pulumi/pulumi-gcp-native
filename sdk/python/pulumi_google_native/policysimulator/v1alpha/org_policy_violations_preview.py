# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['OrgPolicyViolationsPreviewArgs', 'OrgPolicyViolationsPreview']

@pulumi.input_type
class OrgPolicyViolationsPreviewArgs:
    def __init__(__self__, *,
                 organization_id: pulumi.Input[str],
                 overlay: pulumi.Input['GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlayArgs'],
                 location: Optional[pulumi.Input[str]] = None,
                 org_policy_violations_preview_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a OrgPolicyViolationsPreview resource.
        :param pulumi.Input['GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlayArgs'] overlay: The proposed changes we are previewing violations for.
        :param pulumi.Input[str] org_policy_violations_preview_id: Optional. An optional user-specified ID for the OrgPolicyViolationsPreview. If not provided, a random ID will be generated.
        """
        pulumi.set(__self__, "organization_id", organization_id)
        pulumi.set(__self__, "overlay", overlay)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if org_policy_violations_preview_id is not None:
            pulumi.set(__self__, "org_policy_violations_preview_id", org_policy_violations_preview_id)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter
    def overlay(self) -> pulumi.Input['GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlayArgs']:
        """
        The proposed changes we are previewing violations for.
        """
        return pulumi.get(self, "overlay")

    @overlay.setter
    def overlay(self, value: pulumi.Input['GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlayArgs']):
        pulumi.set(self, "overlay", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="orgPolicyViolationsPreviewId")
    def org_policy_violations_preview_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. An optional user-specified ID for the OrgPolicyViolationsPreview. If not provided, a random ID will be generated.
        """
        return pulumi.get(self, "org_policy_violations_preview_id")

    @org_policy_violations_preview_id.setter
    def org_policy_violations_preview_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_policy_violations_preview_id", value)


class OrgPolicyViolationsPreview(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 org_policy_violations_preview_id: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 overlay: Optional[pulumi.Input[pulumi.InputType['GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlayArgs']]] = None,
                 __props__=None):
        """
        CreateOrgPolicyViolationsPreview creates an OrgPolicyViolationsPreview for the proposed changes in the provided OrgPolicyViolationsPreview.OrgPolicyOverlay. The changes to OrgPolicy are specified by this `OrgPolicyOverlay`. The resources to scan are inferred from these specified changes.
        Auto-naming is currently not supported for this resource.
        Note - this resource's API doesn't support deletion. When deleted, the resource will persist
        on Google Cloud even though it will be deleted from Pulumi state.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] org_policy_violations_preview_id: Optional. An optional user-specified ID for the OrgPolicyViolationsPreview. If not provided, a random ID will be generated.
        :param pulumi.Input[pulumi.InputType['GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlayArgs']] overlay: The proposed changes we are previewing violations for.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OrgPolicyViolationsPreviewArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        CreateOrgPolicyViolationsPreview creates an OrgPolicyViolationsPreview for the proposed changes in the provided OrgPolicyViolationsPreview.OrgPolicyOverlay. The changes to OrgPolicy are specified by this `OrgPolicyOverlay`. The resources to scan are inferred from these specified changes.
        Auto-naming is currently not supported for this resource.
        Note - this resource's API doesn't support deletion. When deleted, the resource will persist
        on Google Cloud even though it will be deleted from Pulumi state.

        :param str resource_name: The name of the resource.
        :param OrgPolicyViolationsPreviewArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrgPolicyViolationsPreviewArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 org_policy_violations_preview_id: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 overlay: Optional[pulumi.Input[pulumi.InputType['GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlayArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrgPolicyViolationsPreviewArgs.__new__(OrgPolicyViolationsPreviewArgs)

            __props__.__dict__["location"] = location
            __props__.__dict__["org_policy_violations_preview_id"] = org_policy_violations_preview_id
            if organization_id is None and not opts.urn:
                raise TypeError("Missing required property 'organization_id'")
            __props__.__dict__["organization_id"] = organization_id
            if overlay is None and not opts.urn:
                raise TypeError("Missing required property 'overlay'")
            __props__.__dict__["overlay"] = overlay
            __props__.__dict__["create_time"] = None
            __props__.__dict__["custom_constraints"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["resource_counts"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["violations_count"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["location", "organization_id"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(OrgPolicyViolationsPreview, __self__).__init__(
            'google-native:policysimulator/v1alpha:OrgPolicyViolationsPreview',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'OrgPolicyViolationsPreview':
        """
        Get an existing OrgPolicyViolationsPreview resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = OrgPolicyViolationsPreviewArgs.__new__(OrgPolicyViolationsPreviewArgs)

        __props__.__dict__["create_time"] = None
        __props__.__dict__["custom_constraints"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["org_policy_violations_preview_id"] = None
        __props__.__dict__["organization_id"] = None
        __props__.__dict__["overlay"] = None
        __props__.__dict__["resource_counts"] = None
        __props__.__dict__["state"] = None
        __props__.__dict__["violations_count"] = None
        return OrgPolicyViolationsPreview(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Time when this `OrgPolicyViolationsPreview` was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="customConstraints")
    def custom_constraints(self) -> pulumi.Output[Sequence[str]]:
        """
        The names of the constraints against which all `OrgPolicyViolations` were evaluated. If `OrgPolicyOverlay` only contains `PolicyOverlay` then it contains the name of the configured custom constraint, applicable to the specified policies. Otherwise it contains the name of the constraint specified in `CustomConstraintOverlay`. Format: `organizations/{organization_id}/customConstraints/{custom_constraint_id}` Example: `organizations/123/customConstraints/custom.createOnlyE2TypeVms`
        """
        return pulumi.get(self, "custom_constraints")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The resource name of the `OrgPolicyViolationsPreview`. It has the following format: `organizations/{organization}/locations/{location}/orgPolicyViolationsPreviews/{orgPolicyViolationsPreview}` Example: `organizations/my-example-org/locations/global/orgPolicyViolationsPreviews/506a5f7f`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgPolicyViolationsPreviewId")
    def org_policy_violations_preview_id(self) -> pulumi.Output[Optional[str]]:
        """
        Optional. An optional user-specified ID for the OrgPolicyViolationsPreview. If not provided, a random ID will be generated.
        """
        return pulumi.get(self, "org_policy_violations_preview_id")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter
    def overlay(self) -> pulumi.Output['outputs.GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlayResponse']:
        """
        The proposed changes we are previewing violations for.
        """
        return pulumi.get(self, "overlay")

    @property
    @pulumi.getter(name="resourceCounts")
    def resource_counts(self) -> pulumi.Output['outputs.GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreviewResourceCountsResponse']:
        """
        A summary of the state of all resources scanned for compliance with the changed OrgPolicy.
        """
        return pulumi.get(self, "resource_counts")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The state of the `OrgPolicyViolationsPreview`.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="violationsCount")
    def violations_count(self) -> pulumi.Output[int]:
        """
        The number of OrgPolicyViolations in this `OrgPolicyViolationsPreview`. This count may differ from `resource_summary.noncompliant_count` because each OrgPolicyViolation is specific to a resource **and** constraint. If there are multiple constraints being evaluated (i.e. multiple policies in the overlay), a single resource may violate multiple constraints.
        """
        return pulumi.get(self, "violations_count")

