# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetCustomTargetTypeResult',
    'AwaitableGetCustomTargetTypeResult',
    'get_custom_target_type',
    'get_custom_target_type_output',
]

@pulumi.output_type
class GetCustomTargetTypeResult:
    def __init__(__self__, annotations=None, create_time=None, custom_actions=None, custom_target_type_id=None, description=None, etag=None, labels=None, name=None, uid=None, update_time=None):
        if annotations and not isinstance(annotations, dict):
            raise TypeError("Expected argument 'annotations' to be a dict")
        pulumi.set(__self__, "annotations", annotations)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if custom_actions and not isinstance(custom_actions, dict):
            raise TypeError("Expected argument 'custom_actions' to be a dict")
        pulumi.set(__self__, "custom_actions", custom_actions)
        if custom_target_type_id and not isinstance(custom_target_type_id, str):
            raise TypeError("Expected argument 'custom_target_type_id' to be a str")
        pulumi.set(__self__, "custom_target_type_id", custom_target_type_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if uid and not isinstance(uid, str):
            raise TypeError("Expected argument 'uid' to be a str")
        pulumi.set(__self__, "uid", uid)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def annotations(self) -> Mapping[str, str]:
        """
        Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Time at which the `CustomTargetType` was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="customActions")
    def custom_actions(self) -> 'outputs.CustomTargetSkaffoldActionsResponse':
        """
        Configures render and deploy for the `CustomTargetType` using Skaffold custom actions.
        """
        return pulumi.get(self, "custom_actions")

    @property
    @pulumi.getter(name="customTargetTypeId")
    def custom_target_type_id(self) -> str:
        """
        Resource id of the `CustomTargetType`.
        """
        return pulumi.get(self, "custom_target_type_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. Description of the `CustomTargetType`. Max length is 255 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        Optional. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Optional. Name of the `CustomTargetType`. Format is `projects/{project}/locations/{location}/customTargetTypes/a-z{0,62}`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uid(self) -> str:
        """
        Unique identifier of the `CustomTargetType`.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Most recent time at which the `CustomTargetType` was updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetCustomTargetTypeResult(GetCustomTargetTypeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCustomTargetTypeResult(
            annotations=self.annotations,
            create_time=self.create_time,
            custom_actions=self.custom_actions,
            custom_target_type_id=self.custom_target_type_id,
            description=self.description,
            etag=self.etag,
            labels=self.labels,
            name=self.name,
            uid=self.uid,
            update_time=self.update_time)


def get_custom_target_type(custom_target_type_id: Optional[str] = None,
                           location: Optional[str] = None,
                           project: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCustomTargetTypeResult:
    """
    Gets details of a single CustomTargetType.
    """
    __args__ = dict()
    __args__['customTargetTypeId'] = custom_target_type_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:clouddeploy/v1:getCustomTargetType', __args__, opts=opts, typ=GetCustomTargetTypeResult).value

    return AwaitableGetCustomTargetTypeResult(
        annotations=pulumi.get(__ret__, 'annotations'),
        create_time=pulumi.get(__ret__, 'create_time'),
        custom_actions=pulumi.get(__ret__, 'custom_actions'),
        custom_target_type_id=pulumi.get(__ret__, 'custom_target_type_id'),
        description=pulumi.get(__ret__, 'description'),
        etag=pulumi.get(__ret__, 'etag'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        uid=pulumi.get(__ret__, 'uid'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_custom_target_type)
def get_custom_target_type_output(custom_target_type_id: Optional[pulumi.Input[str]] = None,
                                  location: Optional[pulumi.Input[str]] = None,
                                  project: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCustomTargetTypeResult]:
    """
    Gets details of a single CustomTargetType.
    """
    ...
