# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'AuditConfigArgs',
    'AuditLogConfigArgs',
    'AwsAccessRoleArgs',
    'AwsPropertiesArgs',
    'AzurePropertiesArgs',
    'BindingArgs',
    'CloudResourcePropertiesArgs',
    'CloudSpannerPropertiesArgs',
    'CloudSqlCredentialArgs',
    'CloudSqlPropertiesArgs',
    'ConnectorConfigurationAuthenticationArgs',
    'ConnectorConfigurationEndpointArgs',
    'ConnectorConfigurationSecretArgs',
    'ConnectorConfigurationUsernamePasswordArgs',
    'ConnectorConfigurationArgs',
    'ExprArgs',
    'MetastoreServiceConfigArgs',
    'SalesforceDataCloudPropertiesArgs',
    'SparkHistoryServerConfigArgs',
    'SparkPropertiesArgs',
]

@pulumi.input_type
class AuditConfigArgs:
    def __init__(__self__, *,
                 audit_log_configs: Optional[pulumi.Input[Sequence[pulumi.Input['AuditLogConfigArgs']]]] = None,
                 service: Optional[pulumi.Input[str]] = None):
        """
        Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
        :param pulumi.Input[Sequence[pulumi.Input['AuditLogConfigArgs']]] audit_log_configs: The configuration for logging of each type of permission.
        :param pulumi.Input[str] service: Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
        """
        if audit_log_configs is not None:
            pulumi.set(__self__, "audit_log_configs", audit_log_configs)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="auditLogConfigs")
    def audit_log_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuditLogConfigArgs']]]]:
        """
        The configuration for logging of each type of permission.
        """
        return pulumi.get(self, "audit_log_configs")

    @audit_log_configs.setter
    def audit_log_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuditLogConfigArgs']]]]):
        pulumi.set(self, "audit_log_configs", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class AuditLogConfigArgs:
    def __init__(__self__, *,
                 exempted_members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 log_type: Optional[pulumi.Input['AuditLogConfigLogType']] = None):
        """
        Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exempted_members: Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
        :param pulumi.Input['AuditLogConfigLogType'] log_type: The log type that this config enables.
        """
        if exempted_members is not None:
            pulumi.set(__self__, "exempted_members", exempted_members)
        if log_type is not None:
            pulumi.set(__self__, "log_type", log_type)

    @property
    @pulumi.getter(name="exemptedMembers")
    def exempted_members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
        """
        return pulumi.get(self, "exempted_members")

    @exempted_members.setter
    def exempted_members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exempted_members", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> Optional[pulumi.Input['AuditLogConfigLogType']]:
        """
        The log type that this config enables.
        """
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: Optional[pulumi.Input['AuditLogConfigLogType']]):
        pulumi.set(self, "log_type", value)


@pulumi.input_type
class AwsAccessRoleArgs:
    def __init__(__self__, *,
                 iam_role_id: Optional[pulumi.Input[str]] = None,
                 identity: Optional[pulumi.Input[str]] = None):
        """
        Authentication method for Amazon Web Services (AWS) that uses Google owned Google service account to assume into customer's AWS IAM Role.
        :param pulumi.Input[str] iam_role_id: The user’s AWS IAM Role that trusts the Google-owned AWS IAM user Connection.
        :param pulumi.Input[str] identity: A unique Google-owned and Google-generated identity for the Connection. This identity will be used to access the user's AWS IAM Role.
        """
        if iam_role_id is not None:
            pulumi.set(__self__, "iam_role_id", iam_role_id)
        if identity is not None:
            pulumi.set(__self__, "identity", identity)

    @property
    @pulumi.getter(name="iamRoleId")
    def iam_role_id(self) -> Optional[pulumi.Input[str]]:
        """
        The user’s AWS IAM Role that trusts the Google-owned AWS IAM user Connection.
        """
        return pulumi.get(self, "iam_role_id")

    @iam_role_id.setter
    def iam_role_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iam_role_id", value)

    @property
    @pulumi.getter
    def identity(self) -> Optional[pulumi.Input[str]]:
        """
        A unique Google-owned and Google-generated identity for the Connection. This identity will be used to access the user's AWS IAM Role.
        """
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity", value)


@pulumi.input_type
class AwsPropertiesArgs:
    def __init__(__self__, *,
                 access_role: Optional[pulumi.Input['AwsAccessRoleArgs']] = None):
        """
        Connection properties specific to Amazon Web Services (AWS).
        :param pulumi.Input['AwsAccessRoleArgs'] access_role: Authentication using Google owned service account to assume into customer's AWS IAM Role.
        """
        if access_role is not None:
            pulumi.set(__self__, "access_role", access_role)

    @property
    @pulumi.getter(name="accessRole")
    def access_role(self) -> Optional[pulumi.Input['AwsAccessRoleArgs']]:
        """
        Authentication using Google owned service account to assume into customer's AWS IAM Role.
        """
        return pulumi.get(self, "access_role")

    @access_role.setter
    def access_role(self, value: Optional[pulumi.Input['AwsAccessRoleArgs']]):
        pulumi.set(self, "access_role", value)


@pulumi.input_type
class AzurePropertiesArgs:
    def __init__(__self__, *,
                 customer_tenant_id: Optional[pulumi.Input[str]] = None,
                 federated_application_client_id: Optional[pulumi.Input[str]] = None,
                 redirect_uri: Optional[pulumi.Input[str]] = None):
        """
        Container for connection properties specific to Azure.
        :param pulumi.Input[str] customer_tenant_id: The id of customer's directory that host the data.
        :param pulumi.Input[str] federated_application_client_id: The client ID of the user's Azure Active Directory Application used for a federated connection.
        :param pulumi.Input[str] redirect_uri: The URL user will be redirected to after granting consent during connection setup.
        """
        if customer_tenant_id is not None:
            pulumi.set(__self__, "customer_tenant_id", customer_tenant_id)
        if federated_application_client_id is not None:
            pulumi.set(__self__, "federated_application_client_id", federated_application_client_id)
        if redirect_uri is not None:
            pulumi.set(__self__, "redirect_uri", redirect_uri)

    @property
    @pulumi.getter(name="customerTenantId")
    def customer_tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of customer's directory that host the data.
        """
        return pulumi.get(self, "customer_tenant_id")

    @customer_tenant_id.setter
    def customer_tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_tenant_id", value)

    @property
    @pulumi.getter(name="federatedApplicationClientId")
    def federated_application_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        The client ID of the user's Azure Active Directory Application used for a federated connection.
        """
        return pulumi.get(self, "federated_application_client_id")

    @federated_application_client_id.setter
    def federated_application_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "federated_application_client_id", value)

    @property
    @pulumi.getter(name="redirectUri")
    def redirect_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The URL user will be redirected to after granting consent during connection setup.
        """
        return pulumi.get(self, "redirect_uri")

    @redirect_uri.setter
    def redirect_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_uri", value)


@pulumi.input_type
class BindingArgs:
    def __init__(__self__, *,
                 condition: Optional[pulumi.Input['ExprArgs']] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 role: Optional[pulumi.Input[str]] = None):
        """
        Associates `members`, or principals, with a `role`.
        :param pulumi.Input['ExprArgs'] condition: The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] members: Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
        :param pulumi.Input[str] role: Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM roles and permissions, see the [IAM documentation](https://cloud.google.com/iam/docs/roles-overview). For a list of the available pre-defined roles, see [here](https://cloud.google.com/iam/docs/understanding-roles).
        """
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input['ExprArgs']]:
        """
        The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input['ExprArgs']]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM roles and permissions, see the [IAM documentation](https://cloud.google.com/iam/docs/roles-overview). For a list of the available pre-defined roles, see [here](https://cloud.google.com/iam/docs/understanding-roles).
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class CloudResourcePropertiesArgs:
    def __init__(__self__):
        """
        Container for connection properties for delegation of access to GCP resources.
        """
        pass


@pulumi.input_type
class CloudSpannerPropertiesArgs:
    def __init__(__self__, *,
                 database: Optional[pulumi.Input[str]] = None,
                 database_role: Optional[pulumi.Input[str]] = None,
                 max_parallelism: Optional[pulumi.Input[int]] = None,
                 use_data_boost: Optional[pulumi.Input[bool]] = None,
                 use_parallelism: Optional[pulumi.Input[bool]] = None,
                 use_serverless_analytics: Optional[pulumi.Input[bool]] = None):
        """
        Connection properties specific to Cloud Spanner.
        :param pulumi.Input[str] database: Cloud Spanner database in the form `project/instance/database'
        :param pulumi.Input[str] database_role: Optional. Cloud Spanner database role for fine-grained access control. The Cloud Spanner admin should have provisioned the database role with appropriate permissions, such as `SELECT` and `INSERT`. Other users should only use roles provided by their Cloud Spanner admins. For more details, see [About fine-grained access control] (https://cloud.google.com/spanner/docs/fgac-about). REQUIRES: The database role name must start with a letter, and can only contain letters, numbers, and underscores.
        :param pulumi.Input[int] max_parallelism: Allows setting max parallelism per query when executing on Spanner independent compute resources. If unspecified, default values of parallelism are chosen that are dependent on the Cloud Spanner instance configuration. REQUIRES: `use_parallelism` must be set. REQUIRES: `use_data_boost` must be set.
        :param pulumi.Input[bool] use_data_boost: If set, the request will be executed via Spanner independent compute resources. REQUIRES: `use_parallelism` must be set.
        :param pulumi.Input[bool] use_parallelism: If parallelism should be used when reading from Cloud Spanner
        :param pulumi.Input[bool] use_serverless_analytics: Deprecated: prefer use_data_boost instead. If the serverless analytics service should be used to read data from Cloud Spanner. Note: `use_parallelism` must be set when using serverless analytics.
        """
        if database is not None:
            pulumi.set(__self__, "database", database)
        if database_role is not None:
            pulumi.set(__self__, "database_role", database_role)
        if max_parallelism is not None:
            pulumi.set(__self__, "max_parallelism", max_parallelism)
        if use_data_boost is not None:
            pulumi.set(__self__, "use_data_boost", use_data_boost)
        if use_parallelism is not None:
            pulumi.set(__self__, "use_parallelism", use_parallelism)
        if use_serverless_analytics is not None:
            warnings.warn("""Deprecated: prefer use_data_boost instead. If the serverless analytics service should be used to read data from Cloud Spanner. Note: `use_parallelism` must be set when using serverless analytics.""", DeprecationWarning)
            pulumi.log.warn("""use_serverless_analytics is deprecated: Deprecated: prefer use_data_boost instead. If the serverless analytics service should be used to read data from Cloud Spanner. Note: `use_parallelism` must be set when using serverless analytics.""")
        if use_serverless_analytics is not None:
            pulumi.set(__self__, "use_serverless_analytics", use_serverless_analytics)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud Spanner database in the form `project/instance/database'
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="databaseRole")
    def database_role(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Cloud Spanner database role for fine-grained access control. The Cloud Spanner admin should have provisioned the database role with appropriate permissions, such as `SELECT` and `INSERT`. Other users should only use roles provided by their Cloud Spanner admins. For more details, see [About fine-grained access control] (https://cloud.google.com/spanner/docs/fgac-about). REQUIRES: The database role name must start with a letter, and can only contain letters, numbers, and underscores.
        """
        return pulumi.get(self, "database_role")

    @database_role.setter
    def database_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_role", value)

    @property
    @pulumi.getter(name="maxParallelism")
    def max_parallelism(self) -> Optional[pulumi.Input[int]]:
        """
        Allows setting max parallelism per query when executing on Spanner independent compute resources. If unspecified, default values of parallelism are chosen that are dependent on the Cloud Spanner instance configuration. REQUIRES: `use_parallelism` must be set. REQUIRES: `use_data_boost` must be set.
        """
        return pulumi.get(self, "max_parallelism")

    @max_parallelism.setter
    def max_parallelism(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_parallelism", value)

    @property
    @pulumi.getter(name="useDataBoost")
    def use_data_boost(self) -> Optional[pulumi.Input[bool]]:
        """
        If set, the request will be executed via Spanner independent compute resources. REQUIRES: `use_parallelism` must be set.
        """
        return pulumi.get(self, "use_data_boost")

    @use_data_boost.setter
    def use_data_boost(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_data_boost", value)

    @property
    @pulumi.getter(name="useParallelism")
    def use_parallelism(self) -> Optional[pulumi.Input[bool]]:
        """
        If parallelism should be used when reading from Cloud Spanner
        """
        return pulumi.get(self, "use_parallelism")

    @use_parallelism.setter
    def use_parallelism(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_parallelism", value)

    @property
    @pulumi.getter(name="useServerlessAnalytics")
    def use_serverless_analytics(self) -> Optional[pulumi.Input[bool]]:
        """
        Deprecated: prefer use_data_boost instead. If the serverless analytics service should be used to read data from Cloud Spanner. Note: `use_parallelism` must be set when using serverless analytics.
        """
        warnings.warn("""Deprecated: prefer use_data_boost instead. If the serverless analytics service should be used to read data from Cloud Spanner. Note: `use_parallelism` must be set when using serverless analytics.""", DeprecationWarning)
        pulumi.log.warn("""use_serverless_analytics is deprecated: Deprecated: prefer use_data_boost instead. If the serverless analytics service should be used to read data from Cloud Spanner. Note: `use_parallelism` must be set when using serverless analytics.""")

        return pulumi.get(self, "use_serverless_analytics")

    @use_serverless_analytics.setter
    def use_serverless_analytics(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_serverless_analytics", value)


@pulumi.input_type
class CloudSqlCredentialArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Credential info for the Cloud SQL.
        :param pulumi.Input[str] password: The password for the credential.
        :param pulumi.Input[str] username: The username for the credential.
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password for the credential.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The username for the credential.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class CloudSqlPropertiesArgs:
    def __init__(__self__, *,
                 credential: Optional[pulumi.Input['CloudSqlCredentialArgs']] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input['CloudSqlPropertiesType']] = None):
        """
        Connection properties specific to the Cloud SQL.
        :param pulumi.Input['CloudSqlCredentialArgs'] credential: Input only. Cloud SQL credential.
        :param pulumi.Input[str] database: Database name.
        :param pulumi.Input[str] instance_id: Cloud SQL instance ID in the form `project:location:instance`.
        :param pulumi.Input['CloudSqlPropertiesType'] type: Type of the Cloud SQL database.
        """
        if credential is not None:
            pulumi.set(__self__, "credential", credential)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def credential(self) -> Optional[pulumi.Input['CloudSqlCredentialArgs']]:
        """
        Input only. Cloud SQL credential.
        """
        return pulumi.get(self, "credential")

    @credential.setter
    def credential(self, value: Optional[pulumi.Input['CloudSqlCredentialArgs']]):
        pulumi.set(self, "credential", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        """
        Database name.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud SQL instance ID in the form `project:location:instance`.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['CloudSqlPropertiesType']]:
        """
        Type of the Cloud SQL database.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['CloudSqlPropertiesType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ConnectorConfigurationAuthenticationArgs:
    def __init__(__self__, *,
                 username_password: Optional[pulumi.Input['ConnectorConfigurationUsernamePasswordArgs']] = None):
        """
        Client authentication.
        :param pulumi.Input['ConnectorConfigurationUsernamePasswordArgs'] username_password: Username/password authentication.
        """
        if username_password is not None:
            pulumi.set(__self__, "username_password", username_password)

    @property
    @pulumi.getter(name="usernamePassword")
    def username_password(self) -> Optional[pulumi.Input['ConnectorConfigurationUsernamePasswordArgs']]:
        """
        Username/password authentication.
        """
        return pulumi.get(self, "username_password")

    @username_password.setter
    def username_password(self, value: Optional[pulumi.Input['ConnectorConfigurationUsernamePasswordArgs']]):
        pulumi.set(self, "username_password", value)


@pulumi.input_type
class ConnectorConfigurationEndpointArgs:
    def __init__(__self__, *,
                 host_port: Optional[pulumi.Input[str]] = None):
        """
        Remote endpoint specification.
        :param pulumi.Input[str] host_port: Host and port in a format of `hostname:port` as defined in https://www.ietf.org/rfc/rfc3986.html#section-3.2.2 and https://www.ietf.org/rfc/rfc3986.html#section-3.2.3.
        """
        if host_port is not None:
            pulumi.set(__self__, "host_port", host_port)

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[pulumi.Input[str]]:
        """
        Host and port in a format of `hostname:port` as defined in https://www.ietf.org/rfc/rfc3986.html#section-3.2.2 and https://www.ietf.org/rfc/rfc3986.html#section-3.2.3.
        """
        return pulumi.get(self, "host_port")

    @host_port.setter
    def host_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_port", value)


@pulumi.input_type
class ConnectorConfigurationSecretArgs:
    def __init__(__self__, *,
                 plaintext: Optional[pulumi.Input[str]] = None):
        """
        Secret value parameter.
        :param pulumi.Input[str] plaintext: Input only. Secret as plaintext.
        """
        if plaintext is not None:
            pulumi.set(__self__, "plaintext", plaintext)

    @property
    @pulumi.getter
    def plaintext(self) -> Optional[pulumi.Input[str]]:
        """
        Input only. Secret as plaintext.
        """
        return pulumi.get(self, "plaintext")

    @plaintext.setter
    def plaintext(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plaintext", value)


@pulumi.input_type
class ConnectorConfigurationUsernamePasswordArgs:
    def __init__(__self__, *,
                 password: pulumi.Input['ConnectorConfigurationSecretArgs'],
                 username: pulumi.Input[str]):
        """
        Username and Password authentication.
        :param pulumi.Input['ConnectorConfigurationSecretArgs'] password: Password.
        :param pulumi.Input[str] username: Username.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input['ConnectorConfigurationSecretArgs']:
        """
        Password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input['ConnectorConfigurationSecretArgs']):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        Username.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ConnectorConfigurationArgs:
    def __init__(__self__, *,
                 connector_id: pulumi.Input[str],
                 authentication: Optional[pulumi.Input['ConnectorConfigurationAuthenticationArgs']] = None,
                 endpoint: Optional[pulumi.Input['ConnectorConfigurationEndpointArgs']] = None):
        """
        Represents concrete parameter values for Connector Configuration.
        :param pulumi.Input[str] connector_id: Immutable. The ID of the Connector these parameters are configured for.
        :param pulumi.Input['ConnectorConfigurationAuthenticationArgs'] authentication: Client authentication.
        :param pulumi.Input['ConnectorConfigurationEndpointArgs'] endpoint: Specifies how to reach the remote system this connection is pointing to.
        """
        pulumi.set(__self__, "connector_id", connector_id)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> pulumi.Input[str]:
        """
        Immutable. The ID of the Connector these parameters are configured for.
        """
        return pulumi.get(self, "connector_id")

    @connector_id.setter
    def connector_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "connector_id", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['ConnectorConfigurationAuthenticationArgs']]:
        """
        Client authentication.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['ConnectorConfigurationAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input['ConnectorConfigurationEndpointArgs']]:
        """
        Specifies how to reach the remote system this connection is pointing to.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input['ConnectorConfigurationEndpointArgs']]):
        pulumi.set(self, "endpoint", value)


@pulumi.input_type
class ExprArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 expression: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
        :param pulumi.Input[str] description: Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        :param pulumi.Input[str] expression: Textual representation of an expression in Common Expression Language syntax.
        :param pulumi.Input[str] location: Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        :param pulumi.Input[str] title: Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class MetastoreServiceConfigArgs:
    def __init__(__self__, *,
                 metastore_service: Optional[pulumi.Input[str]] = None):
        """
        Configuration of the Dataproc Metastore Service.
        :param pulumi.Input[str] metastore_service: Optional. Resource name of an existing Dataproc Metastore service. Example: * `projects/[project_id]/locations/[region]/services/[service_id]`
        """
        if metastore_service is not None:
            pulumi.set(__self__, "metastore_service", metastore_service)

    @property
    @pulumi.getter(name="metastoreService")
    def metastore_service(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Resource name of an existing Dataproc Metastore service. Example: * `projects/[project_id]/locations/[region]/services/[service_id]`
        """
        return pulumi.get(self, "metastore_service")

    @metastore_service.setter
    def metastore_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metastore_service", value)


@pulumi.input_type
class SalesforceDataCloudPropertiesArgs:
    def __init__(__self__, *,
                 instance_uri: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        """
        Connection properties specific to Salesforce DataCloud. This is intended for use only by Salesforce partner projects.
        :param pulumi.Input[str] instance_uri: The URL to the user's Salesforce DataCloud instance.
        :param pulumi.Input[str] tenant_id: The ID of the user's Salesforce tenant.
        """
        if instance_uri is not None:
            pulumi.set(__self__, "instance_uri", instance_uri)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="instanceUri")
    def instance_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The URL to the user's Salesforce DataCloud instance.
        """
        return pulumi.get(self, "instance_uri")

    @instance_uri.setter
    def instance_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_uri", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the user's Salesforce tenant.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class SparkHistoryServerConfigArgs:
    def __init__(__self__, *,
                 dataproc_cluster: Optional[pulumi.Input[str]] = None):
        """
        Configuration of the Spark History Server.
        :param pulumi.Input[str] dataproc_cluster: Optional. Resource name of an existing Dataproc Cluster to act as a Spark History Server for the connection. Example: * `projects/[project_id]/regions/[region]/clusters/[cluster_name]`
        """
        if dataproc_cluster is not None:
            pulumi.set(__self__, "dataproc_cluster", dataproc_cluster)

    @property
    @pulumi.getter(name="dataprocCluster")
    def dataproc_cluster(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Resource name of an existing Dataproc Cluster to act as a Spark History Server for the connection. Example: * `projects/[project_id]/regions/[region]/clusters/[cluster_name]`
        """
        return pulumi.get(self, "dataproc_cluster")

    @dataproc_cluster.setter
    def dataproc_cluster(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataproc_cluster", value)


@pulumi.input_type
class SparkPropertiesArgs:
    def __init__(__self__, *,
                 metastore_service_config: Optional[pulumi.Input['MetastoreServiceConfigArgs']] = None,
                 spark_history_server_config: Optional[pulumi.Input['SparkHistoryServerConfigArgs']] = None):
        """
        Container for connection properties to execute stored procedures for Apache Spark.
        :param pulumi.Input['MetastoreServiceConfigArgs'] metastore_service_config: Optional. Dataproc Metastore Service configuration for the connection.
        :param pulumi.Input['SparkHistoryServerConfigArgs'] spark_history_server_config: Optional. Spark History Server configuration for the connection.
        """
        if metastore_service_config is not None:
            pulumi.set(__self__, "metastore_service_config", metastore_service_config)
        if spark_history_server_config is not None:
            pulumi.set(__self__, "spark_history_server_config", spark_history_server_config)

    @property
    @pulumi.getter(name="metastoreServiceConfig")
    def metastore_service_config(self) -> Optional[pulumi.Input['MetastoreServiceConfigArgs']]:
        """
        Optional. Dataproc Metastore Service configuration for the connection.
        """
        return pulumi.get(self, "metastore_service_config")

    @metastore_service_config.setter
    def metastore_service_config(self, value: Optional[pulumi.Input['MetastoreServiceConfigArgs']]):
        pulumi.set(self, "metastore_service_config", value)

    @property
    @pulumi.getter(name="sparkHistoryServerConfig")
    def spark_history_server_config(self) -> Optional[pulumi.Input['SparkHistoryServerConfigArgs']]:
        """
        Optional. Spark History Server configuration for the connection.
        """
        return pulumi.get(self, "spark_history_server_config")

    @spark_history_server_config.setter
    def spark_history_server_config(self, value: Optional[pulumi.Input['SparkHistoryServerConfigArgs']]):
        pulumi.set(self, "spark_history_server_config", value)


