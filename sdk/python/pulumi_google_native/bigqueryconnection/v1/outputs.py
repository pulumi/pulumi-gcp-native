# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AuditConfigResponse',
    'AuditLogConfigResponse',
    'AwsAccessRoleResponse',
    'AwsPropertiesResponse',
    'AzurePropertiesResponse',
    'BindingResponse',
    'CloudResourcePropertiesResponse',
    'CloudSpannerPropertiesResponse',
    'CloudSqlCredentialResponse',
    'CloudSqlPropertiesResponse',
    'ConnectorConfigurationAuthenticationResponse',
    'ConnectorConfigurationEndpointResponse',
    'ConnectorConfigurationResponse',
    'ConnectorConfigurationSecretResponse',
    'ConnectorConfigurationUsernamePasswordResponse',
    'ExprResponse',
    'MetastoreServiceConfigResponse',
    'SalesforceDataCloudPropertiesResponse',
    'SparkHistoryServerConfigResponse',
    'SparkPropertiesResponse',
]

@pulumi.output_type
class AuditConfigResponse(dict):
    """
    Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditLogConfigs":
            suggest = "audit_log_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_log_configs: Sequence['outputs.AuditLogConfigResponse'],
                 service: str):
        """
        Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
        :param Sequence['AuditLogConfigResponse'] audit_log_configs: The configuration for logging of each type of permission.
        :param str service: Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
        """
        pulumi.set(__self__, "audit_log_configs", audit_log_configs)
        pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="auditLogConfigs")
    def audit_log_configs(self) -> Sequence['outputs.AuditLogConfigResponse']:
        """
        The configuration for logging of each type of permission.
        """
        return pulumi.get(self, "audit_log_configs")

    @property
    @pulumi.getter
    def service(self) -> str:
        """
        Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
        """
        return pulumi.get(self, "service")


@pulumi.output_type
class AuditLogConfigResponse(dict):
    """
    Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exemptedMembers":
            suggest = "exempted_members"
        elif key == "logType":
            suggest = "log_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditLogConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditLogConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditLogConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exempted_members: Sequence[str],
                 log_type: str):
        """
        Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
        :param Sequence[str] exempted_members: Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
        :param str log_type: The log type that this config enables.
        """
        pulumi.set(__self__, "exempted_members", exempted_members)
        pulumi.set(__self__, "log_type", log_type)

    @property
    @pulumi.getter(name="exemptedMembers")
    def exempted_members(self) -> Sequence[str]:
        """
        Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
        """
        return pulumi.get(self, "exempted_members")

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> str:
        """
        The log type that this config enables.
        """
        return pulumi.get(self, "log_type")


@pulumi.output_type
class AwsAccessRoleResponse(dict):
    """
    Authentication method for Amazon Web Services (AWS) that uses Google owned Google service account to assume into customer's AWS IAM Role.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iamRoleId":
            suggest = "iam_role_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AwsAccessRoleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AwsAccessRoleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AwsAccessRoleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 iam_role_id: str,
                 identity: str):
        """
        Authentication method for Amazon Web Services (AWS) that uses Google owned Google service account to assume into customer's AWS IAM Role.
        :param str iam_role_id: The user’s AWS IAM Role that trusts the Google-owned AWS IAM user Connection.
        :param str identity: A unique Google-owned and Google-generated identity for the Connection. This identity will be used to access the user's AWS IAM Role.
        """
        pulumi.set(__self__, "iam_role_id", iam_role_id)
        pulumi.set(__self__, "identity", identity)

    @property
    @pulumi.getter(name="iamRoleId")
    def iam_role_id(self) -> str:
        """
        The user’s AWS IAM Role that trusts the Google-owned AWS IAM user Connection.
        """
        return pulumi.get(self, "iam_role_id")

    @property
    @pulumi.getter
    def identity(self) -> str:
        """
        A unique Google-owned and Google-generated identity for the Connection. This identity will be used to access the user's AWS IAM Role.
        """
        return pulumi.get(self, "identity")


@pulumi.output_type
class AwsPropertiesResponse(dict):
    """
    Connection properties specific to Amazon Web Services (AWS).
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessRole":
            suggest = "access_role"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AwsPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AwsPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AwsPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_role: 'outputs.AwsAccessRoleResponse'):
        """
        Connection properties specific to Amazon Web Services (AWS).
        :param 'AwsAccessRoleResponse' access_role: Authentication using Google owned service account to assume into customer's AWS IAM Role.
        """
        pulumi.set(__self__, "access_role", access_role)

    @property
    @pulumi.getter(name="accessRole")
    def access_role(self) -> 'outputs.AwsAccessRoleResponse':
        """
        Authentication using Google owned service account to assume into customer's AWS IAM Role.
        """
        return pulumi.get(self, "access_role")


@pulumi.output_type
class AzurePropertiesResponse(dict):
    """
    Container for connection properties specific to Azure.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "customerTenantId":
            suggest = "customer_tenant_id"
        elif key == "federatedApplicationClientId":
            suggest = "federated_application_client_id"
        elif key == "objectId":
            suggest = "object_id"
        elif key == "redirectUri":
            suggest = "redirect_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzurePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzurePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzurePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application: str,
                 client_id: str,
                 customer_tenant_id: str,
                 federated_application_client_id: str,
                 identity: str,
                 object_id: str,
                 redirect_uri: str):
        """
        Container for connection properties specific to Azure.
        :param str application: The name of the Azure Active Directory Application.
        :param str client_id: The client id of the Azure Active Directory Application.
        :param str customer_tenant_id: The id of customer's directory that host the data.
        :param str federated_application_client_id: The client ID of the user's Azure Active Directory Application used for a federated connection.
        :param str identity: A unique Google-owned and Google-generated identity for the Connection. This identity will be used to access the user's Azure Active Directory Application.
        :param str object_id: The object id of the Azure Active Directory Application.
        :param str redirect_uri: The URL user will be redirected to after granting consent during connection setup.
        """
        pulumi.set(__self__, "application", application)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "customer_tenant_id", customer_tenant_id)
        pulumi.set(__self__, "federated_application_client_id", federated_application_client_id)
        pulumi.set(__self__, "identity", identity)
        pulumi.set(__self__, "object_id", object_id)
        pulumi.set(__self__, "redirect_uri", redirect_uri)

    @property
    @pulumi.getter
    def application(self) -> str:
        """
        The name of the Azure Active Directory Application.
        """
        return pulumi.get(self, "application")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The client id of the Azure Active Directory Application.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="customerTenantId")
    def customer_tenant_id(self) -> str:
        """
        The id of customer's directory that host the data.
        """
        return pulumi.get(self, "customer_tenant_id")

    @property
    @pulumi.getter(name="federatedApplicationClientId")
    def federated_application_client_id(self) -> str:
        """
        The client ID of the user's Azure Active Directory Application used for a federated connection.
        """
        return pulumi.get(self, "federated_application_client_id")

    @property
    @pulumi.getter
    def identity(self) -> str:
        """
        A unique Google-owned and Google-generated identity for the Connection. This identity will be used to access the user's Azure Active Directory Application.
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> str:
        """
        The object id of the Azure Active Directory Application.
        """
        return pulumi.get(self, "object_id")

    @property
    @pulumi.getter(name="redirectUri")
    def redirect_uri(self) -> str:
        """
        The URL user will be redirected to after granting consent during connection setup.
        """
        return pulumi.get(self, "redirect_uri")


@pulumi.output_type
class BindingResponse(dict):
    """
    Associates `members`, or principals, with a `role`.
    """
    def __init__(__self__, *,
                 condition: 'outputs.ExprResponse',
                 members: Sequence[str],
                 role: str):
        """
        Associates `members`, or principals, with a `role`.
        :param 'ExprResponse' condition: The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        :param Sequence[str] members: Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
        :param str role: Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM roles and permissions, see the [IAM documentation](https://cloud.google.com/iam/docs/roles-overview). For a list of the available pre-defined roles, see [here](https://cloud.google.com/iam/docs/understanding-roles).
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "members", members)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def condition(self) -> 'outputs.ExprResponse':
        """
        The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def members(self) -> Sequence[str]:
        """
        Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM roles and permissions, see the [IAM documentation](https://cloud.google.com/iam/docs/roles-overview). For a list of the available pre-defined roles, see [here](https://cloud.google.com/iam/docs/understanding-roles).
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class CloudResourcePropertiesResponse(dict):
    """
    Container for connection properties for delegation of access to GCP resources.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceAccountId":
            suggest = "service_account_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudResourcePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudResourcePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudResourcePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_account_id: str):
        """
        Container for connection properties for delegation of access to GCP resources.
        :param str service_account_id: The account ID of the service created for the purpose of this connection. The service account does not have any permissions associated with it when it is created. After creation, customers delegate permissions to the service account. When the connection is used in the context of an operation in BigQuery, the service account will be used to connect to the desired resources in GCP. The account ID is in the form of: @gcp-sa-bigquery-cloudresource.iam.gserviceaccount.com
        """
        pulumi.set(__self__, "service_account_id", service_account_id)

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> str:
        """
        The account ID of the service created for the purpose of this connection. The service account does not have any permissions associated with it when it is created. After creation, customers delegate permissions to the service account. When the connection is used in the context of an operation in BigQuery, the service account will be used to connect to the desired resources in GCP. The account ID is in the form of: @gcp-sa-bigquery-cloudresource.iam.gserviceaccount.com
        """
        return pulumi.get(self, "service_account_id")


@pulumi.output_type
class CloudSpannerPropertiesResponse(dict):
    """
    Connection properties specific to Cloud Spanner.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseRole":
            suggest = "database_role"
        elif key == "maxParallelism":
            suggest = "max_parallelism"
        elif key == "useDataBoost":
            suggest = "use_data_boost"
        elif key == "useParallelism":
            suggest = "use_parallelism"
        elif key == "useServerlessAnalytics":
            suggest = "use_serverless_analytics"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudSpannerPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudSpannerPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudSpannerPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: str,
                 database_role: str,
                 max_parallelism: int,
                 use_data_boost: bool,
                 use_parallelism: bool,
                 use_serverless_analytics: bool):
        """
        Connection properties specific to Cloud Spanner.
        :param str database: Cloud Spanner database in the form `project/instance/database'
        :param str database_role: Optional. Cloud Spanner database role for fine-grained access control. The Cloud Spanner admin should have provisioned the database role with appropriate permissions, such as `SELECT` and `INSERT`. Other users should only use roles provided by their Cloud Spanner admins. For more details, see [About fine-grained access control] (https://cloud.google.com/spanner/docs/fgac-about). REQUIRES: The database role name must start with a letter, and can only contain letters, numbers, and underscores.
        :param int max_parallelism: Allows setting max parallelism per query when executing on Spanner independent compute resources. If unspecified, default values of parallelism are chosen that are dependent on the Cloud Spanner instance configuration. REQUIRES: `use_parallelism` must be set. REQUIRES: `use_data_boost` must be set.
        :param bool use_data_boost: If set, the request will be executed via Spanner independent compute resources. REQUIRES: `use_parallelism` must be set.
        :param bool use_parallelism: If parallelism should be used when reading from Cloud Spanner
        :param bool use_serverless_analytics: Deprecated: prefer use_data_boost instead. If the serverless analytics service should be used to read data from Cloud Spanner. Note: `use_parallelism` must be set when using serverless analytics.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "database_role", database_role)
        pulumi.set(__self__, "max_parallelism", max_parallelism)
        pulumi.set(__self__, "use_data_boost", use_data_boost)
        pulumi.set(__self__, "use_parallelism", use_parallelism)
        pulumi.set(__self__, "use_serverless_analytics", use_serverless_analytics)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        Cloud Spanner database in the form `project/instance/database'
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="databaseRole")
    def database_role(self) -> str:
        """
        Optional. Cloud Spanner database role for fine-grained access control. The Cloud Spanner admin should have provisioned the database role with appropriate permissions, such as `SELECT` and `INSERT`. Other users should only use roles provided by their Cloud Spanner admins. For more details, see [About fine-grained access control] (https://cloud.google.com/spanner/docs/fgac-about). REQUIRES: The database role name must start with a letter, and can only contain letters, numbers, and underscores.
        """
        return pulumi.get(self, "database_role")

    @property
    @pulumi.getter(name="maxParallelism")
    def max_parallelism(self) -> int:
        """
        Allows setting max parallelism per query when executing on Spanner independent compute resources. If unspecified, default values of parallelism are chosen that are dependent on the Cloud Spanner instance configuration. REQUIRES: `use_parallelism` must be set. REQUIRES: `use_data_boost` must be set.
        """
        return pulumi.get(self, "max_parallelism")

    @property
    @pulumi.getter(name="useDataBoost")
    def use_data_boost(self) -> bool:
        """
        If set, the request will be executed via Spanner independent compute resources. REQUIRES: `use_parallelism` must be set.
        """
        return pulumi.get(self, "use_data_boost")

    @property
    @pulumi.getter(name="useParallelism")
    def use_parallelism(self) -> bool:
        """
        If parallelism should be used when reading from Cloud Spanner
        """
        return pulumi.get(self, "use_parallelism")

    @property
    @pulumi.getter(name="useServerlessAnalytics")
    def use_serverless_analytics(self) -> bool:
        """
        Deprecated: prefer use_data_boost instead. If the serverless analytics service should be used to read data from Cloud Spanner. Note: `use_parallelism` must be set when using serverless analytics.
        """
        warnings.warn("""Deprecated: prefer use_data_boost instead. If the serverless analytics service should be used to read data from Cloud Spanner. Note: `use_parallelism` must be set when using serverless analytics.""", DeprecationWarning)
        pulumi.log.warn("""use_serverless_analytics is deprecated: Deprecated: prefer use_data_boost instead. If the serverless analytics service should be used to read data from Cloud Spanner. Note: `use_parallelism` must be set when using serverless analytics.""")

        return pulumi.get(self, "use_serverless_analytics")


@pulumi.output_type
class CloudSqlCredentialResponse(dict):
    """
    Credential info for the Cloud SQL.
    """
    def __init__(__self__, *,
                 password: str,
                 username: str):
        """
        Credential info for the Cloud SQL.
        :param str password: The password for the credential.
        :param str username: The username for the credential.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password for the credential.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username for the credential.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class CloudSqlPropertiesResponse(dict):
    """
    Connection properties specific to the Cloud SQL.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"
        elif key == "serviceAccountId":
            suggest = "service_account_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudSqlPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudSqlPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudSqlPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential: 'outputs.CloudSqlCredentialResponse',
                 database: str,
                 instance_id: str,
                 service_account_id: str,
                 type: str):
        """
        Connection properties specific to the Cloud SQL.
        :param 'CloudSqlCredentialResponse' credential: Input only. Cloud SQL credential.
        :param str database: Database name.
        :param str instance_id: Cloud SQL instance ID in the form `project:location:instance`.
        :param str service_account_id: The account ID of the service used for the purpose of this connection. When the connection is used in the context of an operation in BigQuery, this service account will serve as the identity being used for connecting to the CloudSQL instance specified in this connection.
        :param str type: Type of the Cloud SQL database.
        """
        pulumi.set(__self__, "credential", credential)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "service_account_id", service_account_id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def credential(self) -> 'outputs.CloudSqlCredentialResponse':
        """
        Input only. Cloud SQL credential.
        """
        return pulumi.get(self, "credential")

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        Database name.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Cloud SQL instance ID in the form `project:location:instance`.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> str:
        """
        The account ID of the service used for the purpose of this connection. When the connection is used in the context of an operation in BigQuery, this service account will serve as the identity being used for connecting to the CloudSQL instance specified in this connection.
        """
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Cloud SQL database.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ConnectorConfigurationAuthenticationResponse(dict):
    """
    Client authentication.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "usernamePassword":
            suggest = "username_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectorConfigurationAuthenticationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectorConfigurationAuthenticationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectorConfigurationAuthenticationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 username_password: 'outputs.ConnectorConfigurationUsernamePasswordResponse'):
        """
        Client authentication.
        :param 'ConnectorConfigurationUsernamePasswordResponse' username_password: Username/password authentication.
        """
        pulumi.set(__self__, "username_password", username_password)

    @property
    @pulumi.getter(name="usernamePassword")
    def username_password(self) -> 'outputs.ConnectorConfigurationUsernamePasswordResponse':
        """
        Username/password authentication.
        """
        return pulumi.get(self, "username_password")


@pulumi.output_type
class ConnectorConfigurationEndpointResponse(dict):
    """
    Remote endpoint specification.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostPort":
            suggest = "host_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectorConfigurationEndpointResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectorConfigurationEndpointResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectorConfigurationEndpointResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_port: str):
        """
        Remote endpoint specification.
        :param str host_port: Host and port in a format of `hostname:port` as defined in https://www.ietf.org/rfc/rfc3986.html#section-3.2.2 and https://www.ietf.org/rfc/rfc3986.html#section-3.2.3.
        """
        pulumi.set(__self__, "host_port", host_port)

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> str:
        """
        Host and port in a format of `hostname:port` as defined in https://www.ietf.org/rfc/rfc3986.html#section-3.2.2 and https://www.ietf.org/rfc/rfc3986.html#section-3.2.3.
        """
        return pulumi.get(self, "host_port")


@pulumi.output_type
class ConnectorConfigurationResponse(dict):
    """
    Represents concrete parameter values for Connector Configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectorId":
            suggest = "connector_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectorConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectorConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectorConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication: 'outputs.ConnectorConfigurationAuthenticationResponse',
                 connector_id: str,
                 endpoint: 'outputs.ConnectorConfigurationEndpointResponse'):
        """
        Represents concrete parameter values for Connector Configuration.
        :param 'ConnectorConfigurationAuthenticationResponse' authentication: Client authentication.
        :param str connector_id: Immutable. The ID of the Connector these parameters are configured for.
        :param 'ConnectorConfigurationEndpointResponse' endpoint: Specifies how to reach the remote system this connection is pointing to.
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "connector_id", connector_id)
        pulumi.set(__self__, "endpoint", endpoint)

    @property
    @pulumi.getter
    def authentication(self) -> 'outputs.ConnectorConfigurationAuthenticationResponse':
        """
        Client authentication.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> str:
        """
        Immutable. The ID of the Connector these parameters are configured for.
        """
        return pulumi.get(self, "connector_id")

    @property
    @pulumi.getter
    def endpoint(self) -> 'outputs.ConnectorConfigurationEndpointResponse':
        """
        Specifies how to reach the remote system this connection is pointing to.
        """
        return pulumi.get(self, "endpoint")


@pulumi.output_type
class ConnectorConfigurationSecretResponse(dict):
    """
    Secret value parameter.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretType":
            suggest = "secret_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectorConfigurationSecretResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectorConfigurationSecretResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectorConfigurationSecretResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 plaintext: str,
                 secret_type: str):
        """
        Secret value parameter.
        :param str plaintext: Input only. Secret as plaintext.
        :param str secret_type: Indicates type of secret. Can be used to check type of stored secret value even if it's `INPUT_ONLY`.
        """
        pulumi.set(__self__, "plaintext", plaintext)
        pulumi.set(__self__, "secret_type", secret_type)

    @property
    @pulumi.getter
    def plaintext(self) -> str:
        """
        Input only. Secret as plaintext.
        """
        return pulumi.get(self, "plaintext")

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> str:
        """
        Indicates type of secret. Can be used to check type of stored secret value even if it's `INPUT_ONLY`.
        """
        return pulumi.get(self, "secret_type")


@pulumi.output_type
class ConnectorConfigurationUsernamePasswordResponse(dict):
    """
    Username and Password authentication.
    """
    def __init__(__self__, *,
                 password: 'outputs.ConnectorConfigurationSecretResponse',
                 username: str):
        """
        Username and Password authentication.
        :param 'ConnectorConfigurationSecretResponse' password: Password.
        :param str username: Username.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> 'outputs.ConnectorConfigurationSecretResponse':
        """
        Password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Username.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class ExprResponse(dict):
    """
    Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
    """
    def __init__(__self__, *,
                 description: str,
                 expression: str,
                 location: str,
                 title: str):
        """
        Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
        :param str description: Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        :param str expression: Textual representation of an expression in Common Expression Language syntax.
        :param str location: Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        :param str title: Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class MetastoreServiceConfigResponse(dict):
    """
    Configuration of the Dataproc Metastore Service.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metastoreService":
            suggest = "metastore_service"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetastoreServiceConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetastoreServiceConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetastoreServiceConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metastore_service: str):
        """
        Configuration of the Dataproc Metastore Service.
        :param str metastore_service: Optional. Resource name of an existing Dataproc Metastore service. Example: * `projects/[project_id]/locations/[region]/services/[service_id]`
        """
        pulumi.set(__self__, "metastore_service", metastore_service)

    @property
    @pulumi.getter(name="metastoreService")
    def metastore_service(self) -> str:
        """
        Optional. Resource name of an existing Dataproc Metastore service. Example: * `projects/[project_id]/locations/[region]/services/[service_id]`
        """
        return pulumi.get(self, "metastore_service")


@pulumi.output_type
class SalesforceDataCloudPropertiesResponse(dict):
    """
    Connection properties specific to Salesforce DataCloud. This is intended for use only by Salesforce partner projects.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceUri":
            suggest = "instance_uri"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SalesforceDataCloudPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SalesforceDataCloudPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SalesforceDataCloudPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 identity: str,
                 instance_uri: str,
                 tenant_id: str):
        """
        Connection properties specific to Salesforce DataCloud. This is intended for use only by Salesforce partner projects.
        :param str identity: A unique Google-owned and Google-generated service account identity for the connection.
        :param str instance_uri: The URL to the user's Salesforce DataCloud instance.
        :param str tenant_id: The ID of the user's Salesforce tenant.
        """
        pulumi.set(__self__, "identity", identity)
        pulumi.set(__self__, "instance_uri", instance_uri)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter
    def identity(self) -> str:
        """
        A unique Google-owned and Google-generated service account identity for the connection.
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter(name="instanceUri")
    def instance_uri(self) -> str:
        """
        The URL to the user's Salesforce DataCloud instance.
        """
        return pulumi.get(self, "instance_uri")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The ID of the user's Salesforce tenant.
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class SparkHistoryServerConfigResponse(dict):
    """
    Configuration of the Spark History Server.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataprocCluster":
            suggest = "dataproc_cluster"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SparkHistoryServerConfigResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SparkHistoryServerConfigResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SparkHistoryServerConfigResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataproc_cluster: str):
        """
        Configuration of the Spark History Server.
        :param str dataproc_cluster: Optional. Resource name of an existing Dataproc Cluster to act as a Spark History Server for the connection. Example: * `projects/[project_id]/regions/[region]/clusters/[cluster_name]`
        """
        pulumi.set(__self__, "dataproc_cluster", dataproc_cluster)

    @property
    @pulumi.getter(name="dataprocCluster")
    def dataproc_cluster(self) -> str:
        """
        Optional. Resource name of an existing Dataproc Cluster to act as a Spark History Server for the connection. Example: * `projects/[project_id]/regions/[region]/clusters/[cluster_name]`
        """
        return pulumi.get(self, "dataproc_cluster")


@pulumi.output_type
class SparkPropertiesResponse(dict):
    """
    Container for connection properties to execute stored procedures for Apache Spark.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metastoreServiceConfig":
            suggest = "metastore_service_config"
        elif key == "serviceAccountId":
            suggest = "service_account_id"
        elif key == "sparkHistoryServerConfig":
            suggest = "spark_history_server_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SparkPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SparkPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SparkPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metastore_service_config: 'outputs.MetastoreServiceConfigResponse',
                 service_account_id: str,
                 spark_history_server_config: 'outputs.SparkHistoryServerConfigResponse'):
        """
        Container for connection properties to execute stored procedures for Apache Spark.
        :param 'MetastoreServiceConfigResponse' metastore_service_config: Optional. Dataproc Metastore Service configuration for the connection.
        :param str service_account_id: The account ID of the service created for the purpose of this connection. The service account does not have any permissions associated with it when it is created. After creation, customers delegate permissions to the service account. When the connection is used in the context of a stored procedure for Apache Spark in BigQuery, the service account is used to connect to the desired resources in Google Cloud. The account ID is in the form of: bqcx--@gcp-sa-bigquery-consp.iam.gserviceaccount.com
        :param 'SparkHistoryServerConfigResponse' spark_history_server_config: Optional. Spark History Server configuration for the connection.
        """
        pulumi.set(__self__, "metastore_service_config", metastore_service_config)
        pulumi.set(__self__, "service_account_id", service_account_id)
        pulumi.set(__self__, "spark_history_server_config", spark_history_server_config)

    @property
    @pulumi.getter(name="metastoreServiceConfig")
    def metastore_service_config(self) -> 'outputs.MetastoreServiceConfigResponse':
        """
        Optional. Dataproc Metastore Service configuration for the connection.
        """
        return pulumi.get(self, "metastore_service_config")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> str:
        """
        The account ID of the service created for the purpose of this connection. The service account does not have any permissions associated with it when it is created. After creation, customers delegate permissions to the service account. When the connection is used in the context of a stored procedure for Apache Spark in BigQuery, the service account is used to connect to the desired resources in Google Cloud. The account ID is in the form of: bqcx--@gcp-sa-bigquery-consp.iam.gserviceaccount.com
        """
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter(name="sparkHistoryServerConfig")
    def spark_history_server_config(self) -> 'outputs.SparkHistoryServerConfigResponse':
        """
        Optional. Spark History Server configuration for the connection.
        """
        return pulumi.get(self, "spark_history_server_config")


