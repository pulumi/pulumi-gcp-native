# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['ConnectionArgs', 'Connection']

@pulumi.input_type
class ConnectionArgs:
    def __init__(__self__, *,
                 aws: Optional[pulumi.Input['AwsPropertiesArgs']] = None,
                 azure: Optional[pulumi.Input['AzurePropertiesArgs']] = None,
                 cloud_resource: Optional[pulumi.Input['CloudResourcePropertiesArgs']] = None,
                 cloud_spanner: Optional[pulumi.Input['CloudSpannerPropertiesArgs']] = None,
                 cloud_sql: Optional[pulumi.Input['CloudSqlPropertiesArgs']] = None,
                 configuration: Optional[pulumi.Input['ConnectorConfigurationArgs']] = None,
                 connection_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 kms_key_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 salesforce_data_cloud: Optional[pulumi.Input['SalesforceDataCloudPropertiesArgs']] = None,
                 spark: Optional[pulumi.Input['SparkPropertiesArgs']] = None):
        """
        The set of arguments for constructing a Connection resource.
        :param pulumi.Input['AwsPropertiesArgs'] aws: Amazon Web Services (AWS) properties.
        :param pulumi.Input['AzurePropertiesArgs'] azure: Azure properties.
        :param pulumi.Input['CloudResourcePropertiesArgs'] cloud_resource: Cloud Resource properties.
        :param pulumi.Input['CloudSpannerPropertiesArgs'] cloud_spanner: Cloud Spanner properties.
        :param pulumi.Input['CloudSqlPropertiesArgs'] cloud_sql: Cloud SQL properties.
        :param pulumi.Input['ConnectorConfigurationArgs'] configuration: Optional. Connector configuration.
        :param pulumi.Input[str] connection_id: Optional. Connection id that should be assigned to the created connection.
        :param pulumi.Input[str] description: User provided description.
        :param pulumi.Input[str] friendly_name: User provided display name for the connection.
        :param pulumi.Input[str] kms_key_name: Optional. The Cloud KMS key that is used for encryption. Example: `projects/[kms_project_id]/locations/[region]/keyRings/[key_region]/cryptoKeys/[key]`
        :param pulumi.Input['SalesforceDataCloudPropertiesArgs'] salesforce_data_cloud: Optional. Salesforce DataCloud properties. This field is intended for use only by Salesforce partner projects. This field contains properties for your Salesforce DataCloud connection.
        :param pulumi.Input['SparkPropertiesArgs'] spark: Spark properties.
        """
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if azure is not None:
            pulumi.set(__self__, "azure", azure)
        if cloud_resource is not None:
            pulumi.set(__self__, "cloud_resource", cloud_resource)
        if cloud_spanner is not None:
            pulumi.set(__self__, "cloud_spanner", cloud_spanner)
        if cloud_sql is not None:
            pulumi.set(__self__, "cloud_sql", cloud_sql)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if kms_key_name is not None:
            pulumi.set(__self__, "kms_key_name", kms_key_name)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if salesforce_data_cloud is not None:
            pulumi.set(__self__, "salesforce_data_cloud", salesforce_data_cloud)
        if spark is not None:
            pulumi.set(__self__, "spark", spark)

    @property
    @pulumi.getter
    def aws(self) -> Optional[pulumi.Input['AwsPropertiesArgs']]:
        """
        Amazon Web Services (AWS) properties.
        """
        return pulumi.get(self, "aws")

    @aws.setter
    def aws(self, value: Optional[pulumi.Input['AwsPropertiesArgs']]):
        pulumi.set(self, "aws", value)

    @property
    @pulumi.getter
    def azure(self) -> Optional[pulumi.Input['AzurePropertiesArgs']]:
        """
        Azure properties.
        """
        return pulumi.get(self, "azure")

    @azure.setter
    def azure(self, value: Optional[pulumi.Input['AzurePropertiesArgs']]):
        pulumi.set(self, "azure", value)

    @property
    @pulumi.getter(name="cloudResource")
    def cloud_resource(self) -> Optional[pulumi.Input['CloudResourcePropertiesArgs']]:
        """
        Cloud Resource properties.
        """
        return pulumi.get(self, "cloud_resource")

    @cloud_resource.setter
    def cloud_resource(self, value: Optional[pulumi.Input['CloudResourcePropertiesArgs']]):
        pulumi.set(self, "cloud_resource", value)

    @property
    @pulumi.getter(name="cloudSpanner")
    def cloud_spanner(self) -> Optional[pulumi.Input['CloudSpannerPropertiesArgs']]:
        """
        Cloud Spanner properties.
        """
        return pulumi.get(self, "cloud_spanner")

    @cloud_spanner.setter
    def cloud_spanner(self, value: Optional[pulumi.Input['CloudSpannerPropertiesArgs']]):
        pulumi.set(self, "cloud_spanner", value)

    @property
    @pulumi.getter(name="cloudSql")
    def cloud_sql(self) -> Optional[pulumi.Input['CloudSqlPropertiesArgs']]:
        """
        Cloud SQL properties.
        """
        return pulumi.get(self, "cloud_sql")

    @cloud_sql.setter
    def cloud_sql(self, value: Optional[pulumi.Input['CloudSqlPropertiesArgs']]):
        pulumi.set(self, "cloud_sql", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['ConnectorConfigurationArgs']]:
        """
        Optional. Connector configuration.
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['ConnectorConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Connection id that should be assigned to the created connection.
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        User provided description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        User provided display name for the connection.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. The Cloud KMS key that is used for encryption. Example: `projects/[kms_project_id]/locations/[region]/keyRings/[key_region]/cryptoKeys/[key]`
        """
        return pulumi.get(self, "kms_key_name")

    @kms_key_name.setter
    def kms_key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_name", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="salesforceDataCloud")
    def salesforce_data_cloud(self) -> Optional[pulumi.Input['SalesforceDataCloudPropertiesArgs']]:
        """
        Optional. Salesforce DataCloud properties. This field is intended for use only by Salesforce partner projects. This field contains properties for your Salesforce DataCloud connection.
        """
        return pulumi.get(self, "salesforce_data_cloud")

    @salesforce_data_cloud.setter
    def salesforce_data_cloud(self, value: Optional[pulumi.Input['SalesforceDataCloudPropertiesArgs']]):
        pulumi.set(self, "salesforce_data_cloud", value)

    @property
    @pulumi.getter
    def spark(self) -> Optional[pulumi.Input['SparkPropertiesArgs']]:
        """
        Spark properties.
        """
        return pulumi.get(self, "spark")

    @spark.setter
    def spark(self, value: Optional[pulumi.Input['SparkPropertiesArgs']]):
        pulumi.set(self, "spark", value)


class Connection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aws: Optional[pulumi.Input[pulumi.InputType['AwsPropertiesArgs']]] = None,
                 azure: Optional[pulumi.Input[pulumi.InputType['AzurePropertiesArgs']]] = None,
                 cloud_resource: Optional[pulumi.Input[pulumi.InputType['CloudResourcePropertiesArgs']]] = None,
                 cloud_spanner: Optional[pulumi.Input[pulumi.InputType['CloudSpannerPropertiesArgs']]] = None,
                 cloud_sql: Optional[pulumi.Input[pulumi.InputType['CloudSqlPropertiesArgs']]] = None,
                 configuration: Optional[pulumi.Input[pulumi.InputType['ConnectorConfigurationArgs']]] = None,
                 connection_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 kms_key_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 salesforce_data_cloud: Optional[pulumi.Input[pulumi.InputType['SalesforceDataCloudPropertiesArgs']]] = None,
                 spark: Optional[pulumi.Input[pulumi.InputType['SparkPropertiesArgs']]] = None,
                 __props__=None):
        """
        Creates a new connection.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['AwsPropertiesArgs']] aws: Amazon Web Services (AWS) properties.
        :param pulumi.Input[pulumi.InputType['AzurePropertiesArgs']] azure: Azure properties.
        :param pulumi.Input[pulumi.InputType['CloudResourcePropertiesArgs']] cloud_resource: Cloud Resource properties.
        :param pulumi.Input[pulumi.InputType['CloudSpannerPropertiesArgs']] cloud_spanner: Cloud Spanner properties.
        :param pulumi.Input[pulumi.InputType['CloudSqlPropertiesArgs']] cloud_sql: Cloud SQL properties.
        :param pulumi.Input[pulumi.InputType['ConnectorConfigurationArgs']] configuration: Optional. Connector configuration.
        :param pulumi.Input[str] connection_id: Optional. Connection id that should be assigned to the created connection.
        :param pulumi.Input[str] description: User provided description.
        :param pulumi.Input[str] friendly_name: User provided display name for the connection.
        :param pulumi.Input[str] kms_key_name: Optional. The Cloud KMS key that is used for encryption. Example: `projects/[kms_project_id]/locations/[region]/keyRings/[key_region]/cryptoKeys/[key]`
        :param pulumi.Input[pulumi.InputType['SalesforceDataCloudPropertiesArgs']] salesforce_data_cloud: Optional. Salesforce DataCloud properties. This field is intended for use only by Salesforce partner projects. This field contains properties for your Salesforce DataCloud connection.
        :param pulumi.Input[pulumi.InputType['SparkPropertiesArgs']] spark: Spark properties.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ConnectionArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a new connection.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param ConnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aws: Optional[pulumi.Input[pulumi.InputType['AwsPropertiesArgs']]] = None,
                 azure: Optional[pulumi.Input[pulumi.InputType['AzurePropertiesArgs']]] = None,
                 cloud_resource: Optional[pulumi.Input[pulumi.InputType['CloudResourcePropertiesArgs']]] = None,
                 cloud_spanner: Optional[pulumi.Input[pulumi.InputType['CloudSpannerPropertiesArgs']]] = None,
                 cloud_sql: Optional[pulumi.Input[pulumi.InputType['CloudSqlPropertiesArgs']]] = None,
                 configuration: Optional[pulumi.Input[pulumi.InputType['ConnectorConfigurationArgs']]] = None,
                 connection_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 kms_key_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 salesforce_data_cloud: Optional[pulumi.Input[pulumi.InputType['SalesforceDataCloudPropertiesArgs']]] = None,
                 spark: Optional[pulumi.Input[pulumi.InputType['SparkPropertiesArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConnectionArgs.__new__(ConnectionArgs)

            __props__.__dict__["aws"] = aws
            __props__.__dict__["azure"] = azure
            __props__.__dict__["cloud_resource"] = cloud_resource
            __props__.__dict__["cloud_spanner"] = cloud_spanner
            __props__.__dict__["cloud_sql"] = cloud_sql
            __props__.__dict__["configuration"] = configuration
            __props__.__dict__["connection_id"] = connection_id
            __props__.__dict__["description"] = description
            __props__.__dict__["friendly_name"] = friendly_name
            __props__.__dict__["kms_key_name"] = kms_key_name
            __props__.__dict__["location"] = location
            __props__.__dict__["project"] = project
            __props__.__dict__["salesforce_data_cloud"] = salesforce_data_cloud
            __props__.__dict__["spark"] = spark
            __props__.__dict__["creation_time"] = None
            __props__.__dict__["has_credential"] = None
            __props__.__dict__["last_modified_time"] = None
            __props__.__dict__["name"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["location", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Connection, __self__).__init__(
            'google-native:bigqueryconnection/v1:Connection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Connection':
        """
        Get an existing Connection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ConnectionArgs.__new__(ConnectionArgs)

        __props__.__dict__["aws"] = None
        __props__.__dict__["azure"] = None
        __props__.__dict__["cloud_resource"] = None
        __props__.__dict__["cloud_spanner"] = None
        __props__.__dict__["cloud_sql"] = None
        __props__.__dict__["configuration"] = None
        __props__.__dict__["connection_id"] = None
        __props__.__dict__["creation_time"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["friendly_name"] = None
        __props__.__dict__["has_credential"] = None
        __props__.__dict__["kms_key_name"] = None
        __props__.__dict__["last_modified_time"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["salesforce_data_cloud"] = None
        __props__.__dict__["spark"] = None
        return Connection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def aws(self) -> pulumi.Output['outputs.AwsPropertiesResponse']:
        """
        Amazon Web Services (AWS) properties.
        """
        return pulumi.get(self, "aws")

    @property
    @pulumi.getter
    def azure(self) -> pulumi.Output['outputs.AzurePropertiesResponse']:
        """
        Azure properties.
        """
        return pulumi.get(self, "azure")

    @property
    @pulumi.getter(name="cloudResource")
    def cloud_resource(self) -> pulumi.Output['outputs.CloudResourcePropertiesResponse']:
        """
        Cloud Resource properties.
        """
        return pulumi.get(self, "cloud_resource")

    @property
    @pulumi.getter(name="cloudSpanner")
    def cloud_spanner(self) -> pulumi.Output['outputs.CloudSpannerPropertiesResponse']:
        """
        Cloud Spanner properties.
        """
        return pulumi.get(self, "cloud_spanner")

    @property
    @pulumi.getter(name="cloudSql")
    def cloud_sql(self) -> pulumi.Output['outputs.CloudSqlPropertiesResponse']:
        """
        Cloud SQL properties.
        """
        return pulumi.get(self, "cloud_sql")

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Output['outputs.ConnectorConfigurationResponse']:
        """
        Optional. Connector configuration.
        """
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Output[Optional[str]]:
        """
        Optional. Connection id that should be assigned to the created connection.
        """
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> pulumi.Output[str]:
        """
        The creation timestamp of the connection.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        User provided description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> pulumi.Output[str]:
        """
        User provided display name for the connection.
        """
        return pulumi.get(self, "friendly_name")

    @property
    @pulumi.getter(name="hasCredential")
    def has_credential(self) -> pulumi.Output[bool]:
        """
        True, if credential is configured for this connection.
        """
        return pulumi.get(self, "has_credential")

    @property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> pulumi.Output[str]:
        """
        Optional. The Cloud KMS key that is used for encryption. Example: `projects/[kms_project_id]/locations/[region]/keyRings/[key_region]/cryptoKeys/[key]`
        """
        return pulumi.get(self, "kms_key_name")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> pulumi.Output[str]:
        """
        The last update timestamp of the connection.
        """
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The resource name of the connection in the form of: `projects/{project_id}/locations/{location_id}/connections/{connection_id}`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="salesforceDataCloud")
    def salesforce_data_cloud(self) -> pulumi.Output['outputs.SalesforceDataCloudPropertiesResponse']:
        """
        Optional. Salesforce DataCloud properties. This field is intended for use only by Salesforce partner projects. This field contains properties for your Salesforce DataCloud connection.
        """
        return pulumi.get(self, "salesforce_data_cloud")

    @property
    @pulumi.getter
    def spark(self) -> pulumi.Output['outputs.SparkPropertiesResponse']:
        """
        Spark properties.
        """
        return pulumi.get(self, "spark")

