# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetReasoningEngineResult',
    'AwaitableGetReasoningEngineResult',
    'get_reasoning_engine',
    'get_reasoning_engine_output',
]

@pulumi.output_type
class GetReasoningEngineResult:
    def __init__(__self__, create_time=None, description=None, display_name=None, etag=None, name=None, spec=None, update_time=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if spec and not isinstance(spec, dict):
            raise TypeError("Expected argument 'spec' to be a dict")
        pulumi.set(__self__, "spec", spec)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Timestamp when this ReasoningEngine was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. The description of the ReasoningEngine.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name of the ReasoningEngine.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        Optional. Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Identifier. The resource name of the ReasoningEngine.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def spec(self) -> 'outputs.GoogleCloudAiplatformV1beta1ReasoningEngineSpecResponse':
        """
        Configurations of the ReasoningEngine
        """
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Timestamp when this ReasoningEngine was most recently updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetReasoningEngineResult(GetReasoningEngineResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetReasoningEngineResult(
            create_time=self.create_time,
            description=self.description,
            display_name=self.display_name,
            etag=self.etag,
            name=self.name,
            spec=self.spec,
            update_time=self.update_time)


def get_reasoning_engine(location: Optional[str] = None,
                         project: Optional[str] = None,
                         reasoning_engine_id: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetReasoningEngineResult:
    """
    Gets a reasoning engine.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['project'] = project
    __args__['reasoningEngineId'] = reasoning_engine_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:aiplatform/v1beta1:getReasoningEngine', __args__, opts=opts, typ=GetReasoningEngineResult).value

    return AwaitableGetReasoningEngineResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        etag=pulumi.get(__ret__, 'etag'),
        name=pulumi.get(__ret__, 'name'),
        spec=pulumi.get(__ret__, 'spec'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_reasoning_engine)
def get_reasoning_engine_output(location: Optional[pulumi.Input[str]] = None,
                                project: Optional[pulumi.Input[Optional[str]]] = None,
                                reasoning_engine_id: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetReasoningEngineResult]:
    """
    Gets a reasoning engine.
    """
    ...
