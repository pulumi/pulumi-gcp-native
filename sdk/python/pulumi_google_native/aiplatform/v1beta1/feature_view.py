# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['FeatureViewArgs', 'FeatureView']

@pulumi.input_type
class FeatureViewArgs:
    def __init__(__self__, *,
                 feature_online_store_id: pulumi.Input[str],
                 feature_view_id: pulumi.Input[str],
                 big_query_source: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1FeatureViewBigQuerySourceArgs']] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 feature_registry_source: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1FeatureViewFeatureRegistrySourceArgs']] = None,
                 index_config: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1FeatureViewIndexConfigArgs']] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 run_sync_immediately: Optional[pulumi.Input[bool]] = None,
                 service_agent_type: Optional[pulumi.Input['FeatureViewServiceAgentType']] = None,
                 sync_config: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1FeatureViewSyncConfigArgs']] = None,
                 vector_search_config: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfigArgs']] = None):
        """
        The set of arguments for constructing a FeatureView resource.
        :param pulumi.Input[str] feature_view_id: Required. The ID to use for the FeatureView, which will become the final component of the FeatureView's resource name. This value may be up to 60 characters, and valid characters are `[a-z0-9_]`. The first character cannot be a number. The value must be unique within a FeatureOnlineStore.
        :param pulumi.Input['GoogleCloudAiplatformV1beta1FeatureViewBigQuerySourceArgs'] big_query_source: Optional. Configures how data is supposed to be extracted from a BigQuery source to be loaded onto the FeatureOnlineStore.
        :param pulumi.Input[str] etag: Optional. Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
        :param pulumi.Input['GoogleCloudAiplatformV1beta1FeatureViewFeatureRegistrySourceArgs'] feature_registry_source: Optional. Configures the features from a Feature Registry source that need to be loaded onto the FeatureOnlineStore.
        :param pulumi.Input['GoogleCloudAiplatformV1beta1FeatureViewIndexConfigArgs'] index_config: Optional. Configuration for index preparation for vector search. It contains the required configurations to create an index from source data, so that approximate nearest neighbor (a.k.a ANN) algorithms search can be performed during online serving.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Optional. The labels with user-defined metadata to organize your FeatureViews. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information on and examples of labels. No more than 64 user labels can be associated with one FeatureOnlineStore(System labels are excluded)." System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable.
        :param pulumi.Input[str] name: Identifier. Name of the FeatureView. Format: `projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}/featureViews/{feature_view}`
        :param pulumi.Input[bool] run_sync_immediately: Immutable. If set to true, one on demand sync will be run immediately, regardless whether the FeatureView.sync_config is configured or not.
        :param pulumi.Input['FeatureViewServiceAgentType'] service_agent_type: Optional. Service agent type used during data sync. By default, the Vertex AI Service Agent is used. When using an IAM Policy to isolate this FeatureView within a project, a separate service account should be provisioned by setting this field to `SERVICE_AGENT_TYPE_FEATURE_VIEW`. This will generate a separate service account to access the BigQuery source table.
        :param pulumi.Input['GoogleCloudAiplatformV1beta1FeatureViewSyncConfigArgs'] sync_config: Configures when data is to be synced/updated for this FeatureView. At the end of the sync the latest featureValues for each entityId of this FeatureView are made ready for online serving.
        :param pulumi.Input['GoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfigArgs'] vector_search_config: Optional. Deprecated: please use FeatureView.index_config instead.
        """
        pulumi.set(__self__, "feature_online_store_id", feature_online_store_id)
        pulumi.set(__self__, "feature_view_id", feature_view_id)
        if big_query_source is not None:
            pulumi.set(__self__, "big_query_source", big_query_source)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if feature_registry_source is not None:
            pulumi.set(__self__, "feature_registry_source", feature_registry_source)
        if index_config is not None:
            pulumi.set(__self__, "index_config", index_config)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if run_sync_immediately is not None:
            pulumi.set(__self__, "run_sync_immediately", run_sync_immediately)
        if service_agent_type is not None:
            pulumi.set(__self__, "service_agent_type", service_agent_type)
        if sync_config is not None:
            pulumi.set(__self__, "sync_config", sync_config)
        if vector_search_config is not None:
            warnings.warn("""Optional. Deprecated: please use FeatureView.index_config instead.""", DeprecationWarning)
            pulumi.log.warn("""vector_search_config is deprecated: Optional. Deprecated: please use FeatureView.index_config instead.""")
        if vector_search_config is not None:
            pulumi.set(__self__, "vector_search_config", vector_search_config)

    @property
    @pulumi.getter(name="featureOnlineStoreId")
    def feature_online_store_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "feature_online_store_id")

    @feature_online_store_id.setter
    def feature_online_store_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "feature_online_store_id", value)

    @property
    @pulumi.getter(name="featureViewId")
    def feature_view_id(self) -> pulumi.Input[str]:
        """
        Required. The ID to use for the FeatureView, which will become the final component of the FeatureView's resource name. This value may be up to 60 characters, and valid characters are `[a-z0-9_]`. The first character cannot be a number. The value must be unique within a FeatureOnlineStore.
        """
        return pulumi.get(self, "feature_view_id")

    @feature_view_id.setter
    def feature_view_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "feature_view_id", value)

    @property
    @pulumi.getter(name="bigQuerySource")
    def big_query_source(self) -> Optional[pulumi.Input['GoogleCloudAiplatformV1beta1FeatureViewBigQuerySourceArgs']]:
        """
        Optional. Configures how data is supposed to be extracted from a BigQuery source to be loaded onto the FeatureOnlineStore.
        """
        return pulumi.get(self, "big_query_source")

    @big_query_source.setter
    def big_query_source(self, value: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1FeatureViewBigQuerySourceArgs']]):
        pulumi.set(self, "big_query_source", value)

    @property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
        """
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etag", value)

    @property
    @pulumi.getter(name="featureRegistrySource")
    def feature_registry_source(self) -> Optional[pulumi.Input['GoogleCloudAiplatformV1beta1FeatureViewFeatureRegistrySourceArgs']]:
        """
        Optional. Configures the features from a Feature Registry source that need to be loaded onto the FeatureOnlineStore.
        """
        return pulumi.get(self, "feature_registry_source")

    @feature_registry_source.setter
    def feature_registry_source(self, value: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1FeatureViewFeatureRegistrySourceArgs']]):
        pulumi.set(self, "feature_registry_source", value)

    @property
    @pulumi.getter(name="indexConfig")
    def index_config(self) -> Optional[pulumi.Input['GoogleCloudAiplatformV1beta1FeatureViewIndexConfigArgs']]:
        """
        Optional. Configuration for index preparation for vector search. It contains the required configurations to create an index from source data, so that approximate nearest neighbor (a.k.a ANN) algorithms search can be performed during online serving.
        """
        return pulumi.get(self, "index_config")

    @index_config.setter
    def index_config(self, value: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1FeatureViewIndexConfigArgs']]):
        pulumi.set(self, "index_config", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional. The labels with user-defined metadata to organize your FeatureViews. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information on and examples of labels. No more than 64 user labels can be associated with one FeatureOnlineStore(System labels are excluded)." System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier. Name of the FeatureView. Format: `projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}/featureViews/{feature_view}`
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="runSyncImmediately")
    def run_sync_immediately(self) -> Optional[pulumi.Input[bool]]:
        """
        Immutable. If set to true, one on demand sync will be run immediately, regardless whether the FeatureView.sync_config is configured or not.
        """
        return pulumi.get(self, "run_sync_immediately")

    @run_sync_immediately.setter
    def run_sync_immediately(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_sync_immediately", value)

    @property
    @pulumi.getter(name="serviceAgentType")
    def service_agent_type(self) -> Optional[pulumi.Input['FeatureViewServiceAgentType']]:
        """
        Optional. Service agent type used during data sync. By default, the Vertex AI Service Agent is used. When using an IAM Policy to isolate this FeatureView within a project, a separate service account should be provisioned by setting this field to `SERVICE_AGENT_TYPE_FEATURE_VIEW`. This will generate a separate service account to access the BigQuery source table.
        """
        return pulumi.get(self, "service_agent_type")

    @service_agent_type.setter
    def service_agent_type(self, value: Optional[pulumi.Input['FeatureViewServiceAgentType']]):
        pulumi.set(self, "service_agent_type", value)

    @property
    @pulumi.getter(name="syncConfig")
    def sync_config(self) -> Optional[pulumi.Input['GoogleCloudAiplatformV1beta1FeatureViewSyncConfigArgs']]:
        """
        Configures when data is to be synced/updated for this FeatureView. At the end of the sync the latest featureValues for each entityId of this FeatureView are made ready for online serving.
        """
        return pulumi.get(self, "sync_config")

    @sync_config.setter
    def sync_config(self, value: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1FeatureViewSyncConfigArgs']]):
        pulumi.set(self, "sync_config", value)

    @property
    @pulumi.getter(name="vectorSearchConfig")
    def vector_search_config(self) -> Optional[pulumi.Input['GoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfigArgs']]:
        """
        Optional. Deprecated: please use FeatureView.index_config instead.
        """
        warnings.warn("""Optional. Deprecated: please use FeatureView.index_config instead.""", DeprecationWarning)
        pulumi.log.warn("""vector_search_config is deprecated: Optional. Deprecated: please use FeatureView.index_config instead.""")

        return pulumi.get(self, "vector_search_config")

    @vector_search_config.setter
    def vector_search_config(self, value: Optional[pulumi.Input['GoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfigArgs']]):
        pulumi.set(self, "vector_search_config", value)


class FeatureView(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 big_query_source: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1FeatureViewBigQuerySourceArgs']]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 feature_online_store_id: Optional[pulumi.Input[str]] = None,
                 feature_registry_source: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1FeatureViewFeatureRegistrySourceArgs']]] = None,
                 feature_view_id: Optional[pulumi.Input[str]] = None,
                 index_config: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1FeatureViewIndexConfigArgs']]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 run_sync_immediately: Optional[pulumi.Input[bool]] = None,
                 service_agent_type: Optional[pulumi.Input['FeatureViewServiceAgentType']] = None,
                 sync_config: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1FeatureViewSyncConfigArgs']]] = None,
                 vector_search_config: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfigArgs']]] = None,
                 __props__=None):
        """
        Creates a new FeatureView in a given FeatureOnlineStore.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1FeatureViewBigQuerySourceArgs']] big_query_source: Optional. Configures how data is supposed to be extracted from a BigQuery source to be loaded onto the FeatureOnlineStore.
        :param pulumi.Input[str] etag: Optional. Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
        :param pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1FeatureViewFeatureRegistrySourceArgs']] feature_registry_source: Optional. Configures the features from a Feature Registry source that need to be loaded onto the FeatureOnlineStore.
        :param pulumi.Input[str] feature_view_id: Required. The ID to use for the FeatureView, which will become the final component of the FeatureView's resource name. This value may be up to 60 characters, and valid characters are `[a-z0-9_]`. The first character cannot be a number. The value must be unique within a FeatureOnlineStore.
        :param pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1FeatureViewIndexConfigArgs']] index_config: Optional. Configuration for index preparation for vector search. It contains the required configurations to create an index from source data, so that approximate nearest neighbor (a.k.a ANN) algorithms search can be performed during online serving.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Optional. The labels with user-defined metadata to organize your FeatureViews. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information on and examples of labels. No more than 64 user labels can be associated with one FeatureOnlineStore(System labels are excluded)." System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable.
        :param pulumi.Input[str] name: Identifier. Name of the FeatureView. Format: `projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}/featureViews/{feature_view}`
        :param pulumi.Input[bool] run_sync_immediately: Immutable. If set to true, one on demand sync will be run immediately, regardless whether the FeatureView.sync_config is configured or not.
        :param pulumi.Input['FeatureViewServiceAgentType'] service_agent_type: Optional. Service agent type used during data sync. By default, the Vertex AI Service Agent is used. When using an IAM Policy to isolate this FeatureView within a project, a separate service account should be provisioned by setting this field to `SERVICE_AGENT_TYPE_FEATURE_VIEW`. This will generate a separate service account to access the BigQuery source table.
        :param pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1FeatureViewSyncConfigArgs']] sync_config: Configures when data is to be synced/updated for this FeatureView. At the end of the sync the latest featureValues for each entityId of this FeatureView are made ready for online serving.
        :param pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfigArgs']] vector_search_config: Optional. Deprecated: please use FeatureView.index_config instead.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FeatureViewArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a new FeatureView in a given FeatureOnlineStore.

        :param str resource_name: The name of the resource.
        :param FeatureViewArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FeatureViewArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 big_query_source: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1FeatureViewBigQuerySourceArgs']]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 feature_online_store_id: Optional[pulumi.Input[str]] = None,
                 feature_registry_source: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1FeatureViewFeatureRegistrySourceArgs']]] = None,
                 feature_view_id: Optional[pulumi.Input[str]] = None,
                 index_config: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1FeatureViewIndexConfigArgs']]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 run_sync_immediately: Optional[pulumi.Input[bool]] = None,
                 service_agent_type: Optional[pulumi.Input['FeatureViewServiceAgentType']] = None,
                 sync_config: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1FeatureViewSyncConfigArgs']]] = None,
                 vector_search_config: Optional[pulumi.Input[pulumi.InputType['GoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfigArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FeatureViewArgs.__new__(FeatureViewArgs)

            __props__.__dict__["big_query_source"] = big_query_source
            __props__.__dict__["etag"] = etag
            if feature_online_store_id is None and not opts.urn:
                raise TypeError("Missing required property 'feature_online_store_id'")
            __props__.__dict__["feature_online_store_id"] = feature_online_store_id
            __props__.__dict__["feature_registry_source"] = feature_registry_source
            if feature_view_id is None and not opts.urn:
                raise TypeError("Missing required property 'feature_view_id'")
            __props__.__dict__["feature_view_id"] = feature_view_id
            __props__.__dict__["index_config"] = index_config
            __props__.__dict__["labels"] = labels
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            __props__.__dict__["project"] = project
            __props__.__dict__["run_sync_immediately"] = run_sync_immediately
            __props__.__dict__["service_agent_type"] = service_agent_type
            __props__.__dict__["sync_config"] = sync_config
            __props__.__dict__["vector_search_config"] = vector_search_config
            __props__.__dict__["create_time"] = None
            __props__.__dict__["service_account_email"] = None
            __props__.__dict__["update_time"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["feature_online_store_id", "feature_view_id", "location", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(FeatureView, __self__).__init__(
            'google-native:aiplatform/v1beta1:FeatureView',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'FeatureView':
        """
        Get an existing FeatureView resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = FeatureViewArgs.__new__(FeatureViewArgs)

        __props__.__dict__["big_query_source"] = None
        __props__.__dict__["create_time"] = None
        __props__.__dict__["etag"] = None
        __props__.__dict__["feature_online_store_id"] = None
        __props__.__dict__["feature_registry_source"] = None
        __props__.__dict__["feature_view_id"] = None
        __props__.__dict__["index_config"] = None
        __props__.__dict__["labels"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["run_sync_immediately"] = None
        __props__.__dict__["service_account_email"] = None
        __props__.__dict__["service_agent_type"] = None
        __props__.__dict__["sync_config"] = None
        __props__.__dict__["update_time"] = None
        __props__.__dict__["vector_search_config"] = None
        return FeatureView(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bigQuerySource")
    def big_query_source(self) -> pulumi.Output['outputs.GoogleCloudAiplatformV1beta1FeatureViewBigQuerySourceResponse']:
        """
        Optional. Configures how data is supposed to be extracted from a BigQuery source to be loaded onto the FeatureOnlineStore.
        """
        return pulumi.get(self, "big_query_source")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Timestamp when this FeatureView was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[str]:
        """
        Optional. Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="featureOnlineStoreId")
    def feature_online_store_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "feature_online_store_id")

    @property
    @pulumi.getter(name="featureRegistrySource")
    def feature_registry_source(self) -> pulumi.Output['outputs.GoogleCloudAiplatformV1beta1FeatureViewFeatureRegistrySourceResponse']:
        """
        Optional. Configures the features from a Feature Registry source that need to be loaded onto the FeatureOnlineStore.
        """
        return pulumi.get(self, "feature_registry_source")

    @property
    @pulumi.getter(name="featureViewId")
    def feature_view_id(self) -> pulumi.Output[str]:
        """
        Required. The ID to use for the FeatureView, which will become the final component of the FeatureView's resource name. This value may be up to 60 characters, and valid characters are `[a-z0-9_]`. The first character cannot be a number. The value must be unique within a FeatureOnlineStore.
        """
        return pulumi.get(self, "feature_view_id")

    @property
    @pulumi.getter(name="indexConfig")
    def index_config(self) -> pulumi.Output['outputs.GoogleCloudAiplatformV1beta1FeatureViewIndexConfigResponse']:
        """
        Optional. Configuration for index preparation for vector search. It contains the required configurations to create an index from source data, so that approximate nearest neighbor (a.k.a ANN) algorithms search can be performed during online serving.
        """
        return pulumi.get(self, "index_config")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Optional. The labels with user-defined metadata to organize your FeatureViews. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information on and examples of labels. No more than 64 user labels can be associated with one FeatureOnlineStore(System labels are excluded)." System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Identifier. Name of the FeatureView. Format: `projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}/featureViews/{feature_view}`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="runSyncImmediately")
    def run_sync_immediately(self) -> pulumi.Output[Optional[bool]]:
        """
        Immutable. If set to true, one on demand sync will be run immediately, regardless whether the FeatureView.sync_config is configured or not.
        """
        return pulumi.get(self, "run_sync_immediately")

    @property
    @pulumi.getter(name="serviceAccountEmail")
    def service_account_email(self) -> pulumi.Output[str]:
        """
        A Service Account unique to this FeatureView. The role bigquery.dataViewer should be granted to this service account to allow Vertex AI Feature Store to sync data to the online store.
        """
        return pulumi.get(self, "service_account_email")

    @property
    @pulumi.getter(name="serviceAgentType")
    def service_agent_type(self) -> pulumi.Output[str]:
        """
        Optional. Service agent type used during data sync. By default, the Vertex AI Service Agent is used. When using an IAM Policy to isolate this FeatureView within a project, a separate service account should be provisioned by setting this field to `SERVICE_AGENT_TYPE_FEATURE_VIEW`. This will generate a separate service account to access the BigQuery source table.
        """
        return pulumi.get(self, "service_agent_type")

    @property
    @pulumi.getter(name="syncConfig")
    def sync_config(self) -> pulumi.Output['outputs.GoogleCloudAiplatformV1beta1FeatureViewSyncConfigResponse']:
        """
        Configures when data is to be synced/updated for this FeatureView. At the end of the sync the latest featureValues for each entityId of this FeatureView are made ready for online serving.
        """
        return pulumi.get(self, "sync_config")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Timestamp when this FeatureView was last updated.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="vectorSearchConfig")
    def vector_search_config(self) -> pulumi.Output['outputs.GoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfigResponse']:
        """
        Optional. Deprecated: please use FeatureView.index_config instead.
        """
        warnings.warn("""Optional. Deprecated: please use FeatureView.index_config instead.""", DeprecationWarning)
        pulumi.log.warn("""vector_search_config is deprecated: Optional. Deprecated: please use FeatureView.index_config instead.""")

        return pulumi.get(self, "vector_search_config")

