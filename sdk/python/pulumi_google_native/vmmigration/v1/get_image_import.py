# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetImageImportResult',
    'AwaitableGetImageImportResult',
    'get_image_import',
    'get_image_import_output',
]

@pulumi.output_type
class GetImageImportResult:
    def __init__(__self__, cloud_storage_uri=None, create_time=None, disk_image_target_defaults=None, encryption=None, name=None, recent_image_import_jobs=None):
        if cloud_storage_uri and not isinstance(cloud_storage_uri, str):
            raise TypeError("Expected argument 'cloud_storage_uri' to be a str")
        pulumi.set(__self__, "cloud_storage_uri", cloud_storage_uri)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if disk_image_target_defaults and not isinstance(disk_image_target_defaults, dict):
            raise TypeError("Expected argument 'disk_image_target_defaults' to be a dict")
        pulumi.set(__self__, "disk_image_target_defaults", disk_image_target_defaults)
        if encryption and not isinstance(encryption, dict):
            raise TypeError("Expected argument 'encryption' to be a dict")
        pulumi.set(__self__, "encryption", encryption)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if recent_image_import_jobs and not isinstance(recent_image_import_jobs, list):
            raise TypeError("Expected argument 'recent_image_import_jobs' to be a list")
        pulumi.set(__self__, "recent_image_import_jobs", recent_image_import_jobs)

    @property
    @pulumi.getter(name="cloudStorageUri")
    def cloud_storage_uri(self) -> str:
        """
        Immutable. The path to the Cloud Storage file from which the image should be imported.
        """
        return pulumi.get(self, "cloud_storage_uri")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time the image import was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="diskImageTargetDefaults")
    def disk_image_target_defaults(self) -> 'outputs.DiskImageTargetDetailsResponse':
        """
        Immutable. Target details for importing a disk image, will be used by ImageImportJob.
        """
        return pulumi.get(self, "disk_image_target_defaults")

    @property
    @pulumi.getter
    def encryption(self) -> 'outputs.EncryptionResponse':
        """
        Immutable. The encryption details used by the image import process during the image adaptation for Compute Engine.
        """
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource path of the ImageImport.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="recentImageImportJobs")
    def recent_image_import_jobs(self) -> Sequence['outputs.ImageImportJobResponse']:
        """
        The result of the most recent runs for this ImageImport. All jobs for this ImageImport can be listed via ListImageImportJobs.
        """
        return pulumi.get(self, "recent_image_import_jobs")


class AwaitableGetImageImportResult(GetImageImportResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetImageImportResult(
            cloud_storage_uri=self.cloud_storage_uri,
            create_time=self.create_time,
            disk_image_target_defaults=self.disk_image_target_defaults,
            encryption=self.encryption,
            name=self.name,
            recent_image_import_jobs=self.recent_image_import_jobs)


def get_image_import(image_import_id: Optional[str] = None,
                     location: Optional[str] = None,
                     project: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetImageImportResult:
    """
    Gets details of a single ImageImport.
    """
    __args__ = dict()
    __args__['imageImportId'] = image_import_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:vmmigration/v1:getImageImport', __args__, opts=opts, typ=GetImageImportResult).value

    return AwaitableGetImageImportResult(
        cloud_storage_uri=pulumi.get(__ret__, 'cloud_storage_uri'),
        create_time=pulumi.get(__ret__, 'create_time'),
        disk_image_target_defaults=pulumi.get(__ret__, 'disk_image_target_defaults'),
        encryption=pulumi.get(__ret__, 'encryption'),
        name=pulumi.get(__ret__, 'name'),
        recent_image_import_jobs=pulumi.get(__ret__, 'recent_image_import_jobs'))


@_utilities.lift_output_func(get_image_import)
def get_image_import_output(image_import_id: Optional[pulumi.Input[str]] = None,
                            location: Optional[pulumi.Input[str]] = None,
                            project: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetImageImportResult]:
    """
    Gets details of a single ImageImport.
    """
    ...
