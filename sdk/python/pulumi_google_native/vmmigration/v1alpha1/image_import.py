# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['ImageImportArgs', 'ImageImport']

@pulumi.input_type
class ImageImportArgs:
    def __init__(__self__, *,
                 image_import_id: pulumi.Input[str],
                 cloud_storage_uri: Optional[pulumi.Input[str]] = None,
                 disk_image_target_defaults: Optional[pulumi.Input['DiskImageTargetDetailsArgs']] = None,
                 encryption: Optional[pulumi.Input['EncryptionArgs']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ImageImport resource.
        :param pulumi.Input[str] image_import_id: Required. The image import identifier. This value maximum length is 63 characters, and valid characters are /a-z-/. It must start with an english letter and must not end with a hyphen.
        :param pulumi.Input[str] cloud_storage_uri: Immutable. The path to the Cloud Storage file from which the image should be imported.
        :param pulumi.Input['DiskImageTargetDetailsArgs'] disk_image_target_defaults: Immutable. Target details for importing a disk image, will be used by ImageImportJob.
        :param pulumi.Input['EncryptionArgs'] encryption: Immutable. The encryption details used by the image import process during the image adaptation for Compute Engine.
        :param pulumi.Input[str] request_id: Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        """
        pulumi.set(__self__, "image_import_id", image_import_id)
        if cloud_storage_uri is not None:
            pulumi.set(__self__, "cloud_storage_uri", cloud_storage_uri)
        if disk_image_target_defaults is not None:
            pulumi.set(__self__, "disk_image_target_defaults", disk_image_target_defaults)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)

    @property
    @pulumi.getter(name="imageImportId")
    def image_import_id(self) -> pulumi.Input[str]:
        """
        Required. The image import identifier. This value maximum length is 63 characters, and valid characters are /a-z-/. It must start with an english letter and must not end with a hyphen.
        """
        return pulumi.get(self, "image_import_id")

    @image_import_id.setter
    def image_import_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_import_id", value)

    @property
    @pulumi.getter(name="cloudStorageUri")
    def cloud_storage_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Immutable. The path to the Cloud Storage file from which the image should be imported.
        """
        return pulumi.get(self, "cloud_storage_uri")

    @cloud_storage_uri.setter
    def cloud_storage_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_storage_uri", value)

    @property
    @pulumi.getter(name="diskImageTargetDefaults")
    def disk_image_target_defaults(self) -> Optional[pulumi.Input['DiskImageTargetDetailsArgs']]:
        """
        Immutable. Target details for importing a disk image, will be used by ImageImportJob.
        """
        return pulumi.get(self, "disk_image_target_defaults")

    @disk_image_target_defaults.setter
    def disk_image_target_defaults(self, value: Optional[pulumi.Input['DiskImageTargetDetailsArgs']]):
        pulumi.set(self, "disk_image_target_defaults", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input['EncryptionArgs']]:
        """
        Immutable. The encryption details used by the image import process during the image adaptation for Compute Engine.
        """
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input['EncryptionArgs']]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        """
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)


class ImageImport(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_storage_uri: Optional[pulumi.Input[str]] = None,
                 disk_image_target_defaults: Optional[pulumi.Input[pulumi.InputType['DiskImageTargetDetailsArgs']]] = None,
                 encryption: Optional[pulumi.Input[pulumi.InputType['EncryptionArgs']]] = None,
                 image_import_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates a new ImageImport in a given project.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cloud_storage_uri: Immutable. The path to the Cloud Storage file from which the image should be imported.
        :param pulumi.Input[pulumi.InputType['DiskImageTargetDetailsArgs']] disk_image_target_defaults: Immutable. Target details for importing a disk image, will be used by ImageImportJob.
        :param pulumi.Input[pulumi.InputType['EncryptionArgs']] encryption: Immutable. The encryption details used by the image import process during the image adaptation for Compute Engine.
        :param pulumi.Input[str] image_import_id: Required. The image import identifier. This value maximum length is 63 characters, and valid characters are /a-z-/. It must start with an english letter and must not end with a hyphen.
        :param pulumi.Input[str] request_id: Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ImageImportArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a new ImageImport in a given project.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param ImageImportArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ImageImportArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_storage_uri: Optional[pulumi.Input[str]] = None,
                 disk_image_target_defaults: Optional[pulumi.Input[pulumi.InputType['DiskImageTargetDetailsArgs']]] = None,
                 encryption: Optional[pulumi.Input[pulumi.InputType['EncryptionArgs']]] = None,
                 image_import_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ImageImportArgs.__new__(ImageImportArgs)

            __props__.__dict__["cloud_storage_uri"] = cloud_storage_uri
            __props__.__dict__["disk_image_target_defaults"] = disk_image_target_defaults
            __props__.__dict__["encryption"] = encryption
            if image_import_id is None and not opts.urn:
                raise TypeError("Missing required property 'image_import_id'")
            __props__.__dict__["image_import_id"] = image_import_id
            __props__.__dict__["location"] = location
            __props__.__dict__["project"] = project
            __props__.__dict__["request_id"] = request_id
            __props__.__dict__["create_time"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["recent_image_import_jobs"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["image_import_id", "location", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(ImageImport, __self__).__init__(
            'google-native:vmmigration/v1alpha1:ImageImport',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ImageImport':
        """
        Get an existing ImageImport resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ImageImportArgs.__new__(ImageImportArgs)

        __props__.__dict__["cloud_storage_uri"] = None
        __props__.__dict__["create_time"] = None
        __props__.__dict__["disk_image_target_defaults"] = None
        __props__.__dict__["encryption"] = None
        __props__.__dict__["image_import_id"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["recent_image_import_jobs"] = None
        __props__.__dict__["request_id"] = None
        return ImageImport(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cloudStorageUri")
    def cloud_storage_uri(self) -> pulumi.Output[str]:
        """
        Immutable. The path to the Cloud Storage file from which the image should be imported.
        """
        return pulumi.get(self, "cloud_storage_uri")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The time the image import was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="diskImageTargetDefaults")
    def disk_image_target_defaults(self) -> pulumi.Output['outputs.DiskImageTargetDetailsResponse']:
        """
        Immutable. Target details for importing a disk image, will be used by ImageImportJob.
        """
        return pulumi.get(self, "disk_image_target_defaults")

    @property
    @pulumi.getter
    def encryption(self) -> pulumi.Output['outputs.EncryptionResponse']:
        """
        Immutable. The encryption details used by the image import process during the image adaptation for Compute Engine.
        """
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter(name="imageImportId")
    def image_import_id(self) -> pulumi.Output[str]:
        """
        Required. The image import identifier. This value maximum length is 63 characters, and valid characters are /a-z-/. It must start with an english letter and must not end with a hyphen.
        """
        return pulumi.get(self, "image_import_id")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The resource path of the ImageImport.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="recentImageImportJobs")
    def recent_image_import_jobs(self) -> pulumi.Output[Sequence['outputs.ImageImportJobResponse']]:
        """
        The result of the most recent runs for this ImageImport. All jobs for this ImageImport can be listed via ListImageImportJobs.
        """
        return pulumi.get(self, "recent_image_import_jobs")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[Optional[str]]:
        """
        Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        """
        return pulumi.get(self, "request_id")

