# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'GetInstancePartitionResult',
    'AwaitableGetInstancePartitionResult',
    'get_instance_partition',
    'get_instance_partition_output',
]

@pulumi.output_type
class GetInstancePartitionResult:
    def __init__(__self__, config=None, create_time=None, display_name=None, etag=None, name=None, node_count=None, processing_units=None, referencing_backups=None, referencing_databases=None, state=None, update_time=None):
        if config and not isinstance(config, str):
            raise TypeError("Expected argument 'config' to be a str")
        pulumi.set(__self__, "config", config)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if node_count and not isinstance(node_count, int):
            raise TypeError("Expected argument 'node_count' to be a int")
        pulumi.set(__self__, "node_count", node_count)
        if processing_units and not isinstance(processing_units, int):
            raise TypeError("Expected argument 'processing_units' to be a int")
        pulumi.set(__self__, "processing_units", processing_units)
        if referencing_backups and not isinstance(referencing_backups, list):
            raise TypeError("Expected argument 'referencing_backups' to be a list")
        pulumi.set(__self__, "referencing_backups", referencing_backups)
        if referencing_databases and not isinstance(referencing_databases, list):
            raise TypeError("Expected argument 'referencing_databases' to be a list")
        pulumi.set(__self__, "referencing_databases", referencing_databases)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def config(self) -> str:
        """
        The name of the instance partition's configuration. Values are of the form `projects//instanceConfigs/`. See also InstanceConfig and ListInstanceConfigs.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time at which the instance partition was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The descriptive name for this instance partition as it appears in UIs. Must be unique per project and between 4 and 30 characters in length.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        Used for optimistic concurrency control as a way to help prevent simultaneous updates of a instance partition from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform instance partition updates in order to avoid race conditions: An etag is returned in the response which contains instance partitions, and systems are expected to put that etag in the request to update instance partitions to ensure that their change will be applied to the same version of the instance partition. If no etag is provided in the call to update instance partition, then the existing instance partition is overwritten blindly.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A unique identifier for the instance partition. Values are of the form `projects//instances//instancePartitions/a-z*[a-z0-9]`. The final segment of the name must be between 2 and 64 characters in length. An instance partition's name cannot be changed after the instance partition is created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> int:
        """
        The number of nodes allocated to this instance partition. Users can set the node_count field to specify the target number of nodes allocated to the instance partition. This may be zero in API responses for instance partitions that are not yet in state `READY`.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="processingUnits")
    def processing_units(self) -> int:
        """
        The number of processing units allocated to this instance partition. Users can set the processing_units field to specify the target number of processing units allocated to the instance partition. This may be zero in API responses for instance partitions that are not yet in state `READY`.
        """
        return pulumi.get(self, "processing_units")

    @property
    @pulumi.getter(name="referencingBackups")
    def referencing_backups(self) -> Sequence[str]:
        """
        The names of the backups that reference this instance partition. Referencing backups should share the parent instance. The existence of any referencing backup prevents the instance partition from being deleted.
        """
        return pulumi.get(self, "referencing_backups")

    @property
    @pulumi.getter(name="referencingDatabases")
    def referencing_databases(self) -> Sequence[str]:
        """
        The names of the databases that reference this instance partition. Referencing databases should share the parent instance. The existence of any referencing database prevents the instance partition from being deleted.
        """
        return pulumi.get(self, "referencing_databases")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current instance partition state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The time at which the instance partition was most recently updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetInstancePartitionResult(GetInstancePartitionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstancePartitionResult(
            config=self.config,
            create_time=self.create_time,
            display_name=self.display_name,
            etag=self.etag,
            name=self.name,
            node_count=self.node_count,
            processing_units=self.processing_units,
            referencing_backups=self.referencing_backups,
            referencing_databases=self.referencing_databases,
            state=self.state,
            update_time=self.update_time)


def get_instance_partition(instance_id: Optional[str] = None,
                           instance_partition_id: Optional[str] = None,
                           project: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstancePartitionResult:
    """
    Gets information about a particular instance partition.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['instancePartitionId'] = instance_partition_id
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:spanner/v1:getInstancePartition', __args__, opts=opts, typ=GetInstancePartitionResult).value

    return AwaitableGetInstancePartitionResult(
        config=pulumi.get(__ret__, 'config'),
        create_time=pulumi.get(__ret__, 'create_time'),
        display_name=pulumi.get(__ret__, 'display_name'),
        etag=pulumi.get(__ret__, 'etag'),
        name=pulumi.get(__ret__, 'name'),
        node_count=pulumi.get(__ret__, 'node_count'),
        processing_units=pulumi.get(__ret__, 'processing_units'),
        referencing_backups=pulumi.get(__ret__, 'referencing_backups'),
        referencing_databases=pulumi.get(__ret__, 'referencing_databases'),
        state=pulumi.get(__ret__, 'state'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_instance_partition)
def get_instance_partition_output(instance_id: Optional[pulumi.Input[str]] = None,
                                  instance_partition_id: Optional[pulumi.Input[str]] = None,
                                  project: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInstancePartitionResult]:
    """
    Gets information about a particular instance partition.
    """
    ...
