# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ItemArgs', 'Item']

@pulumi.input_type
class ItemArgs:
    def __init__(__self__, *,
                 datasource_id: pulumi.Input[str],
                 item_id: pulumi.Input[str],
                 connector_name: Optional[pulumi.Input[str]] = None,
                 debug_options: Optional[pulumi.Input['DebugOptionsArgs']] = None):
        """
        The set of arguments for constructing a Item resource.
        :param pulumi.Input[str] connector_name: The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}
        :param pulumi.Input['DebugOptionsArgs'] debug_options: Common debug options.
        """
        pulumi.set(__self__, "datasource_id", datasource_id)
        pulumi.set(__self__, "item_id", item_id)
        if connector_name is not None:
            pulumi.set(__self__, "connector_name", connector_name)
        if debug_options is not None:
            pulumi.set(__self__, "debug_options", debug_options)

    @property
    @pulumi.getter(name="datasourceId")
    def datasource_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "datasource_id")

    @datasource_id.setter
    def datasource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "datasource_id", value)

    @property
    @pulumi.getter(name="itemId")
    def item_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "item_id")

    @item_id.setter
    def item_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "item_id", value)

    @property
    @pulumi.getter(name="connectorName")
    def connector_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}
        """
        return pulumi.get(self, "connector_name")

    @connector_name.setter
    def connector_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connector_name", value)

    @property
    @pulumi.getter(name="debugOptions")
    def debug_options(self) -> Optional[pulumi.Input['DebugOptionsArgs']]:
        """
        Common debug options.
        """
        return pulumi.get(self, "debug_options")

    @debug_options.setter
    def debug_options(self, value: Optional[pulumi.Input['DebugOptionsArgs']]):
        pulumi.set(self, "debug_options", value)


class Item(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connector_name: Optional[pulumi.Input[str]] = None,
                 datasource_id: Optional[pulumi.Input[str]] = None,
                 debug_options: Optional[pulumi.Input[pulumi.InputType['DebugOptionsArgs']]] = None,
                 item_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates an upload session for uploading item content. For items smaller than 100 KB, it's easier to embed the content inline within an index request. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] connector_name: The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}
        :param pulumi.Input[pulumi.InputType['DebugOptionsArgs']] debug_options: Common debug options.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ItemArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates an upload session for uploading item content. For items smaller than 100 KB, it's easier to embed the content inline within an index request. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.
        Auto-naming is currently not supported for this resource.

        :param str resource_name: The name of the resource.
        :param ItemArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ItemArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connector_name: Optional[pulumi.Input[str]] = None,
                 datasource_id: Optional[pulumi.Input[str]] = None,
                 debug_options: Optional[pulumi.Input[pulumi.InputType['DebugOptionsArgs']]] = None,
                 item_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ItemArgs.__new__(ItemArgs)

            __props__.__dict__["connector_name"] = connector_name
            if datasource_id is None and not opts.urn:
                raise TypeError("Missing required property 'datasource_id'")
            __props__.__dict__["datasource_id"] = datasource_id
            __props__.__dict__["debug_options"] = debug_options
            if item_id is None and not opts.urn:
                raise TypeError("Missing required property 'item_id'")
            __props__.__dict__["item_id"] = item_id
            __props__.__dict__["acl"] = None
            __props__.__dict__["content"] = None
            __props__.__dict__["item_type"] = None
            __props__.__dict__["metadata"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["payload"] = None
            __props__.__dict__["queue"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["structured_data"] = None
            __props__.__dict__["version"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["datasource_id", "item_id"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Item, __self__).__init__(
            'google-native:cloudsearch/v1:Item',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Item':
        """
        Get an existing Item resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ItemArgs.__new__(ItemArgs)

        __props__.__dict__["acl"] = None
        __props__.__dict__["content"] = None
        __props__.__dict__["datasource_id"] = None
        __props__.__dict__["item_id"] = None
        __props__.__dict__["item_type"] = None
        __props__.__dict__["metadata"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["payload"] = None
        __props__.__dict__["queue"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["structured_data"] = None
        __props__.__dict__["version"] = None
        return Item(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def acl(self) -> pulumi.Output['outputs.ItemAclResponse']:
        """
        Access control list for this item.
        """
        return pulumi.get(self, "acl")

    @property
    @pulumi.getter
    def content(self) -> pulumi.Output['outputs.ItemContentResponse']:
        """
        Item content to be indexed and made text searchable.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="datasourceId")
    def datasource_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "datasource_id")

    @property
    @pulumi.getter(name="itemId")
    def item_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "item_id")

    @property
    @pulumi.getter(name="itemType")
    def item_type(self) -> pulumi.Output[str]:
        """
        The type for this item.
        """
        return pulumi.get(self, "item_type")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output['outputs.ItemMetadataResponse']:
        """
        The metadata information.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the Item. Format: datasources/{source_id}/items/{item_id} This is a required field. The maximum length is 1536 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def payload(self) -> pulumi.Output[str]:
        """
        Additional state connector can store for this item. The maximum length is 10000 bytes.
        """
        return pulumi.get(self, "payload")

    @property
    @pulumi.getter
    def queue(self) -> pulumi.Output[str]:
        """
        Queue this item belongs to. The maximum length is 100 characters.
        """
        return pulumi.get(self, "queue")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output['outputs.ItemStatusResponse']:
        """
        Status of the item. Output only field.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="structuredData")
    def structured_data(self) -> pulumi.Output['outputs.ItemStructuredDataResponse']:
        """
        The structured data for the item that should conform to a registered object definition in the schema for the data source.
        """
        return pulumi.get(self, "structured_data")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        The indexing system stores the version from the datasource as a byte string and compares the Item version in the index to the version of the queued Item using lexical ordering. Cloud Search Indexing won't index or delete any queued item with a version value that is less than or equal to the version of the currently indexed item. The maximum length for this field is 1024 bytes. For information on how item version affects the deletion process, refer to [Handle revisions after manual deletes](https://developers.google.com/cloud-search/docs/guides/operations).
        """
        return pulumi.get(self, "version")

