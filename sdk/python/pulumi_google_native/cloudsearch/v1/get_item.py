# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetItemResult',
    'AwaitableGetItemResult',
    'get_item',
    'get_item_output',
]

@pulumi.output_type
class GetItemResult:
    def __init__(__self__, acl=None, content=None, item_type=None, metadata=None, name=None, payload=None, queue=None, status=None, structured_data=None, version=None):
        if acl and not isinstance(acl, dict):
            raise TypeError("Expected argument 'acl' to be a dict")
        pulumi.set(__self__, "acl", acl)
        if content and not isinstance(content, dict):
            raise TypeError("Expected argument 'content' to be a dict")
        pulumi.set(__self__, "content", content)
        if item_type and not isinstance(item_type, str):
            raise TypeError("Expected argument 'item_type' to be a str")
        pulumi.set(__self__, "item_type", item_type)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if payload and not isinstance(payload, str):
            raise TypeError("Expected argument 'payload' to be a str")
        pulumi.set(__self__, "payload", payload)
        if queue and not isinstance(queue, str):
            raise TypeError("Expected argument 'queue' to be a str")
        pulumi.set(__self__, "queue", queue)
        if status and not isinstance(status, dict):
            raise TypeError("Expected argument 'status' to be a dict")
        pulumi.set(__self__, "status", status)
        if structured_data and not isinstance(structured_data, dict):
            raise TypeError("Expected argument 'structured_data' to be a dict")
        pulumi.set(__self__, "structured_data", structured_data)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def acl(self) -> 'outputs.ItemAclResponse':
        """
        Access control list for this item.
        """
        return pulumi.get(self, "acl")

    @property
    @pulumi.getter
    def content(self) -> 'outputs.ItemContentResponse':
        """
        Item content to be indexed and made text searchable.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="itemType")
    def item_type(self) -> str:
        """
        The type for this item.
        """
        return pulumi.get(self, "item_type")

    @property
    @pulumi.getter
    def metadata(self) -> 'outputs.ItemMetadataResponse':
        """
        The metadata information.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Item. Format: datasources/{source_id}/items/{item_id} This is a required field. The maximum length is 1536 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def payload(self) -> str:
        """
        Additional state connector can store for this item. The maximum length is 10000 bytes.
        """
        return pulumi.get(self, "payload")

    @property
    @pulumi.getter
    def queue(self) -> str:
        """
        Queue this item belongs to. The maximum length is 100 characters.
        """
        return pulumi.get(self, "queue")

    @property
    @pulumi.getter
    def status(self) -> 'outputs.ItemStatusResponse':
        """
        Status of the item. Output only field.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="structuredData")
    def structured_data(self) -> 'outputs.ItemStructuredDataResponse':
        """
        The structured data for the item that should conform to a registered object definition in the schema for the data source.
        """
        return pulumi.get(self, "structured_data")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The indexing system stores the version from the datasource as a byte string and compares the Item version in the index to the version of the queued Item using lexical ordering. Cloud Search Indexing won't index or delete any queued item with a version value that is less than or equal to the version of the currently indexed item. The maximum length for this field is 1024 bytes. For information on how item version affects the deletion process, refer to [Handle revisions after manual deletes](https://developers.google.com/cloud-search/docs/guides/operations).
        """
        return pulumi.get(self, "version")


class AwaitableGetItemResult(GetItemResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetItemResult(
            acl=self.acl,
            content=self.content,
            item_type=self.item_type,
            metadata=self.metadata,
            name=self.name,
            payload=self.payload,
            queue=self.queue,
            status=self.status,
            structured_data=self.structured_data,
            version=self.version)


def get_item(connector_name: Optional[str] = None,
             datasource_id: Optional[str] = None,
             debug_options_enable_debugging: Optional[bool] = None,
             item_id: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetItemResult:
    """
    Gets Item resource by item name. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.
    """
    __args__ = dict()
    __args__['connectorName'] = connector_name
    __args__['datasourceId'] = datasource_id
    __args__['debugOptionsEnableDebugging'] = debug_options_enable_debugging
    __args__['itemId'] = item_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:cloudsearch/v1:getItem', __args__, opts=opts, typ=GetItemResult).value

    return AwaitableGetItemResult(
        acl=pulumi.get(__ret__, 'acl'),
        content=pulumi.get(__ret__, 'content'),
        item_type=pulumi.get(__ret__, 'item_type'),
        metadata=pulumi.get(__ret__, 'metadata'),
        name=pulumi.get(__ret__, 'name'),
        payload=pulumi.get(__ret__, 'payload'),
        queue=pulumi.get(__ret__, 'queue'),
        status=pulumi.get(__ret__, 'status'),
        structured_data=pulumi.get(__ret__, 'structured_data'),
        version=pulumi.get(__ret__, 'version'))


@_utilities.lift_output_func(get_item)
def get_item_output(connector_name: Optional[pulumi.Input[Optional[str]]] = None,
                    datasource_id: Optional[pulumi.Input[str]] = None,
                    debug_options_enable_debugging: Optional[pulumi.Input[Optional[bool]]] = None,
                    item_id: Optional[pulumi.Input[str]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetItemResult]:
    """
    Gets Item resource by item name. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.
    """
    ...
