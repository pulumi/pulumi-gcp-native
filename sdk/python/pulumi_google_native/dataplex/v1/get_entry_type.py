# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetEntryTypeResult',
    'AwaitableGetEntryTypeResult',
    'get_entry_type',
    'get_entry_type_output',
]

@pulumi.output_type
class GetEntryTypeResult:
    def __init__(__self__, authorization=None, create_time=None, description=None, display_name=None, etag=None, labels=None, name=None, platform=None, required_aspects=None, system=None, type_aliases=None, uid=None, update_time=None):
        if authorization and not isinstance(authorization, dict):
            raise TypeError("Expected argument 'authorization' to be a dict")
        pulumi.set(__self__, "authorization", authorization)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if platform and not isinstance(platform, str):
            raise TypeError("Expected argument 'platform' to be a str")
        pulumi.set(__self__, "platform", platform)
        if required_aspects and not isinstance(required_aspects, list):
            raise TypeError("Expected argument 'required_aspects' to be a list")
        pulumi.set(__self__, "required_aspects", required_aspects)
        if system and not isinstance(system, str):
            raise TypeError("Expected argument 'system' to be a str")
        pulumi.set(__self__, "system", system)
        if type_aliases and not isinstance(type_aliases, list):
            raise TypeError("Expected argument 'type_aliases' to be a list")
        pulumi.set(__self__, "type_aliases", type_aliases)
        if uid and not isinstance(uid, str):
            raise TypeError("Expected argument 'uid' to be a str")
        pulumi.set(__self__, "uid", uid)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def authorization(self) -> 'outputs.GoogleCloudDataplexV1EntryTypeAuthorizationResponse':
        """
        Immutable. Authorization defined for this type.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time when the EntryType was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. Description of the EntryType.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Optional. User friendly display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        Optional. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Optional. User-defined labels for the EntryType.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The relative resource name of the EntryType, of the form: projects/{project_number}/locations/{location_id}/entryTypes/{entry_type_id}.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def platform(self) -> str:
        """
        Optional. The platform that Entries of this type belongs to.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="requiredAspects")
    def required_aspects(self) -> Sequence['outputs.GoogleCloudDataplexV1EntryTypeAspectInfoResponse']:
        """
        AspectInfo for the entry type.
        """
        return pulumi.get(self, "required_aspects")

    @property
    @pulumi.getter
    def system(self) -> str:
        """
        Optional. The system that Entries of this type belongs to. Examples include CloudSQL, MariaDB etc
        """
        return pulumi.get(self, "system")

    @property
    @pulumi.getter(name="typeAliases")
    def type_aliases(self) -> Sequence[str]:
        """
        Optional. Indicates the class this Entry Type belongs to, for example, TABLE, DATABASE, MODEL.
        """
        return pulumi.get(self, "type_aliases")

    @property
    @pulumi.getter
    def uid(self) -> str:
        """
        System generated globally unique ID for the EntryType. This ID will be different if the EntryType is deleted and re-created with the same name.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The time when the EntryType was last updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetEntryTypeResult(GetEntryTypeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEntryTypeResult(
            authorization=self.authorization,
            create_time=self.create_time,
            description=self.description,
            display_name=self.display_name,
            etag=self.etag,
            labels=self.labels,
            name=self.name,
            platform=self.platform,
            required_aspects=self.required_aspects,
            system=self.system,
            type_aliases=self.type_aliases,
            uid=self.uid,
            update_time=self.update_time)


def get_entry_type(entry_type_id: Optional[str] = None,
                   location: Optional[str] = None,
                   project: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEntryTypeResult:
    """
    Retrieves a EntryType resource.
    """
    __args__ = dict()
    __args__['entryTypeId'] = entry_type_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:dataplex/v1:getEntryType', __args__, opts=opts, typ=GetEntryTypeResult).value

    return AwaitableGetEntryTypeResult(
        authorization=pulumi.get(__ret__, 'authorization'),
        create_time=pulumi.get(__ret__, 'create_time'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        etag=pulumi.get(__ret__, 'etag'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        platform=pulumi.get(__ret__, 'platform'),
        required_aspects=pulumi.get(__ret__, 'required_aspects'),
        system=pulumi.get(__ret__, 'system'),
        type_aliases=pulumi.get(__ret__, 'type_aliases'),
        uid=pulumi.get(__ret__, 'uid'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_entry_type)
def get_entry_type_output(entry_type_id: Optional[pulumi.Input[str]] = None,
                          location: Optional[pulumi.Input[str]] = None,
                          project: Optional[pulumi.Input[Optional[str]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEntryTypeResult]:
    """
    Retrieves a EntryType resource.
    """
    ...
