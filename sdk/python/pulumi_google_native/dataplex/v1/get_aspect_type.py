# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetAspectTypeResult',
    'AwaitableGetAspectTypeResult',
    'get_aspect_type',
    'get_aspect_type_output',
]

@pulumi.output_type
class GetAspectTypeResult:
    def __init__(__self__, authorization=None, create_time=None, description=None, display_name=None, etag=None, labels=None, metadata_template=None, name=None, transfer_status=None, uid=None, update_time=None):
        if authorization and not isinstance(authorization, dict):
            raise TypeError("Expected argument 'authorization' to be a dict")
        pulumi.set(__self__, "authorization", authorization)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if metadata_template and not isinstance(metadata_template, dict):
            raise TypeError("Expected argument 'metadata_template' to be a dict")
        pulumi.set(__self__, "metadata_template", metadata_template)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if transfer_status and not isinstance(transfer_status, str):
            raise TypeError("Expected argument 'transfer_status' to be a str")
        pulumi.set(__self__, "transfer_status", transfer_status)
        if uid and not isinstance(uid, str):
            raise TypeError("Expected argument 'uid' to be a str")
        pulumi.set(__self__, "uid", uid)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def authorization(self) -> 'outputs.GoogleCloudDataplexV1AspectTypeAuthorizationResponse':
        """
        Immutable. Authorization defined for this type.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time when the AspectType was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional. Description of the AspectType.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Optional. User friendly display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Optional. User-defined labels for the AspectType.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="metadataTemplate")
    def metadata_template(self) -> 'outputs.GoogleCloudDataplexV1AspectTypeMetadataTemplateResponse':
        """
        MetadataTemplate of the aspect.
        """
        return pulumi.get(self, "metadata_template")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The relative resource name of the AspectType, of the form: projects/{project_number}/locations/{location_id}/aspectTypes/{aspect_type_id}.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="transferStatus")
    def transfer_status(self) -> str:
        """
        Denotes the transfer status of the Aspect Type. It is unspecified for Aspect Types created from Dataplex API.
        """
        return pulumi.get(self, "transfer_status")

    @property
    @pulumi.getter
    def uid(self) -> str:
        """
        System generated globally unique ID for the AspectType. This ID will be different if the AspectType is deleted and re-created with the same name.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The time when the AspectType was last updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetAspectTypeResult(GetAspectTypeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAspectTypeResult(
            authorization=self.authorization,
            create_time=self.create_time,
            description=self.description,
            display_name=self.display_name,
            etag=self.etag,
            labels=self.labels,
            metadata_template=self.metadata_template,
            name=self.name,
            transfer_status=self.transfer_status,
            uid=self.uid,
            update_time=self.update_time)


def get_aspect_type(aspect_type_id: Optional[str] = None,
                    location: Optional[str] = None,
                    project: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAspectTypeResult:
    """
    Retrieves a AspectType resource.
    """
    __args__ = dict()
    __args__['aspectTypeId'] = aspect_type_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:dataplex/v1:getAspectType', __args__, opts=opts, typ=GetAspectTypeResult).value

    return AwaitableGetAspectTypeResult(
        authorization=pulumi.get(__ret__, 'authorization'),
        create_time=pulumi.get(__ret__, 'create_time'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        etag=pulumi.get(__ret__, 'etag'),
        labels=pulumi.get(__ret__, 'labels'),
        metadata_template=pulumi.get(__ret__, 'metadata_template'),
        name=pulumi.get(__ret__, 'name'),
        transfer_status=pulumi.get(__ret__, 'transfer_status'),
        uid=pulumi.get(__ret__, 'uid'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_aspect_type)
def get_aspect_type_output(aspect_type_id: Optional[pulumi.Input[str]] = None,
                           location: Optional[pulumi.Input[str]] = None,
                           project: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAspectTypeResult]:
    """
    Retrieves a AspectType resource.
    """
    ...
