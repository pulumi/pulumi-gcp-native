# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetEntryResult',
    'AwaitableGetEntryResult',
    'get_entry',
    'get_entry_output',
]

@pulumi.output_type
class GetEntryResult:
    def __init__(__self__, aspects=None, create_time=None, entry_source=None, entry_type=None, fully_qualified_name=None, name=None, parent_entry=None, update_time=None):
        if aspects and not isinstance(aspects, dict):
            raise TypeError("Expected argument 'aspects' to be a dict")
        pulumi.set(__self__, "aspects", aspects)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if entry_source and not isinstance(entry_source, dict):
            raise TypeError("Expected argument 'entry_source' to be a dict")
        pulumi.set(__self__, "entry_source", entry_source)
        if entry_type and not isinstance(entry_type, str):
            raise TypeError("Expected argument 'entry_type' to be a str")
        pulumi.set(__self__, "entry_type", entry_type)
        if fully_qualified_name and not isinstance(fully_qualified_name, str):
            raise TypeError("Expected argument 'fully_qualified_name' to be a str")
        pulumi.set(__self__, "fully_qualified_name", fully_qualified_name)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if parent_entry and not isinstance(parent_entry, str):
            raise TypeError("Expected argument 'parent_entry' to be a str")
        pulumi.set(__self__, "parent_entry", parent_entry)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def aspects(self) -> Mapping[str, str]:
        """
        Optional. The Aspects attached to the Entry. The key is either the resource name of the aspect type (if the aspect is attached directly to the entry) or "aspectType@path" if the aspect is attached to an entry's path.
        """
        return pulumi.get(self, "aspects")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time when the Entry was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="entrySource")
    def entry_source(self) -> 'outputs.GoogleCloudDataplexV1EntrySourceResponse':
        """
        Optional. Source system related information for an entry.
        """
        return pulumi.get(self, "entry_source")

    @property
    @pulumi.getter(name="entryType")
    def entry_type(self) -> str:
        """
        Immutable. The resource name of the EntryType used to create this Entry.
        """
        return pulumi.get(self, "entry_type")

    @property
    @pulumi.getter(name="fullyQualifiedName")
    def fully_qualified_name(self) -> str:
        """
        Optional. A name for the entry that can reference it in an external system. The maximum size of the field is 4000 characters.
        """
        return pulumi.get(self, "fully_qualified_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Identifier. The relative resource name of the Entry, of the form: projects/{project}/locations/{location}/entryGroups/{entry_group}/entries/{entry}.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentEntry")
    def parent_entry(self) -> str:
        """
        Optional. Immutable. The resource name of the parent entry.
        """
        return pulumi.get(self, "parent_entry")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The time when the Entry was last updated.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetEntryResult(GetEntryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEntryResult(
            aspects=self.aspects,
            create_time=self.create_time,
            entry_source=self.entry_source,
            entry_type=self.entry_type,
            fully_qualified_name=self.fully_qualified_name,
            name=self.name,
            parent_entry=self.parent_entry,
            update_time=self.update_time)


def get_entry(aspect_types: Optional[str] = None,
              entry_group_id: Optional[str] = None,
              entry_id: Optional[str] = None,
              location: Optional[str] = None,
              paths: Optional[str] = None,
              project: Optional[str] = None,
              view: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEntryResult:
    """
    Gets a single entry.
    """
    __args__ = dict()
    __args__['aspectTypes'] = aspect_types
    __args__['entryGroupId'] = entry_group_id
    __args__['entryId'] = entry_id
    __args__['location'] = location
    __args__['paths'] = paths
    __args__['project'] = project
    __args__['view'] = view
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:dataplex/v1:getEntry', __args__, opts=opts, typ=GetEntryResult).value

    return AwaitableGetEntryResult(
        aspects=pulumi.get(__ret__, 'aspects'),
        create_time=pulumi.get(__ret__, 'create_time'),
        entry_source=pulumi.get(__ret__, 'entry_source'),
        entry_type=pulumi.get(__ret__, 'entry_type'),
        fully_qualified_name=pulumi.get(__ret__, 'fully_qualified_name'),
        name=pulumi.get(__ret__, 'name'),
        parent_entry=pulumi.get(__ret__, 'parent_entry'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_entry)
def get_entry_output(aspect_types: Optional[pulumi.Input[Optional[str]]] = None,
                     entry_group_id: Optional[pulumi.Input[str]] = None,
                     entry_id: Optional[pulumi.Input[str]] = None,
                     location: Optional[pulumi.Input[str]] = None,
                     paths: Optional[pulumi.Input[Optional[str]]] = None,
                     project: Optional[pulumi.Input[Optional[str]]] = None,
                     view: Optional[pulumi.Input[Optional[str]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEntryResult]:
    """
    Gets a single entry.
    """
    ...
