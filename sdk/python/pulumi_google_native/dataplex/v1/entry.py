# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EntryArgs', 'Entry']

@pulumi.input_type
class EntryArgs:
    def __init__(__self__, *,
                 entry_group_id: pulumi.Input[str],
                 entry_id: pulumi.Input[str],
                 entry_type: pulumi.Input[str],
                 aspects: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 entry_source: Optional[pulumi.Input['GoogleCloudDataplexV1EntrySourceArgs']] = None,
                 fully_qualified_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent_entry: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Entry resource.
        :param pulumi.Input[str] entry_id: Required. Entry identifier. It has to be unique within an Entry Group.Entries corresponding to Google Cloud resources use Entry ID format based on Full Resource Names (https://cloud.google.com/apis/design/resource_names#full_resource_name). The format is a Full Resource Name of the resource without the prefix double slashes in the API Service Name part of Full Resource Name. This allows retrieval of entries using their associated resource name.For example if the Full Resource Name of a resource is //library.googleapis.com/shelves/shelf1/books/book2, then the suggested entry_id is library.googleapis.com/shelves/shelf1/books/book2.It is also suggested to follow the same convention for entries corresponding to resources from other providers or systems than Google Cloud.The maximum size of the field is 4000 characters.
        :param pulumi.Input[str] entry_type: Immutable. The resource name of the EntryType used to create this Entry.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] aspects: Optional. The Aspects attached to the Entry. The key is either the resource name of the aspect type (if the aspect is attached directly to the entry) or "aspectType@path" if the aspect is attached to an entry's path.
        :param pulumi.Input['GoogleCloudDataplexV1EntrySourceArgs'] entry_source: Optional. Source system related information for an entry.
        :param pulumi.Input[str] fully_qualified_name: Optional. A name for the entry that can reference it in an external system. The maximum size of the field is 4000 characters.
        :param pulumi.Input[str] name: Identifier. The relative resource name of the Entry, of the form: projects/{project}/locations/{location}/entryGroups/{entry_group}/entries/{entry}.
        :param pulumi.Input[str] parent_entry: Optional. Immutable. The resource name of the parent entry.
        """
        pulumi.set(__self__, "entry_group_id", entry_group_id)
        pulumi.set(__self__, "entry_id", entry_id)
        pulumi.set(__self__, "entry_type", entry_type)
        if aspects is not None:
            pulumi.set(__self__, "aspects", aspects)
        if entry_source is not None:
            pulumi.set(__self__, "entry_source", entry_source)
        if fully_qualified_name is not None:
            pulumi.set(__self__, "fully_qualified_name", fully_qualified_name)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_entry is not None:
            pulumi.set(__self__, "parent_entry", parent_entry)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter(name="entryGroupId")
    def entry_group_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "entry_group_id")

    @entry_group_id.setter
    def entry_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "entry_group_id", value)

    @property
    @pulumi.getter(name="entryId")
    def entry_id(self) -> pulumi.Input[str]:
        """
        Required. Entry identifier. It has to be unique within an Entry Group.Entries corresponding to Google Cloud resources use Entry ID format based on Full Resource Names (https://cloud.google.com/apis/design/resource_names#full_resource_name). The format is a Full Resource Name of the resource without the prefix double slashes in the API Service Name part of Full Resource Name. This allows retrieval of entries using their associated resource name.For example if the Full Resource Name of a resource is //library.googleapis.com/shelves/shelf1/books/book2, then the suggested entry_id is library.googleapis.com/shelves/shelf1/books/book2.It is also suggested to follow the same convention for entries corresponding to resources from other providers or systems than Google Cloud.The maximum size of the field is 4000 characters.
        """
        return pulumi.get(self, "entry_id")

    @entry_id.setter
    def entry_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "entry_id", value)

    @property
    @pulumi.getter(name="entryType")
    def entry_type(self) -> pulumi.Input[str]:
        """
        Immutable. The resource name of the EntryType used to create this Entry.
        """
        return pulumi.get(self, "entry_type")

    @entry_type.setter
    def entry_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "entry_type", value)

    @property
    @pulumi.getter
    def aspects(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional. The Aspects attached to the Entry. The key is either the resource name of the aspect type (if the aspect is attached directly to the entry) or "aspectType@path" if the aspect is attached to an entry's path.
        """
        return pulumi.get(self, "aspects")

    @aspects.setter
    def aspects(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "aspects", value)

    @property
    @pulumi.getter(name="entrySource")
    def entry_source(self) -> Optional[pulumi.Input['GoogleCloudDataplexV1EntrySourceArgs']]:
        """
        Optional. Source system related information for an entry.
        """
        return pulumi.get(self, "entry_source")

    @entry_source.setter
    def entry_source(self, value: Optional[pulumi.Input['GoogleCloudDataplexV1EntrySourceArgs']]):
        pulumi.set(self, "entry_source", value)

    @property
    @pulumi.getter(name="fullyQualifiedName")
    def fully_qualified_name(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. A name for the entry that can reference it in an external system. The maximum size of the field is 4000 characters.
        """
        return pulumi.get(self, "fully_qualified_name")

    @fully_qualified_name.setter
    def fully_qualified_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fully_qualified_name", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier. The relative resource name of the Entry, of the form: projects/{project}/locations/{location}/entryGroups/{entry_group}/entries/{entry}.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parentEntry")
    def parent_entry(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Immutable. The resource name of the parent entry.
        """
        return pulumi.get(self, "parent_entry")

    @parent_entry.setter
    def parent_entry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_entry", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


class Entry(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aspects: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 entry_group_id: Optional[pulumi.Input[str]] = None,
                 entry_id: Optional[pulumi.Input[str]] = None,
                 entry_source: Optional[pulumi.Input[pulumi.InputType['GoogleCloudDataplexV1EntrySourceArgs']]] = None,
                 entry_type: Optional[pulumi.Input[str]] = None,
                 fully_qualified_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent_entry: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates an Entry.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] aspects: Optional. The Aspects attached to the Entry. The key is either the resource name of the aspect type (if the aspect is attached directly to the entry) or "aspectType@path" if the aspect is attached to an entry's path.
        :param pulumi.Input[str] entry_id: Required. Entry identifier. It has to be unique within an Entry Group.Entries corresponding to Google Cloud resources use Entry ID format based on Full Resource Names (https://cloud.google.com/apis/design/resource_names#full_resource_name). The format is a Full Resource Name of the resource without the prefix double slashes in the API Service Name part of Full Resource Name. This allows retrieval of entries using their associated resource name.For example if the Full Resource Name of a resource is //library.googleapis.com/shelves/shelf1/books/book2, then the suggested entry_id is library.googleapis.com/shelves/shelf1/books/book2.It is also suggested to follow the same convention for entries corresponding to resources from other providers or systems than Google Cloud.The maximum size of the field is 4000 characters.
        :param pulumi.Input[pulumi.InputType['GoogleCloudDataplexV1EntrySourceArgs']] entry_source: Optional. Source system related information for an entry.
        :param pulumi.Input[str] entry_type: Immutable. The resource name of the EntryType used to create this Entry.
        :param pulumi.Input[str] fully_qualified_name: Optional. A name for the entry that can reference it in an external system. The maximum size of the field is 4000 characters.
        :param pulumi.Input[str] name: Identifier. The relative resource name of the Entry, of the form: projects/{project}/locations/{location}/entryGroups/{entry_group}/entries/{entry}.
        :param pulumi.Input[str] parent_entry: Optional. Immutable. The resource name of the parent entry.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EntryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates an Entry.

        :param str resource_name: The name of the resource.
        :param EntryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EntryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aspects: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 entry_group_id: Optional[pulumi.Input[str]] = None,
                 entry_id: Optional[pulumi.Input[str]] = None,
                 entry_source: Optional[pulumi.Input[pulumi.InputType['GoogleCloudDataplexV1EntrySourceArgs']]] = None,
                 entry_type: Optional[pulumi.Input[str]] = None,
                 fully_qualified_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent_entry: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EntryArgs.__new__(EntryArgs)

            __props__.__dict__["aspects"] = aspects
            if entry_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'entry_group_id'")
            __props__.__dict__["entry_group_id"] = entry_group_id
            if entry_id is None and not opts.urn:
                raise TypeError("Missing required property 'entry_id'")
            __props__.__dict__["entry_id"] = entry_id
            __props__.__dict__["entry_source"] = entry_source
            if entry_type is None and not opts.urn:
                raise TypeError("Missing required property 'entry_type'")
            __props__.__dict__["entry_type"] = entry_type
            __props__.__dict__["fully_qualified_name"] = fully_qualified_name
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            __props__.__dict__["parent_entry"] = parent_entry
            __props__.__dict__["project"] = project
            __props__.__dict__["create_time"] = None
            __props__.__dict__["update_time"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["entry_group_id", "entry_id", "location", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Entry, __self__).__init__(
            'google-native:dataplex/v1:Entry',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Entry':
        """
        Get an existing Entry resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = EntryArgs.__new__(EntryArgs)

        __props__.__dict__["aspects"] = None
        __props__.__dict__["create_time"] = None
        __props__.__dict__["entry_group_id"] = None
        __props__.__dict__["entry_id"] = None
        __props__.__dict__["entry_source"] = None
        __props__.__dict__["entry_type"] = None
        __props__.__dict__["fully_qualified_name"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["parent_entry"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["update_time"] = None
        return Entry(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def aspects(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Optional. The Aspects attached to the Entry. The key is either the resource name of the aspect type (if the aspect is attached directly to the entry) or "aspectType@path" if the aspect is attached to an entry's path.
        """
        return pulumi.get(self, "aspects")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The time when the Entry was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="entryGroupId")
    def entry_group_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "entry_group_id")

    @property
    @pulumi.getter(name="entryId")
    def entry_id(self) -> pulumi.Output[str]:
        """
        Required. Entry identifier. It has to be unique within an Entry Group.Entries corresponding to Google Cloud resources use Entry ID format based on Full Resource Names (https://cloud.google.com/apis/design/resource_names#full_resource_name). The format is a Full Resource Name of the resource without the prefix double slashes in the API Service Name part of Full Resource Name. This allows retrieval of entries using their associated resource name.For example if the Full Resource Name of a resource is //library.googleapis.com/shelves/shelf1/books/book2, then the suggested entry_id is library.googleapis.com/shelves/shelf1/books/book2.It is also suggested to follow the same convention for entries corresponding to resources from other providers or systems than Google Cloud.The maximum size of the field is 4000 characters.
        """
        return pulumi.get(self, "entry_id")

    @property
    @pulumi.getter(name="entrySource")
    def entry_source(self) -> pulumi.Output['outputs.GoogleCloudDataplexV1EntrySourceResponse']:
        """
        Optional. Source system related information for an entry.
        """
        return pulumi.get(self, "entry_source")

    @property
    @pulumi.getter(name="entryType")
    def entry_type(self) -> pulumi.Output[str]:
        """
        Immutable. The resource name of the EntryType used to create this Entry.
        """
        return pulumi.get(self, "entry_type")

    @property
    @pulumi.getter(name="fullyQualifiedName")
    def fully_qualified_name(self) -> pulumi.Output[str]:
        """
        Optional. A name for the entry that can reference it in an external system. The maximum size of the field is 4000 characters.
        """
        return pulumi.get(self, "fully_qualified_name")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Identifier. The relative resource name of the Entry, of the form: projects/{project}/locations/{location}/entryGroups/{entry_group}/entries/{entry}.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentEntry")
    def parent_entry(self) -> pulumi.Output[str]:
        """
        Optional. Immutable. The resource name of the parent entry.
        """
        return pulumi.get(self, "parent_entry")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        The time when the Entry was last updated.
        """
        return pulumi.get(self, "update_time")

