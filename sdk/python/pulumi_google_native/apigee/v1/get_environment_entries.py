# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'GetEnvironmentEntriesResult',
    'AwaitableGetEnvironmentEntriesResult',
    'get_environment_entries',
    'get_environment_entries_output',
]

@pulumi.output_type
class GetEnvironmentEntriesResult:
    def __init__(__self__, name=None, value=None):
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if value and not isinstance(value, str):
            raise TypeError("Expected argument 'value' to be a str")
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Resource URI that can be used to identify the scope of the key value map entries.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Data or payload that is being retrieved and associated with the unique key.
        """
        return pulumi.get(self, "value")


class AwaitableGetEnvironmentEntriesResult(GetEnvironmentEntriesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEnvironmentEntriesResult(
            name=self.name,
            value=self.value)


def get_environment_entries(entry_id: Optional[str] = None,
                            environment_id: Optional[str] = None,
                            keyvaluemap_id: Optional[str] = None,
                            organization_id: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEnvironmentEntriesResult:
    """
    Get the Key value entry value for org, env or apis scoped Key value map.
    """
    __args__ = dict()
    __args__['entryId'] = entry_id
    __args__['environmentId'] = environment_id
    __args__['keyvaluemapId'] = keyvaluemap_id
    __args__['organizationId'] = organization_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('google-native:apigee/v1:getEnvironmentEntries', __args__, opts=opts, typ=GetEnvironmentEntriesResult).value

    return AwaitableGetEnvironmentEntriesResult(
        name=__ret__.name,
        value=__ret__.value)


@_utilities.lift_output_func(get_environment_entries)
def get_environment_entries_output(entry_id: Optional[pulumi.Input[str]] = None,
                                   environment_id: Optional[pulumi.Input[str]] = None,
                                   keyvaluemap_id: Optional[pulumi.Input[str]] = None,
                                   organization_id: Optional[pulumi.Input[str]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEnvironmentEntriesResult]:
    """
    Get the Key value entry value for org, env or apis scoped Key value map.
    """
    ...
