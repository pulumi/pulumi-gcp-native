# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetApidocResult',
    'AwaitableGetApidocResult',
    'get_apidoc',
    'get_apidoc_output',
]

@pulumi.output_type
class GetApidocResult:
    def __init__(__self__, data=None, error_code=None, message=None, request_id=None, status=None):
        if data and not isinstance(data, dict):
            raise TypeError("Expected argument 'data' to be a dict")
        pulumi.set(__self__, "data", data)
        if error_code and not isinstance(error_code, str):
            raise TypeError("Expected argument 'error_code' to be a str")
        pulumi.set(__self__, "error_code", error_code)
        if message and not isinstance(message, str):
            raise TypeError("Expected argument 'message' to be a str")
        pulumi.set(__self__, "message", message)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def data(self) -> 'outputs.GoogleCloudApigeeV1ApiDocResponse':
        """
        The catalog item resource.
        """
        return pulumi.get(self, "data")

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> str:
        """
        Unique error code for the request, if any.
        """
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Description of the operation.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> str:
        """
        Unique ID of the request.
        """
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the operation.
        """
        return pulumi.get(self, "status")


class AwaitableGetApidocResult(GetApidocResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApidocResult(
            data=self.data,
            error_code=self.error_code,
            message=self.message,
            request_id=self.request_id,
            status=self.status)


def get_apidoc(apidoc_id: Optional[str] = None,
               organization_id: Optional[str] = None,
               site_id: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApidocResult:
    """
    Gets a catalog item.
    """
    __args__ = dict()
    __args__['apidocId'] = apidoc_id
    __args__['organizationId'] = organization_id
    __args__['siteId'] = site_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:apigee/v1:getApidoc', __args__, opts=opts, typ=GetApidocResult).value

    return AwaitableGetApidocResult(
        data=pulumi.get(__ret__, 'data'),
        error_code=pulumi.get(__ret__, 'error_code'),
        message=pulumi.get(__ret__, 'message'),
        request_id=pulumi.get(__ret__, 'request_id'),
        status=pulumi.get(__ret__, 'status'))


@_utilities.lift_output_func(get_apidoc)
def get_apidoc_output(apidoc_id: Optional[pulumi.Input[str]] = None,
                      organization_id: Optional[pulumi.Input[str]] = None,
                      site_id: Optional[pulumi.Input[str]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetApidocResult]:
    """
    Gets a catalog item.
    """
    ...
